// Generated from SQLtiny.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';
import SQLtinyListener from './SQLtinyListener.js';
import SQLtinyVisitor from './SQLtinyVisitor.js';

const serializedATN = [4,1,157,1185,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,1,0,1,0,5,0,125,8,0,10,0,12,
0,128,9,0,1,0,1,0,1,1,1,1,1,1,1,2,5,2,136,8,2,10,2,12,2,139,9,2,1,2,1,2,
4,2,143,8,2,11,2,12,2,144,1,2,5,2,148,8,2,10,2,12,2,151,9,2,1,2,5,2,154,
8,2,10,2,12,2,157,9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,169,8,
3,1,4,1,4,3,4,173,8,4,1,4,1,4,1,4,1,4,3,4,179,8,4,1,4,1,4,1,4,3,4,184,8,
4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,193,8,4,10,4,12,4,196,9,4,1,4,1,4,1,4,
3,4,201,8,4,1,5,1,5,3,5,205,8,5,1,5,1,5,1,5,1,5,3,5,211,8,5,1,5,1,5,1,5,
3,5,216,8,5,1,5,1,5,1,5,1,5,1,5,5,5,223,8,5,10,5,12,5,226,9,5,1,5,1,5,5,
5,230,8,5,10,5,12,5,233,9,5,1,5,1,5,1,5,3,5,238,8,5,1,5,1,5,3,5,242,8,5,
1,6,3,6,245,8,6,1,6,1,6,1,6,1,6,1,6,3,6,252,8,6,1,7,3,7,255,8,7,1,7,1,7,
1,7,1,7,1,7,3,7,262,8,7,1,7,1,7,1,7,1,7,1,7,5,7,269,8,7,10,7,12,7,272,9,
7,3,7,274,8,7,1,7,1,7,1,7,1,7,3,7,280,8,7,3,7,282,8,7,1,8,1,8,1,8,1,8,3,
8,288,8,8,1,8,1,8,1,8,3,8,293,8,8,1,8,1,8,1,9,1,9,1,9,1,9,3,9,301,8,9,1,
9,1,9,1,9,3,9,306,8,9,1,9,1,9,1,10,3,10,311,8,10,1,10,1,10,1,10,1,10,1,10,
1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,330,8,10,
1,10,1,10,1,10,1,10,3,10,336,8,10,1,10,1,10,1,10,1,10,1,10,5,10,343,8,10,
10,10,12,10,346,9,10,1,10,1,10,3,10,350,8,10,1,10,1,10,1,10,1,10,1,10,5,
10,357,8,10,10,10,12,10,360,9,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,368,
8,10,10,10,12,10,371,9,10,1,10,1,10,5,10,375,8,10,10,10,12,10,378,9,10,1,
10,1,10,1,10,3,10,383,8,10,1,11,1,11,1,11,1,11,1,11,1,11,5,11,391,8,11,10,
11,12,11,394,9,11,3,11,396,8,11,1,11,1,11,1,11,1,11,3,11,402,8,11,3,11,404,
8,11,1,12,3,12,407,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
1,12,3,12,420,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,5,12,
432,8,12,10,12,12,12,435,9,12,1,12,1,12,3,12,439,8,12,1,13,3,13,442,8,13,
1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,455,8,13,1,13,
1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,467,8,13,10,13,12,13,470,
9,13,1,13,1,13,3,13,474,8,13,1,13,1,13,1,13,1,13,1,13,5,13,481,8,13,10,13,
12,13,484,9,13,3,13,486,8,13,1,13,1,13,1,13,1,13,3,13,492,8,13,3,13,494,
8,13,1,14,1,14,3,14,498,8,14,1,14,5,14,501,8,14,10,14,12,14,504,9,14,1,15,
4,15,507,8,15,11,15,12,15,508,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
15,1,15,3,15,521,8,15,1,16,1,16,3,16,525,8,16,1,16,1,16,1,16,3,16,530,8,
16,1,16,1,16,3,16,534,8,16,1,16,3,16,537,8,16,1,16,1,16,1,16,1,16,1,16,1,
16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,555,8,16,1,16,
1,16,1,16,3,16,560,8,16,1,17,1,17,1,17,3,17,565,8,17,1,18,1,18,1,18,1,18,
1,18,1,18,3,18,573,8,18,1,18,1,18,1,18,3,18,578,8,18,1,18,1,18,1,18,1,18,
1,18,1,18,1,18,3,18,587,8,18,1,18,1,18,1,18,5,18,592,8,18,10,18,12,18,595,
9,18,1,18,3,18,598,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
1,18,1,18,1,18,1,18,3,18,614,8,18,1,18,3,18,617,8,18,1,18,1,18,1,18,1,18,
1,18,1,18,3,18,625,8,18,1,18,1,18,1,18,1,18,1,18,4,18,632,8,18,11,18,12,
18,633,1,18,1,18,3,18,638,8,18,1,18,1,18,1,18,3,18,643,8,18,1,18,1,18,1,
18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,673,8,18,1,18,
1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,685,8,18,1,18,1,18,1,18,
3,18,690,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,702,
8,18,1,18,1,18,1,18,1,18,3,18,708,8,18,1,18,1,18,1,18,1,18,1,18,3,18,715,
8,18,1,18,1,18,3,18,719,8,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,727,8,18,
10,18,12,18,730,9,18,3,18,732,8,18,1,18,1,18,1,18,1,18,3,18,738,8,18,1,18,
3,18,741,8,18,5,18,743,8,18,10,18,12,18,746,9,18,1,19,1,19,1,19,1,19,1,19,
1,19,5,19,754,8,19,10,19,12,19,757,9,19,1,19,1,19,3,19,761,8,19,1,19,1,19,
1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,773,8,19,1,19,1,19,3,19,777,
8,19,5,19,779,8,19,10,19,12,19,782,9,19,1,19,3,19,785,8,19,1,19,1,19,1,19,
1,19,1,19,3,19,792,8,19,3,19,794,8,19,1,20,1,20,1,20,1,20,1,20,1,20,3,20,
802,8,20,1,20,1,20,1,21,1,21,1,21,3,21,809,8,21,1,21,3,21,812,8,21,1,22,
1,22,3,22,816,8,22,1,22,1,22,1,22,3,22,821,8,22,1,22,1,22,1,22,1,22,5,22,
827,8,22,10,22,12,22,830,9,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
22,1,22,1,22,1,22,1,22,1,22,5,22,846,8,22,10,22,12,22,849,9,22,1,22,1,22,
1,22,3,22,854,8,22,1,23,1,23,3,23,858,8,23,1,23,1,23,1,23,1,23,1,23,1,23,
1,23,1,23,1,23,1,23,1,23,1,23,5,23,872,8,23,10,23,12,23,875,9,23,1,24,1,
24,1,24,3,24,880,8,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,888,8,24,1,25,1,
25,1,25,3,25,893,8,25,1,25,3,25,896,8,25,1,26,1,26,1,26,3,26,901,8,26,1,
27,1,27,1,27,1,27,1,27,5,27,908,8,27,10,27,12,27,911,9,27,1,27,1,27,3,27,
915,8,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,
929,8,28,1,28,3,28,932,8,28,3,28,934,8,28,1,29,1,29,1,29,3,29,939,8,29,1,
29,1,29,3,29,943,8,29,1,29,3,29,946,8,29,1,29,1,29,1,29,1,29,1,29,3,29,953,
8,29,1,29,1,29,1,29,1,29,5,29,959,8,29,10,29,12,29,962,9,29,1,29,3,29,965,
8,29,1,29,1,29,3,29,969,8,29,1,29,3,29,972,8,29,1,29,1,29,1,29,1,29,3,29,
978,8,29,1,29,3,29,981,8,29,3,29,983,8,29,1,30,1,30,1,30,1,30,1,30,5,30,
990,8,30,10,30,12,30,993,9,30,1,31,1,31,3,31,997,8,31,1,31,1,31,3,31,1001,
8,31,1,31,1,31,3,31,1005,8,31,1,31,3,31,1008,8,31,1,32,1,32,1,32,1,32,1,
32,1,32,1,32,5,32,1017,8,32,10,32,12,32,1020,9,32,1,32,1,32,3,32,1024,8,
32,1,33,1,33,3,33,1028,8,33,1,33,1,33,1,33,5,33,1033,8,33,10,33,12,33,1036,
9,33,1,33,1,33,1,33,1,33,5,33,1042,8,33,10,33,12,33,1045,9,33,1,33,3,33,
1048,8,33,3,33,1050,8,33,1,33,1,33,3,33,1054,8,33,1,33,1,33,1,33,1,33,1,
33,5,33,1061,8,33,10,33,12,33,1064,9,33,1,33,1,33,3,33,1068,8,33,3,33,1070,
8,33,1,33,1,33,1,33,1,33,1,33,5,33,1077,8,33,10,33,12,33,1080,9,33,1,33,
1,33,1,33,1,33,1,33,1,33,5,33,1088,8,33,10,33,12,33,1091,9,33,1,33,1,33,
5,33,1095,8,33,10,33,12,33,1098,9,33,3,33,1100,8,33,1,34,1,34,1,34,1,34,
1,34,3,34,1107,8,34,1,35,1,35,1,35,1,35,1,35,5,35,1114,8,35,10,35,12,35,
1117,9,35,1,35,1,35,3,35,1121,8,35,1,36,3,36,1124,8,36,1,36,1,36,1,37,1,
37,1,38,1,38,1,39,1,39,1,40,1,40,3,40,1136,8,40,1,41,1,41,1,42,1,42,1,43,
1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,
50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,
1,58,1,58,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,1183,8,60,1,
60,0,1,36,61,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,0,16,1,0,131,132,
2,0,5,5,106,106,2,0,34,34,60,60,5,0,25,25,72,72,81,81,122,122,125,125,2,
0,7,7,12,13,1,0,8,9,1,0,14,17,1,0,18,21,4,0,77,77,97,97,99,99,118,118,2,
0,59,59,139,139,3,0,25,25,72,72,125,125,2,0,29,29,62,62,4,0,52,54,104,104,
150,150,152,153,2,0,8,10,102,102,2,0,149,149,152,152,1,0,25,148,1357,0,126,
1,0,0,0,2,131,1,0,0,0,4,137,1,0,0,0,6,168,1,0,0,0,8,170,1,0,0,0,10,202,1,
0,0,0,12,244,1,0,0,0,14,254,1,0,0,0,16,283,1,0,0,0,18,296,1,0,0,0,20,310,
1,0,0,0,22,384,1,0,0,0,24,406,1,0,0,0,26,441,1,0,0,0,28,495,1,0,0,0,30,506,
1,0,0,0,32,524,1,0,0,0,34,564,1,0,0,0,36,642,1,0,0,0,38,747,1,0,0,0,40,795,
1,0,0,0,42,805,1,0,0,0,44,815,1,0,0,0,46,855,1,0,0,0,48,879,1,0,0,0,50,889,
1,0,0,0,52,900,1,0,0,0,54,902,1,0,0,0,56,933,1,0,0,0,58,982,1,0,0,0,60,984,
1,0,0,0,62,1007,1,0,0,0,64,1023,1,0,0,0,66,1099,1,0,0,0,68,1106,1,0,0,0,
70,1108,1,0,0,0,72,1123,1,0,0,0,74,1127,1,0,0,0,76,1129,1,0,0,0,78,1131,
1,0,0,0,80,1135,1,0,0,0,82,1137,1,0,0,0,84,1139,1,0,0,0,86,1141,1,0,0,0,
88,1143,1,0,0,0,90,1145,1,0,0,0,92,1147,1,0,0,0,94,1149,1,0,0,0,96,1151,
1,0,0,0,98,1153,1,0,0,0,100,1155,1,0,0,0,102,1157,1,0,0,0,104,1159,1,0,0,
0,106,1161,1,0,0,0,108,1163,1,0,0,0,110,1165,1,0,0,0,112,1167,1,0,0,0,114,
1169,1,0,0,0,116,1171,1,0,0,0,118,1173,1,0,0,0,120,1182,1,0,0,0,122,125,
3,4,2,0,123,125,3,2,1,0,124,122,1,0,0,0,124,123,1,0,0,0,125,128,1,0,0,0,
126,124,1,0,0,0,126,127,1,0,0,0,127,129,1,0,0,0,128,126,1,0,0,0,129,130,
5,0,0,1,130,1,1,0,0,0,131,132,5,157,0,0,132,133,6,1,-1,0,133,3,1,0,0,0,134,
136,5,1,0,0,135,134,1,0,0,0,136,139,1,0,0,0,137,135,1,0,0,0,137,138,1,0,
0,0,138,140,1,0,0,0,139,137,1,0,0,0,140,149,3,6,3,0,141,143,5,1,0,0,142,
141,1,0,0,0,143,144,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,146,1,0,
0,0,146,148,3,6,3,0,147,142,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,
150,1,0,0,0,150,155,1,0,0,0,151,149,1,0,0,0,152,154,5,1,0,0,153,152,1,0,
0,0,154,157,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,5,1,0,0,0,157,155,
1,0,0,0,158,169,3,8,4,0,159,169,3,10,5,0,160,169,3,12,6,0,161,169,3,14,7,
0,162,169,3,16,8,0,163,169,3,18,9,0,164,169,3,20,10,0,165,169,3,22,11,0,
166,169,3,24,12,0,167,169,3,26,13,0,168,158,1,0,0,0,168,159,1,0,0,0,168,
160,1,0,0,0,168,161,1,0,0,0,168,162,1,0,0,0,168,163,1,0,0,0,168,164,1,0,
0,0,168,165,1,0,0,0,168,166,1,0,0,0,168,167,1,0,0,0,169,7,1,0,0,0,170,172,
5,50,0,0,171,173,5,138,0,0,172,171,1,0,0,0,172,173,1,0,0,0,173,174,1,0,0,
0,174,178,5,84,0,0,175,176,5,80,0,0,176,177,5,102,0,0,177,179,5,70,0,0,178,
175,1,0,0,0,178,179,1,0,0,0,179,183,1,0,0,0,180,181,3,90,45,0,181,182,5,
2,0,0,182,184,1,0,0,0,183,180,1,0,0,0,183,184,1,0,0,0,184,185,1,0,0,0,185,
186,3,104,52,0,186,187,5,107,0,0,187,188,3,92,46,0,188,189,5,3,0,0,189,194,
3,42,21,0,190,191,5,5,0,0,191,193,3,42,21,0,192,190,1,0,0,0,193,196,1,0,
0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,197,1,0,0,0,196,194,1,0,0,0,197,
200,5,4,0,0,198,199,5,146,0,0,199,201,3,36,18,0,200,198,1,0,0,0,200,201,
1,0,0,0,201,9,1,0,0,0,202,204,5,50,0,0,203,205,7,0,0,0,204,203,1,0,0,0,204,
205,1,0,0,0,205,206,1,0,0,0,206,210,5,130,0,0,207,208,5,80,0,0,208,209,5,
102,0,0,209,211,5,70,0,0,210,207,1,0,0,0,210,211,1,0,0,0,211,215,1,0,0,0,
212,213,3,90,45,0,213,214,5,2,0,0,214,216,1,0,0,0,215,212,1,0,0,0,215,216,
1,0,0,0,216,217,1,0,0,0,217,241,3,92,46,0,218,219,5,3,0,0,219,224,3,28,14,
0,220,221,5,5,0,0,221,223,3,28,14,0,222,220,1,0,0,0,223,226,1,0,0,0,224,
222,1,0,0,0,224,225,1,0,0,0,225,231,1,0,0,0,226,224,1,0,0,0,227,228,5,5,
0,0,228,230,3,44,22,0,229,227,1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,
232,1,0,0,0,232,234,1,0,0,0,233,231,1,0,0,0,234,237,5,4,0,0,235,236,5,148,
0,0,236,238,5,149,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,242,1,0,0,0,239,
240,5,33,0,0,240,242,3,22,11,0,241,218,1,0,0,0,241,239,1,0,0,0,242,11,1,
0,0,0,243,245,3,46,23,0,244,243,1,0,0,0,244,245,1,0,0,0,245,246,1,0,0,0,
246,247,5,59,0,0,247,248,5,75,0,0,248,251,3,48,24,0,249,250,5,146,0,0,250,
252,3,36,18,0,251,249,1,0,0,0,251,252,1,0,0,0,252,13,1,0,0,0,253,255,3,46,
23,0,254,253,1,0,0,0,254,255,1,0,0,0,255,256,1,0,0,0,256,257,5,59,0,0,257,
258,5,75,0,0,258,261,3,48,24,0,259,260,5,146,0,0,260,262,3,36,18,0,261,259,
1,0,0,0,261,262,1,0,0,0,262,281,1,0,0,0,263,264,5,109,0,0,264,265,5,40,0,
0,265,270,3,50,25,0,266,267,5,5,0,0,267,269,3,50,25,0,268,266,1,0,0,0,269,
272,1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,274,1,0,0,0,272,270,1,0,
0,0,273,263,1,0,0,0,273,274,1,0,0,0,274,275,1,0,0,0,275,276,5,98,0,0,276,
279,3,36,18,0,277,278,7,1,0,0,278,280,3,36,18,0,279,277,1,0,0,0,279,280,
1,0,0,0,280,282,1,0,0,0,281,273,1,0,0,0,281,282,1,0,0,0,282,15,1,0,0,0,283,
284,5,63,0,0,284,287,5,84,0,0,285,286,5,80,0,0,286,288,5,70,0,0,287,285,
1,0,0,0,287,288,1,0,0,0,288,292,1,0,0,0,289,290,3,90,45,0,290,291,5,2,0,
0,291,293,1,0,0,0,292,289,1,0,0,0,292,293,1,0,0,0,293,294,1,0,0,0,294,295,
3,104,52,0,295,17,1,0,0,0,296,297,5,63,0,0,297,300,5,130,0,0,298,299,5,80,
0,0,299,301,5,70,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,305,1,0,0,0,302,
303,3,90,45,0,303,304,5,2,0,0,304,306,1,0,0,0,305,302,1,0,0,0,305,306,1,
0,0,0,306,307,1,0,0,0,307,308,3,92,46,0,308,19,1,0,0,0,309,311,3,46,23,0,
310,309,1,0,0,0,310,311,1,0,0,0,311,329,1,0,0,0,312,330,5,88,0,0,313,330,
5,122,0,0,314,315,5,88,0,0,315,316,5,108,0,0,316,330,5,122,0,0,317,318,5,
88,0,0,318,319,5,108,0,0,319,330,5,125,0,0,320,321,5,88,0,0,321,322,5,108,
0,0,322,330,5,25,0,0,323,324,5,88,0,0,324,325,5,108,0,0,325,330,5,72,0,0,
326,327,5,88,0,0,327,328,5,108,0,0,328,330,5,81,0,0,329,312,1,0,0,0,329,
313,1,0,0,0,329,314,1,0,0,0,329,317,1,0,0,0,329,320,1,0,0,0,329,323,1,0,
0,0,329,326,1,0,0,0,330,331,1,0,0,0,331,335,5,91,0,0,332,333,3,90,45,0,333,
334,5,2,0,0,334,336,1,0,0,0,335,332,1,0,0,0,335,336,1,0,0,0,336,337,1,0,
0,0,337,349,3,92,46,0,338,339,5,3,0,0,339,344,3,98,49,0,340,341,5,5,0,0,
341,343,3,98,49,0,342,340,1,0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,344,345,
1,0,0,0,345,347,1,0,0,0,346,344,1,0,0,0,347,348,5,4,0,0,348,350,1,0,0,0,
349,338,1,0,0,0,349,350,1,0,0,0,350,382,1,0,0,0,351,352,5,142,0,0,352,353,
5,3,0,0,353,358,3,36,18,0,354,355,5,5,0,0,355,357,3,36,18,0,356,354,1,0,
0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,361,1,0,0,0,360,
358,1,0,0,0,361,376,5,4,0,0,362,363,5,5,0,0,363,364,5,3,0,0,364,369,3,36,
18,0,365,366,5,5,0,0,366,368,3,36,18,0,367,365,1,0,0,0,368,371,1,0,0,0,369,
367,1,0,0,0,369,370,1,0,0,0,370,372,1,0,0,0,371,369,1,0,0,0,372,373,5,4,
0,0,373,375,1,0,0,0,374,362,1,0,0,0,375,378,1,0,0,0,376,374,1,0,0,0,376,
377,1,0,0,0,377,383,1,0,0,0,378,376,1,0,0,0,379,383,3,22,11,0,380,381,5,
56,0,0,381,383,5,142,0,0,382,351,1,0,0,0,382,379,1,0,0,0,382,380,1,0,0,0,
383,21,1,0,0,0,384,395,3,66,33,0,385,386,5,109,0,0,386,387,5,40,0,0,387,
392,3,50,25,0,388,389,5,5,0,0,389,391,3,50,25,0,390,388,1,0,0,0,391,394,
1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,
395,385,1,0,0,0,395,396,1,0,0,0,396,403,1,0,0,0,397,398,5,98,0,0,398,401,
3,36,18,0,399,400,7,1,0,0,400,402,3,36,18,0,401,399,1,0,0,0,401,402,1,0,
0,0,402,404,1,0,0,0,403,397,1,0,0,0,403,404,1,0,0,0,404,23,1,0,0,0,405,407,
3,46,23,0,406,405,1,0,0,0,406,407,1,0,0,0,407,408,1,0,0,0,408,419,5,139,
0,0,409,410,5,108,0,0,410,420,5,125,0,0,411,412,5,108,0,0,412,420,5,25,0,
0,413,414,5,108,0,0,414,420,5,122,0,0,415,416,5,108,0,0,416,420,5,72,0,0,
417,418,5,108,0,0,418,420,5,81,0,0,419,409,1,0,0,0,419,411,1,0,0,0,419,413,
1,0,0,0,419,415,1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,421,1,0,0,0,
421,422,3,48,24,0,422,423,5,129,0,0,423,424,3,98,49,0,424,425,5,6,0,0,425,
433,3,36,18,0,426,427,5,5,0,0,427,428,3,98,49,0,428,429,5,6,0,0,429,430,
3,36,18,0,430,432,1,0,0,0,431,426,1,0,0,0,432,435,1,0,0,0,433,431,1,0,0,
0,433,434,1,0,0,0,434,438,1,0,0,0,435,433,1,0,0,0,436,437,5,146,0,0,437,
439,3,36,18,0,438,436,1,0,0,0,438,439,1,0,0,0,439,25,1,0,0,0,440,442,3,46,
23,0,441,440,1,0,0,0,441,442,1,0,0,0,442,443,1,0,0,0,443,454,5,139,0,0,444,
445,5,108,0,0,445,455,5,125,0,0,446,447,5,108,0,0,447,455,5,25,0,0,448,449,
5,108,0,0,449,455,5,122,0,0,450,451,5,108,0,0,451,455,5,72,0,0,452,453,5,
108,0,0,453,455,5,81,0,0,454,444,1,0,0,0,454,446,1,0,0,0,454,448,1,0,0,0,
454,450,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,456,1,0,0,0,456,457,
3,48,24,0,457,458,5,129,0,0,458,459,3,98,49,0,459,460,5,6,0,0,460,468,3,
36,18,0,461,462,5,5,0,0,462,463,3,98,49,0,463,464,5,6,0,0,464,465,3,36,18,
0,465,467,1,0,0,0,466,461,1,0,0,0,467,470,1,0,0,0,468,466,1,0,0,0,468,469,
1,0,0,0,469,473,1,0,0,0,470,468,1,0,0,0,471,472,5,146,0,0,472,474,3,36,18,
0,473,471,1,0,0,0,473,474,1,0,0,0,474,493,1,0,0,0,475,476,5,109,0,0,476,
477,5,40,0,0,477,482,3,50,25,0,478,479,5,5,0,0,479,481,3,50,25,0,480,478,
1,0,0,0,481,484,1,0,0,0,482,480,1,0,0,0,482,483,1,0,0,0,483,486,1,0,0,0,
484,482,1,0,0,0,485,475,1,0,0,0,485,486,1,0,0,0,486,487,1,0,0,0,487,488,
5,98,0,0,488,491,3,36,18,0,489,490,7,1,0,0,490,492,3,36,18,0,491,489,1,0,
0,0,491,492,1,0,0,0,492,494,1,0,0,0,493,485,1,0,0,0,493,494,1,0,0,0,494,
27,1,0,0,0,495,497,3,98,49,0,496,498,3,30,15,0,497,496,1,0,0,0,497,498,1,
0,0,0,498,502,1,0,0,0,499,501,3,32,16,0,500,499,1,0,0,0,501,504,1,0,0,0,
502,500,1,0,0,0,502,503,1,0,0,0,503,29,1,0,0,0,504,502,1,0,0,0,505,507,3,
86,43,0,506,505,1,0,0,0,507,508,1,0,0,0,508,506,1,0,0,0,508,509,1,0,0,0,
509,520,1,0,0,0,510,511,5,3,0,0,511,512,3,72,36,0,512,513,5,4,0,0,513,521,
1,0,0,0,514,515,5,3,0,0,515,516,3,72,36,0,516,517,5,5,0,0,517,518,3,72,36,
0,518,519,5,4,0,0,519,521,1,0,0,0,520,510,1,0,0,0,520,514,1,0,0,0,520,521,
1,0,0,0,521,31,1,0,0,0,522,523,5,49,0,0,523,525,3,86,43,0,524,522,1,0,0,
0,524,525,1,0,0,0,525,559,1,0,0,0,526,527,5,113,0,0,527,529,5,95,0,0,528,
530,7,2,0,0,529,528,1,0,0,0,529,530,1,0,0,0,530,531,1,0,0,0,531,533,3,34,
17,0,532,534,5,36,0,0,533,532,1,0,0,0,533,534,1,0,0,0,534,560,1,0,0,0,535,
537,5,102,0,0,536,535,1,0,0,0,536,537,1,0,0,0,537,538,1,0,0,0,538,539,5,
104,0,0,539,560,3,34,17,0,540,541,5,138,0,0,541,560,3,34,17,0,542,543,5,
44,0,0,543,544,5,3,0,0,544,545,3,36,18,0,545,546,5,4,0,0,546,560,1,0,0,0,
547,554,5,56,0,0,548,555,3,72,36,0,549,555,3,74,37,0,550,551,5,3,0,0,551,
552,3,36,18,0,552,553,5,4,0,0,553,555,1,0,0,0,554,548,1,0,0,0,554,549,1,
0,0,0,554,550,1,0,0,0,555,560,1,0,0,0,556,557,5,45,0,0,557,560,3,100,50,
0,558,560,3,38,19,0,559,526,1,0,0,0,559,536,1,0,0,0,559,540,1,0,0,0,559,
542,1,0,0,0,559,547,1,0,0,0,559,556,1,0,0,0,559,558,1,0,0,0,560,33,1,0,0,
0,561,562,5,107,0,0,562,563,5,48,0,0,563,565,7,3,0,0,564,561,1,0,0,0,564,
565,1,0,0,0,565,35,1,0,0,0,566,567,6,18,-1,0,567,643,3,74,37,0,568,643,5,
151,0,0,569,570,3,90,45,0,570,571,5,2,0,0,571,573,1,0,0,0,572,569,1,0,0,
0,572,573,1,0,0,0,573,574,1,0,0,0,574,575,3,92,46,0,575,576,5,2,0,0,576,
578,1,0,0,0,577,572,1,0,0,0,577,578,1,0,0,0,578,579,1,0,0,0,579,643,3,98,
49,0,580,581,3,76,38,0,581,582,3,36,18,21,582,643,1,0,0,0,583,584,3,88,44,
0,584,597,5,3,0,0,585,587,5,62,0,0,586,585,1,0,0,0,586,587,1,0,0,0,587,588,
1,0,0,0,588,593,3,36,18,0,589,590,5,5,0,0,590,592,3,36,18,0,591,589,1,0,
0,0,592,595,1,0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,598,1,0,0,0,595,
593,1,0,0,0,596,598,5,7,0,0,597,586,1,0,0,0,597,596,1,0,0,0,597,598,1,0,
0,0,598,599,1,0,0,0,599,600,5,4,0,0,600,643,1,0,0,0,601,602,5,3,0,0,602,
603,3,36,18,0,603,604,5,4,0,0,604,643,1,0,0,0,605,606,5,43,0,0,606,607,5,
3,0,0,607,608,3,36,18,0,608,609,5,33,0,0,609,610,3,30,15,0,610,611,5,4,0,
0,611,643,1,0,0,0,612,614,5,102,0,0,613,612,1,0,0,0,613,614,1,0,0,0,614,
615,1,0,0,0,615,617,5,70,0,0,616,613,1,0,0,0,616,617,1,0,0,0,617,618,1,0,
0,0,618,619,5,3,0,0,619,620,3,22,11,0,620,621,5,4,0,0,621,643,1,0,0,0,622,
624,5,42,0,0,623,625,3,36,18,0,624,623,1,0,0,0,624,625,1,0,0,0,625,631,1,
0,0,0,626,627,5,145,0,0,627,628,3,36,18,0,628,629,5,133,0,0,629,630,3,36,
18,0,630,632,1,0,0,0,631,626,1,0,0,0,632,633,1,0,0,0,633,631,1,0,0,0,633,
634,1,0,0,0,634,637,1,0,0,0,635,636,5,65,0,0,636,638,3,36,18,0,637,635,1,
0,0,0,637,638,1,0,0,0,638,639,1,0,0,0,639,640,5,66,0,0,640,643,1,0,0,0,641,
643,3,40,20,0,642,566,1,0,0,0,642,568,1,0,0,0,642,577,1,0,0,0,642,580,1,
0,0,0,642,583,1,0,0,0,642,601,1,0,0,0,642,605,1,0,0,0,642,616,1,0,0,0,642,
622,1,0,0,0,642,641,1,0,0,0,643,744,1,0,0,0,644,645,10,20,0,0,645,646,5,
11,0,0,646,743,3,36,18,21,647,648,10,19,0,0,648,649,7,4,0,0,649,743,3,36,
18,20,650,651,10,18,0,0,651,652,7,5,0,0,652,743,3,36,18,19,653,654,10,17,
0,0,654,655,7,6,0,0,655,743,3,36,18,18,656,657,10,16,0,0,657,658,7,7,0,0,
658,743,3,36,18,17,659,672,10,15,0,0,660,673,5,6,0,0,661,673,5,22,0,0,662,
673,5,23,0,0,663,673,5,24,0,0,664,673,5,92,0,0,665,666,5,92,0,0,666,673,
5,102,0,0,667,673,5,83,0,0,668,673,5,97,0,0,669,673,5,77,0,0,670,673,5,99,
0,0,671,673,5,118,0,0,672,660,1,0,0,0,672,661,1,0,0,0,672,662,1,0,0,0,672,
663,1,0,0,0,672,664,1,0,0,0,672,665,1,0,0,0,672,667,1,0,0,0,672,668,1,0,
0,0,672,669,1,0,0,0,672,670,1,0,0,0,672,671,1,0,0,0,673,674,1,0,0,0,674,
743,3,36,18,16,675,676,10,14,0,0,676,677,5,32,0,0,677,743,3,36,18,15,678,
679,10,13,0,0,679,680,5,108,0,0,680,743,3,36,18,14,681,682,10,6,0,0,682,
684,5,92,0,0,683,685,5,102,0,0,684,683,1,0,0,0,684,685,1,0,0,0,685,686,1,
0,0,0,686,743,3,36,18,7,687,689,10,5,0,0,688,690,5,102,0,0,689,688,1,0,0,
0,689,690,1,0,0,0,690,691,1,0,0,0,691,692,5,39,0,0,692,693,3,36,18,0,693,
694,5,32,0,0,694,695,3,36,18,6,695,743,1,0,0,0,696,697,10,9,0,0,697,698,
5,45,0,0,698,743,3,100,50,0,699,701,10,8,0,0,700,702,5,102,0,0,701,700,1,
0,0,0,701,702,1,0,0,0,702,703,1,0,0,0,703,704,7,8,0,0,704,707,3,36,18,0,
705,706,5,67,0,0,706,708,3,36,18,0,707,705,1,0,0,0,707,708,1,0,0,0,708,743,
1,0,0,0,709,714,10,7,0,0,710,715,5,93,0,0,711,715,5,103,0,0,712,713,5,102,
0,0,713,715,5,104,0,0,714,710,1,0,0,0,714,711,1,0,0,0,714,712,1,0,0,0,715,
743,1,0,0,0,716,718,10,4,0,0,717,719,5,102,0,0,718,717,1,0,0,0,718,719,1,
0,0,0,719,720,1,0,0,0,720,740,5,83,0,0,721,731,5,3,0,0,722,732,3,22,11,0,
723,728,3,36,18,0,724,725,5,5,0,0,725,727,3,36,18,0,726,724,1,0,0,0,727,
730,1,0,0,0,728,726,1,0,0,0,728,729,1,0,0,0,729,732,1,0,0,0,730,728,1,0,
0,0,731,722,1,0,0,0,731,723,1,0,0,0,731,732,1,0,0,0,732,733,1,0,0,0,733,
741,5,4,0,0,734,735,3,90,45,0,735,736,5,2,0,0,736,738,1,0,0,0,737,734,1,
0,0,0,737,738,1,0,0,0,738,739,1,0,0,0,739,741,3,92,46,0,740,721,1,0,0,0,
740,737,1,0,0,0,741,743,1,0,0,0,742,644,1,0,0,0,742,647,1,0,0,0,742,650,
1,0,0,0,742,653,1,0,0,0,742,656,1,0,0,0,742,659,1,0,0,0,742,675,1,0,0,0,
742,678,1,0,0,0,742,681,1,0,0,0,742,687,1,0,0,0,742,696,1,0,0,0,742,699,
1,0,0,0,742,709,1,0,0,0,742,716,1,0,0,0,743,746,1,0,0,0,744,742,1,0,0,0,
744,745,1,0,0,0,745,37,1,0,0,0,746,744,1,0,0,0,747,748,5,117,0,0,748,760,
3,102,51,0,749,750,5,3,0,0,750,755,3,98,49,0,751,752,5,5,0,0,752,754,3,98,
49,0,753,751,1,0,0,0,754,757,1,0,0,0,755,753,1,0,0,0,755,756,1,0,0,0,756,
758,1,0,0,0,757,755,1,0,0,0,758,759,5,4,0,0,759,761,1,0,0,0,760,749,1,0,
0,0,760,761,1,0,0,0,761,780,1,0,0,0,762,763,5,107,0,0,763,772,7,9,0,0,764,
765,5,129,0,0,765,773,5,104,0,0,766,767,5,129,0,0,767,773,5,56,0,0,768,773,
5,41,0,0,769,773,5,123,0,0,770,771,5,101,0,0,771,773,5,26,0,0,772,764,1,
0,0,0,772,766,1,0,0,0,772,768,1,0,0,0,772,769,1,0,0,0,772,770,1,0,0,0,773,
777,1,0,0,0,774,775,5,99,0,0,775,777,3,86,43,0,776,762,1,0,0,0,776,774,1,
0,0,0,777,779,1,0,0,0,778,776,1,0,0,0,779,782,1,0,0,0,780,778,1,0,0,0,780,
781,1,0,0,0,781,793,1,0,0,0,782,780,1,0,0,0,783,785,5,102,0,0,784,783,1,
0,0,0,784,785,1,0,0,0,785,786,1,0,0,0,786,791,5,57,0,0,787,788,5,86,0,0,
788,792,5,58,0,0,789,790,5,86,0,0,790,792,5,82,0,0,791,787,1,0,0,0,791,789,
1,0,0,0,791,792,1,0,0,0,792,794,1,0,0,0,793,784,1,0,0,0,793,794,1,0,0,0,
794,39,1,0,0,0,795,796,5,115,0,0,796,801,5,3,0,0,797,802,5,81,0,0,798,799,
7,10,0,0,799,800,5,5,0,0,800,802,3,78,39,0,801,797,1,0,0,0,801,798,1,0,0,
0,802,803,1,0,0,0,803,804,5,4,0,0,804,41,1,0,0,0,805,808,3,98,49,0,806,807,
5,45,0,0,807,809,3,100,50,0,808,806,1,0,0,0,808,809,1,0,0,0,809,811,1,0,
0,0,810,812,7,2,0,0,811,810,1,0,0,0,811,812,1,0,0,0,812,43,1,0,0,0,813,814,
5,49,0,0,814,816,3,86,43,0,815,813,1,0,0,0,815,816,1,0,0,0,816,853,1,0,0,
0,817,818,5,113,0,0,818,821,5,95,0,0,819,821,5,138,0,0,820,817,1,0,0,0,820,
819,1,0,0,0,821,822,1,0,0,0,822,823,5,3,0,0,823,828,3,42,21,0,824,825,5,
5,0,0,825,827,3,42,21,0,826,824,1,0,0,0,827,830,1,0,0,0,828,826,1,0,0,0,
828,829,1,0,0,0,829,831,1,0,0,0,830,828,1,0,0,0,831,832,5,4,0,0,832,833,
3,34,17,0,833,854,1,0,0,0,834,835,5,44,0,0,835,836,5,3,0,0,836,837,3,36,
18,0,837,838,5,4,0,0,838,854,1,0,0,0,839,840,5,74,0,0,840,841,5,95,0,0,841,
842,5,3,0,0,842,847,3,98,49,0,843,844,5,5,0,0,844,846,3,98,49,0,845,843,
1,0,0,0,846,849,1,0,0,0,847,845,1,0,0,0,847,848,1,0,0,0,848,850,1,0,0,0,
849,847,1,0,0,0,850,851,5,4,0,0,851,852,3,38,19,0,852,854,1,0,0,0,853,820,
1,0,0,0,853,834,1,0,0,0,853,839,1,0,0,0,854,45,1,0,0,0,855,857,5,147,0,0,
856,858,5,116,0,0,857,856,1,0,0,0,857,858,1,0,0,0,858,859,1,0,0,0,859,860,
3,70,35,0,860,861,5,33,0,0,861,862,5,3,0,0,862,863,3,22,11,0,863,873,5,4,
0,0,864,865,5,5,0,0,865,866,3,70,35,0,866,867,5,33,0,0,867,868,5,3,0,0,868,
869,3,22,11,0,869,870,5,4,0,0,870,872,1,0,0,0,871,864,1,0,0,0,872,875,1,
0,0,0,873,871,1,0,0,0,873,874,1,0,0,0,874,47,1,0,0,0,875,873,1,0,0,0,876,
877,3,90,45,0,877,878,5,2,0,0,878,880,1,0,0,0,879,876,1,0,0,0,879,880,1,
0,0,0,880,881,1,0,0,0,881,887,3,92,46,0,882,883,5,85,0,0,883,884,5,40,0,
0,884,888,3,104,52,0,885,886,5,102,0,0,886,888,5,85,0,0,887,882,1,0,0,0,
887,885,1,0,0,0,887,888,1,0,0,0,888,49,1,0,0,0,889,892,3,36,18,0,890,891,
5,45,0,0,891,893,3,100,50,0,892,890,1,0,0,0,892,893,1,0,0,0,893,895,1,0,
0,0,894,896,7,2,0,0,895,894,1,0,0,0,895,896,1,0,0,0,896,51,1,0,0,0,897,901,
3,72,36,0,898,901,3,86,43,0,899,901,5,152,0,0,900,897,1,0,0,0,900,898,1,
0,0,0,900,899,1,0,0,0,901,53,1,0,0,0,902,914,3,92,46,0,903,904,5,3,0,0,904,
909,3,98,49,0,905,906,5,5,0,0,906,908,3,98,49,0,907,905,1,0,0,0,908,911,
1,0,0,0,909,907,1,0,0,0,909,910,1,0,0,0,910,912,1,0,0,0,911,909,1,0,0,0,
912,913,5,4,0,0,913,915,1,0,0,0,914,903,1,0,0,0,914,915,1,0,0,0,915,916,
1,0,0,0,916,917,5,33,0,0,917,918,5,3,0,0,918,919,3,22,11,0,919,920,5,4,0,
0,920,55,1,0,0,0,921,934,5,7,0,0,922,923,3,92,46,0,923,924,5,2,0,0,924,925,
5,7,0,0,925,934,1,0,0,0,926,931,3,36,18,0,927,929,5,33,0,0,928,927,1,0,0,
0,928,929,1,0,0,0,929,930,1,0,0,0,930,932,3,82,41,0,931,928,1,0,0,0,931,
932,1,0,0,0,932,934,1,0,0,0,933,921,1,0,0,0,933,922,1,0,0,0,933,926,1,0,
0,0,934,57,1,0,0,0,935,936,3,90,45,0,936,937,5,2,0,0,937,939,1,0,0,0,938,
935,1,0,0,0,938,939,1,0,0,0,939,940,1,0,0,0,940,945,3,92,46,0,941,943,5,
33,0,0,942,941,1,0,0,0,942,943,1,0,0,0,943,944,1,0,0,0,944,946,3,116,58,
0,945,942,1,0,0,0,945,946,1,0,0,0,946,952,1,0,0,0,947,948,5,85,0,0,948,949,
5,40,0,0,949,953,3,104,52,0,950,951,5,102,0,0,951,953,5,85,0,0,952,947,1,
0,0,0,952,950,1,0,0,0,952,953,1,0,0,0,953,983,1,0,0,0,954,964,5,3,0,0,955,
960,3,58,29,0,956,957,5,5,0,0,957,959,3,58,29,0,958,956,1,0,0,0,959,962,
1,0,0,0,960,958,1,0,0,0,960,961,1,0,0,0,961,965,1,0,0,0,962,960,1,0,0,0,
963,965,3,60,30,0,964,955,1,0,0,0,964,963,1,0,0,0,965,966,1,0,0,0,966,971,
5,4,0,0,967,969,5,33,0,0,968,967,1,0,0,0,968,969,1,0,0,0,969,970,1,0,0,0,
970,972,3,116,58,0,971,968,1,0,0,0,971,972,1,0,0,0,972,983,1,0,0,0,973,974,
5,3,0,0,974,975,3,22,11,0,975,980,5,4,0,0,976,978,5,33,0,0,977,976,1,0,0,
0,977,978,1,0,0,0,978,979,1,0,0,0,979,981,3,116,58,0,980,977,1,0,0,0,980,
981,1,0,0,0,981,983,1,0,0,0,982,938,1,0,0,0,982,954,1,0,0,0,982,973,1,0,
0,0,983,59,1,0,0,0,984,991,3,58,29,0,985,986,3,62,31,0,986,987,3,58,29,0,
987,988,3,64,32,0,988,990,1,0,0,0,989,985,1,0,0,0,990,993,1,0,0,0,991,989,
1,0,0,0,991,992,1,0,0,0,992,61,1,0,0,0,993,991,1,0,0,0,994,1008,5,5,0,0,
995,997,5,100,0,0,996,995,1,0,0,0,996,997,1,0,0,0,997,1004,1,0,0,0,998,1000,
5,96,0,0,999,1001,5,110,0,0,1000,999,1,0,0,0,1000,1001,1,0,0,0,1001,1005,
1,0,0,0,1002,1005,5,87,0,0,1003,1005,5,51,0,0,1004,998,1,0,0,0,1004,1002,
1,0,0,0,1004,1003,1,0,0,0,1004,1005,1,0,0,0,1005,1006,1,0,0,0,1006,1008,
5,94,0,0,1007,994,1,0,0,0,1007,996,1,0,0,0,1008,63,1,0,0,0,1009,1010,5,107,
0,0,1010,1024,3,36,18,0,1011,1012,5,140,0,0,1012,1013,5,3,0,0,1013,1018,
3,98,49,0,1014,1015,5,5,0,0,1015,1017,3,98,49,0,1016,1014,1,0,0,0,1017,1020,
1,0,0,0,1018,1016,1,0,0,0,1018,1019,1,0,0,0,1019,1021,1,0,0,0,1020,1018,
1,0,0,0,1021,1022,5,4,0,0,1022,1024,1,0,0,0,1023,1009,1,0,0,0,1023,1011,
1,0,0,0,1023,1024,1,0,0,0,1024,65,1,0,0,0,1025,1027,5,128,0,0,1026,1028,
7,11,0,0,1027,1026,1,0,0,0,1027,1028,1,0,0,0,1028,1029,1,0,0,0,1029,1034,
3,56,28,0,1030,1031,5,5,0,0,1031,1033,3,56,28,0,1032,1030,1,0,0,0,1033,1036,
1,0,0,0,1034,1032,1,0,0,0,1034,1035,1,0,0,0,1035,1049,1,0,0,0,1036,1034,
1,0,0,0,1037,1047,5,75,0,0,1038,1043,3,58,29,0,1039,1040,5,5,0,0,1040,1042,
3,58,29,0,1041,1039,1,0,0,0,1042,1045,1,0,0,0,1043,1041,1,0,0,0,1043,1044,
1,0,0,0,1044,1048,1,0,0,0,1045,1043,1,0,0,0,1046,1048,3,60,30,0,1047,1038,
1,0,0,0,1047,1046,1,0,0,0,1048,1050,1,0,0,0,1049,1037,1,0,0,0,1049,1050,
1,0,0,0,1050,1053,1,0,0,0,1051,1052,5,146,0,0,1052,1054,3,36,18,0,1053,1051,
1,0,0,0,1053,1054,1,0,0,0,1054,1069,1,0,0,0,1055,1056,5,78,0,0,1056,1057,
5,40,0,0,1057,1062,3,36,18,0,1058,1059,5,5,0,0,1059,1061,3,36,18,0,1060,
1058,1,0,0,0,1061,1064,1,0,0,0,1062,1060,1,0,0,0,1062,1063,1,0,0,0,1063,
1067,1,0,0,0,1064,1062,1,0,0,0,1065,1066,5,79,0,0,1066,1068,3,36,18,0,1067,
1065,1,0,0,0,1067,1068,1,0,0,0,1068,1070,1,0,0,0,1069,1055,1,0,0,0,1069,
1070,1,0,0,0,1070,1100,1,0,0,0,1071,1072,5,142,0,0,1072,1073,5,3,0,0,1073,
1078,3,36,18,0,1074,1075,5,5,0,0,1075,1077,3,36,18,0,1076,1074,1,0,0,0,1077,
1080,1,0,0,0,1078,1076,1,0,0,0,1078,1079,1,0,0,0,1079,1081,1,0,0,0,1080,
1078,1,0,0,0,1081,1096,5,4,0,0,1082,1083,5,5,0,0,1083,1084,5,3,0,0,1084,
1089,3,36,18,0,1085,1086,5,5,0,0,1086,1088,3,36,18,0,1087,1085,1,0,0,0,1088,
1091,1,0,0,0,1089,1087,1,0,0,0,1089,1090,1,0,0,0,1090,1092,1,0,0,0,1091,
1089,1,0,0,0,1092,1093,5,4,0,0,1093,1095,1,0,0,0,1094,1082,1,0,0,0,1095,
1098,1,0,0,0,1096,1094,1,0,0,0,1096,1097,1,0,0,0,1097,1100,1,0,0,0,1098,
1096,1,0,0,0,1099,1025,1,0,0,0,1099,1071,1,0,0,0,1100,67,1,0,0,0,1101,1107,
5,137,0,0,1102,1103,5,137,0,0,1103,1107,5,29,0,0,1104,1107,5,90,0,0,1105,
1107,5,68,0,0,1106,1101,1,0,0,0,1106,1102,1,0,0,0,1106,1104,1,0,0,0,1106,
1105,1,0,0,0,1107,69,1,0,0,0,1108,1120,3,92,46,0,1109,1110,5,3,0,0,1110,
1115,3,98,49,0,1111,1112,5,5,0,0,1112,1114,3,98,49,0,1113,1111,1,0,0,0,1114,
1117,1,0,0,0,1115,1113,1,0,0,0,1115,1116,1,0,0,0,1116,1118,1,0,0,0,1117,
1115,1,0,0,0,1118,1119,5,4,0,0,1119,1121,1,0,0,0,1120,1109,1,0,0,0,1120,
1121,1,0,0,0,1121,71,1,0,0,0,1122,1124,7,5,0,0,1123,1122,1,0,0,0,1123,1124,
1,0,0,0,1124,1125,1,0,0,0,1125,1126,5,150,0,0,1126,73,1,0,0,0,1127,1128,
7,12,0,0,1128,75,1,0,0,0,1129,1130,7,13,0,0,1130,77,1,0,0,0,1131,1132,5,
152,0,0,1132,79,1,0,0,0,1133,1136,3,36,18,0,1134,1136,3,28,14,0,1135,1133,
1,0,0,0,1135,1134,1,0,0,0,1136,81,1,0,0,0,1137,1138,7,14,0,0,1138,83,1,0,
0,0,1139,1140,7,15,0,0,1140,85,1,0,0,0,1141,1142,3,120,60,0,1142,87,1,0,
0,0,1143,1144,3,120,60,0,1144,89,1,0,0,0,1145,1146,3,120,60,0,1146,91,1,
0,0,0,1147,1148,3,120,60,0,1148,93,1,0,0,0,1149,1150,3,120,60,0,1150,95,
1,0,0,0,1151,1152,3,120,60,0,1152,97,1,0,0,0,1153,1154,3,120,60,0,1154,99,
1,0,0,0,1155,1156,3,120,60,0,1156,101,1,0,0,0,1157,1158,3,120,60,0,1158,
103,1,0,0,0,1159,1160,3,120,60,0,1160,105,1,0,0,0,1161,1162,3,120,60,0,1162,
107,1,0,0,0,1163,1164,3,120,60,0,1164,109,1,0,0,0,1165,1166,3,120,60,0,1166,
111,1,0,0,0,1167,1168,3,120,60,0,1168,113,1,0,0,0,1169,1170,3,120,60,0,1170,
115,1,0,0,0,1171,1172,3,120,60,0,1172,117,1,0,0,0,1173,1174,3,120,60,0,1174,
119,1,0,0,0,1175,1183,5,149,0,0,1176,1183,3,84,42,0,1177,1183,5,152,0,0,
1178,1179,5,3,0,0,1179,1180,3,120,60,0,1180,1181,5,4,0,0,1181,1183,1,0,0,
0,1182,1175,1,0,0,0,1182,1176,1,0,0,0,1182,1177,1,0,0,0,1182,1178,1,0,0,
0,1183,121,1,0,0,0,156,124,126,137,144,149,155,168,172,178,183,194,200,204,
210,215,224,231,237,241,244,251,254,261,270,273,279,281,287,292,300,305,
310,329,335,344,349,358,369,376,382,392,395,401,403,406,419,433,438,441,
454,468,473,482,485,491,493,497,502,508,520,524,529,533,536,554,559,564,
572,577,586,593,597,613,616,624,633,637,642,672,684,689,701,707,714,718,
728,731,737,740,742,744,755,760,772,776,780,784,791,793,801,808,811,815,
820,828,847,853,857,873,879,887,892,895,900,909,914,928,931,933,938,942,
945,952,960,964,968,971,977,980,982,991,996,1000,1004,1007,1018,1023,1027,
1034,1043,1047,1049,1053,1062,1067,1069,1078,1089,1096,1099,1106,1115,1120,
1123,1135,1182];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class SQLtinyParser extends antlr4.Parser {

    static grammarFileName = "SQLtiny.g4";
    static literalNames = [ null, "';'", "'.'", "'('", "')'", "','", "'='", 
                            "'*'", "'+'", "'-'", "'~'", "'||'", "'/'", "'%'", 
                            "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", 
                            "'>'", "'>='", "'=='", "'!='", "'<>'" ];
    static symbolicNames = [ null, "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", 
                             "COMMA", "ASSIGN", "STAR", "PLUS", "MINUS", 
                             "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", 
                             "AMP", "PIPE", "LT", "LT_EQ", "GT", "GT_EQ", 
                             "EQ", "NOT_EQ1", "NOT_EQ2", "K_ABORT", "K_ACTION", 
                             "K_ADD", "K_AFTER", "K_ALL", "K_ALTER", "K_ANALYZE", 
                             "K_AND", "K_AS", "K_ASC", "K_ATTACH", "K_AUTOINCREMENT", 
                             "K_BEFORE", "K_BEGIN", "K_BETWEEN", "K_BY", 
                             "K_CASCADE", "K_CASE", "K_CAST", "K_CHECK", 
                             "K_COLLATE", "K_COLUMN", "K_COMMIT", "K_CONFLICT", 
                             "K_CONSTRAINT", "K_CREATE", "K_CROSS", "K_CURRENT_DATE", 
                             "K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_DATABASE", 
                             "K_DEFAULT", "K_DEFERRABLE", "K_DEFERRED", 
                             "K_DELETE", "K_DESC", "K_DETACH", "K_DISTINCT", 
                             "K_DROP", "K_EACH", "K_ELSE", "K_END", "K_ESCAPE", 
                             "K_EXCEPT", "K_EXCLUSIVE", "K_EXISTS", "K_EXPLAIN", 
                             "K_FAIL", "K_FOR", "K_FOREIGN", "K_FROM", "K_FULL", 
                             "K_GLOB", "K_GROUP", "K_HAVING", "K_IF", "K_IGNORE", 
                             "K_IMMEDIATE", "K_IN", "K_INDEX", "K_INDEXED", 
                             "K_INITIALLY", "K_INNER", "K_INSERT", "K_INSTEAD", 
                             "K_INTERSECT", "K_INTO", "K_IS", "K_ISNULL", 
                             "K_JOIN", "K_KEY", "K_LEFT", "K_LIKE", "K_LIMIT", 
                             "K_MATCH", "K_NATURAL", "K_NO", "K_NOT", "K_NOTNULL", 
                             "K_NULL", "K_OF", "K_OFFSET", "K_ON", "K_OR", 
                             "K_ORDER", "K_OUTER", "K_PLAN", "K_PRAGMA", 
                             "K_PRIMARY", "K_QUERY", "K_RAISE", "K_RECURSIVE", 
                             "K_REFERENCES", "K_REGEXP", "K_REINDEX", "K_RELEASE", 
                             "K_RENAME", "K_REPLACE", "K_RESTRICT", "K_RIGHT", 
                             "K_ROLLBACK", "K_ROW", "K_SAVEPOINT", "K_SELECT", 
                             "K_SET", "K_TABLE", "K_TEMP", "K_TEMPORARY", 
                             "K_THEN", "K_TO", "K_TRANSACTION", "K_TRIGGER", 
                             "K_UNION", "K_UNIQUE", "K_UPDATE", "K_USING", 
                             "K_VACUUM", "K_VALUES", "K_VIEW", "K_VIRTUAL", 
                             "K_WHEN", "K_WHERE", "K_WITH", "K_WITHOUT", 
                             "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", 
                             "STRING_LITERAL", "BLOB_LITERAL", "SINGLE_LINE_COMMENT", 
                             "MULTILINE_COMMENT", "SPACES", "UNEXPECTED_CHAR" ];
    static ruleNames = [ "parse", "error", "sql_stmt_list", "sql_stmt", 
                         "create_index_stmt", "create_table_stmt", "delete_stmt", 
                         "delete_stmt_limited", "drop_index_stmt", "drop_table_stmt", 
                         "insert_stmt", "simple_select_stmt", "update_stmt", 
                         "update_stmt_limited", "column_def", "type_name", 
                         "column_constraint", "conflict_clause", "expr", 
                         "foreign_key_clause", "raise_function", "indexed_column", 
                         "table_constraint", "with_clause", "qualified_table_name", 
                         "ordering_term", "pragma_value", "common_table_expression", 
                         "result_column", "table_or_subquery", "join_clause", 
                         "join_operator", "join_constraint", "select_core", 
                         "compound_operator", "cte_table_name", "signed_number", 
                         "literal_value", "unary_operator", "error_message", 
                         "module_argument", "column_alias", "keyword", "name", 
                         "function_name", "database_name", "table_name", 
                         "table_or_index_name", "new_table_name", "column_name", 
                         "collation_name", "foreign_table", "index_name", 
                         "trigger_name", "view_name", "module_name", "pragma_name", 
                         "savepoint_name", "table_alias", "transaction_name", 
                         "any_name" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = SQLtinyParser.ruleNames;
        this.literalNames = SQLtinyParser.literalNames;
        this.symbolicNames = SQLtinyParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 18:
    	    		return this.expr_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 20);
    		case 1:
    			return this.precpred(this._ctx, 19);
    		case 2:
    			return this.precpred(this._ctx, 18);
    		case 3:
    			return this.precpred(this._ctx, 17);
    		case 4:
    			return this.precpred(this._ctx, 16);
    		case 5:
    			return this.precpred(this._ctx, 15);
    		case 6:
    			return this.precpred(this._ctx, 14);
    		case 7:
    			return this.precpred(this._ctx, 13);
    		case 8:
    			return this.precpred(this._ctx, 6);
    		case 9:
    			return this.precpred(this._ctx, 5);
    		case 10:
    			return this.precpred(this._ctx, 9);
    		case 11:
    			return this.precpred(this._ctx, 8);
    		case 12:
    			return this.precpred(this._ctx, 7);
    		case 13:
    			return this.precpred(this._ctx, 4);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	parse() {
	    let localctx = new ParseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, SQLtinyParser.RULE_parse);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 126;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1 || ((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 8705) !== 0) || _la===88 || ((((_la - 122)) & ~0x1f) === 0 && ((1 << (_la - 122)) & 34734145) !== 0) || _la===157) {
	            this.state = 124;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1:
	            case 50:
	            case 59:
	            case 63:
	            case 88:
	            case 122:
	            case 128:
	            case 139:
	            case 142:
	            case 147:
	                this.state = 122;
	                this.sql_stmt_list();
	                break;
	            case 157:
	                this.state = 123;
	                this.error();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 128;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 129;
	        this.match(SQLtinyParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	error() {
	    let localctx = new ErrorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, SQLtinyParser.RULE_error);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 131;
	        localctx._UNEXPECTED_CHAR = this.match(SQLtinyParser.UNEXPECTED_CHAR);
	         
	             throw new RuntimeException("UNEXPECTED_CHAR=" + (localctx._UNEXPECTED_CHAR == null ? null : localctx._UNEXPECTED_CHAR.text)); 
	           
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sql_stmt_list() {
	    let localctx = new Sql_stmt_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, SQLtinyParser.RULE_sql_stmt_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 137;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1) {
	            this.state = 134;
	            this.match(SQLtinyParser.SCOL);
	            this.state = 139;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 140;
	        this.sql_stmt();
	        this.state = 149;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 142; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 141;
	                    this.match(SQLtinyParser.SCOL);
	                    this.state = 144; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===1);
	                this.state = 146;
	                this.sql_stmt(); 
	            }
	            this.state = 151;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
	        }

	        this.state = 155;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 152;
	                this.match(SQLtinyParser.SCOL); 
	            }
	            this.state = 157;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sql_stmt() {
	    let localctx = new Sql_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, SQLtinyParser.RULE_sql_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 168;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 158;
	            this.create_index_stmt();
	            break;

	        case 2:
	            this.state = 159;
	            this.create_table_stmt();
	            break;

	        case 3:
	            this.state = 160;
	            this.delete_stmt();
	            break;

	        case 4:
	            this.state = 161;
	            this.delete_stmt_limited();
	            break;

	        case 5:
	            this.state = 162;
	            this.drop_index_stmt();
	            break;

	        case 6:
	            this.state = 163;
	            this.drop_table_stmt();
	            break;

	        case 7:
	            this.state = 164;
	            this.insert_stmt();
	            break;

	        case 8:
	            this.state = 165;
	            this.simple_select_stmt();
	            break;

	        case 9:
	            this.state = 166;
	            this.update_stmt();
	            break;

	        case 10:
	            this.state = 167;
	            this.update_stmt_limited();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_index_stmt() {
	    let localctx = new Create_index_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, SQLtinyParser.RULE_create_index_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 170;
	        this.match(SQLtinyParser.K_CREATE);
	        this.state = 172;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===138) {
	            this.state = 171;
	            this.match(SQLtinyParser.K_UNIQUE);
	        }

	        this.state = 174;
	        this.match(SQLtinyParser.K_INDEX);
	        this.state = 178;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        if(la_===1) {
	            this.state = 175;
	            this.match(SQLtinyParser.K_IF);
	            this.state = 176;
	            this.match(SQLtinyParser.K_NOT);
	            this.state = 177;
	            this.match(SQLtinyParser.K_EXISTS);

	        }
	        this.state = 183;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        if(la_===1) {
	            this.state = 180;
	            this.database_name();
	            this.state = 181;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 185;
	        this.index_name();
	        this.state = 186;
	        this.match(SQLtinyParser.K_ON);
	        this.state = 187;
	        this.table_name();
	        this.state = 188;
	        this.match(SQLtinyParser.OPEN_PAR);
	        this.state = 189;
	        this.indexed_column();
	        this.state = 194;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 190;
	            this.match(SQLtinyParser.COMMA);
	            this.state = 191;
	            this.indexed_column();
	            this.state = 196;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 197;
	        this.match(SQLtinyParser.CLOSE_PAR);
	        this.state = 200;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 198;
	            this.match(SQLtinyParser.K_WHERE);
	            this.state = 199;
	            this.expr(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_table_stmt() {
	    let localctx = new Create_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, SQLtinyParser.RULE_create_table_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 202;
	        this.match(SQLtinyParser.K_CREATE);
	        this.state = 204;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131 || _la===132) {
	            this.state = 203;
	            _la = this._input.LA(1);
	            if(!(_la===131 || _la===132)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 206;
	        this.match(SQLtinyParser.K_TABLE);
	        this.state = 210;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        if(la_===1) {
	            this.state = 207;
	            this.match(SQLtinyParser.K_IF);
	            this.state = 208;
	            this.match(SQLtinyParser.K_NOT);
	            this.state = 209;
	            this.match(SQLtinyParser.K_EXISTS);

	        }
	        this.state = 215;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        if(la_===1) {
	            this.state = 212;
	            this.database_name();
	            this.state = 213;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 217;
	        this.table_name();
	        this.state = 241;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	            this.state = 218;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 219;
	            this.column_def();
	            this.state = 224;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 220;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 221;
	                    this.column_def(); 
	                }
	                this.state = 226;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
	            }

	            this.state = 231;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 227;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 228;
	                this.table_constraint();
	                this.state = 233;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 234;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 237;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===148) {
	                this.state = 235;
	                this.match(SQLtinyParser.K_WITHOUT);
	                this.state = 236;
	                this.match(SQLtinyParser.IDENTIFIER);
	            }

	            break;
	        case 33:
	            this.state = 239;
	            this.match(SQLtinyParser.K_AS);
	            this.state = 240;
	            this.simple_select_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delete_stmt() {
	    let localctx = new Delete_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, SQLtinyParser.RULE_delete_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 244;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 243;
	            this.with_clause();
	        }

	        this.state = 246;
	        this.match(SQLtinyParser.K_DELETE);
	        this.state = 247;
	        this.match(SQLtinyParser.K_FROM);
	        this.state = 248;
	        this.qualified_table_name();
	        this.state = 251;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 249;
	            this.match(SQLtinyParser.K_WHERE);
	            this.state = 250;
	            this.expr(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delete_stmt_limited() {
	    let localctx = new Delete_stmt_limitedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, SQLtinyParser.RULE_delete_stmt_limited);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 254;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 253;
	            this.with_clause();
	        }

	        this.state = 256;
	        this.match(SQLtinyParser.K_DELETE);
	        this.state = 257;
	        this.match(SQLtinyParser.K_FROM);
	        this.state = 258;
	        this.qualified_table_name();
	        this.state = 261;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 259;
	            this.match(SQLtinyParser.K_WHERE);
	            this.state = 260;
	            this.expr(0);
	        }

	        this.state = 281;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98 || _la===109) {
	            this.state = 273;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===109) {
	                this.state = 263;
	                this.match(SQLtinyParser.K_ORDER);
	                this.state = 264;
	                this.match(SQLtinyParser.K_BY);
	                this.state = 265;
	                this.ordering_term();
	                this.state = 270;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 266;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 267;
	                    this.ordering_term();
	                    this.state = 272;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 275;
	            this.match(SQLtinyParser.K_LIMIT);
	            this.state = 276;
	            this.expr(0);
	            this.state = 279;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5 || _la===106) {
	                this.state = 277;
	                _la = this._input.LA(1);
	                if(!(_la===5 || _la===106)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 278;
	                this.expr(0);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_index_stmt() {
	    let localctx = new Drop_index_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, SQLtinyParser.RULE_drop_index_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 283;
	        this.match(SQLtinyParser.K_DROP);
	        this.state = 284;
	        this.match(SQLtinyParser.K_INDEX);
	        this.state = 287;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	        if(la_===1) {
	            this.state = 285;
	            this.match(SQLtinyParser.K_IF);
	            this.state = 286;
	            this.match(SQLtinyParser.K_EXISTS);

	        }
	        this.state = 292;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        if(la_===1) {
	            this.state = 289;
	            this.database_name();
	            this.state = 290;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 294;
	        this.index_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_table_stmt() {
	    let localctx = new Drop_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, SQLtinyParser.RULE_drop_table_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 296;
	        this.match(SQLtinyParser.K_DROP);
	        this.state = 297;
	        this.match(SQLtinyParser.K_TABLE);
	        this.state = 300;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        if(la_===1) {
	            this.state = 298;
	            this.match(SQLtinyParser.K_IF);
	            this.state = 299;
	            this.match(SQLtinyParser.K_EXISTS);

	        }
	        this.state = 305;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        if(la_===1) {
	            this.state = 302;
	            this.database_name();
	            this.state = 303;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 307;
	        this.table_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insert_stmt() {
	    let localctx = new Insert_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, SQLtinyParser.RULE_insert_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 310;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 309;
	            this.with_clause();
	        }

	        this.state = 329;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 312;
	            this.match(SQLtinyParser.K_INSERT);
	            break;

	        case 2:
	            this.state = 313;
	            this.match(SQLtinyParser.K_REPLACE);
	            break;

	        case 3:
	            this.state = 314;
	            this.match(SQLtinyParser.K_INSERT);
	            this.state = 315;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 316;
	            this.match(SQLtinyParser.K_REPLACE);
	            break;

	        case 4:
	            this.state = 317;
	            this.match(SQLtinyParser.K_INSERT);
	            this.state = 318;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 319;
	            this.match(SQLtinyParser.K_ROLLBACK);
	            break;

	        case 5:
	            this.state = 320;
	            this.match(SQLtinyParser.K_INSERT);
	            this.state = 321;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 322;
	            this.match(SQLtinyParser.K_ABORT);
	            break;

	        case 6:
	            this.state = 323;
	            this.match(SQLtinyParser.K_INSERT);
	            this.state = 324;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 325;
	            this.match(SQLtinyParser.K_FAIL);
	            break;

	        case 7:
	            this.state = 326;
	            this.match(SQLtinyParser.K_INSERT);
	            this.state = 327;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 328;
	            this.match(SQLtinyParser.K_IGNORE);
	            break;

	        }
	        this.state = 331;
	        this.match(SQLtinyParser.K_INTO);
	        this.state = 335;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        if(la_===1) {
	            this.state = 332;
	            this.database_name();
	            this.state = 333;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 337;
	        this.table_name();
	        this.state = 349;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 338;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 339;
	            this.column_name();
	            this.state = 344;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 340;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 341;
	                this.column_name();
	                this.state = 346;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 347;
	            this.match(SQLtinyParser.CLOSE_PAR);
	        }

	        this.state = 382;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 351;
	            this.match(SQLtinyParser.K_VALUES);
	            this.state = 352;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 353;
	            this.expr(0);
	            this.state = 358;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 354;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 355;
	                this.expr(0);
	                this.state = 360;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 361;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 376;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 362;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 363;
	                this.match(SQLtinyParser.OPEN_PAR);
	                this.state = 364;
	                this.expr(0);
	                this.state = 369;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 365;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 366;
	                    this.expr(0);
	                    this.state = 371;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 372;
	                this.match(SQLtinyParser.CLOSE_PAR);
	                this.state = 378;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.state = 379;
	            this.simple_select_stmt();
	            break;

	        case 3:
	            this.state = 380;
	            this.match(SQLtinyParser.K_DEFAULT);
	            this.state = 381;
	            this.match(SQLtinyParser.K_VALUES);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_select_stmt() {
	    let localctx = new Simple_select_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, SQLtinyParser.RULE_simple_select_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 384;
	        this.select_core();
	        this.state = 395;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===109) {
	            this.state = 385;
	            this.match(SQLtinyParser.K_ORDER);
	            this.state = 386;
	            this.match(SQLtinyParser.K_BY);
	            this.state = 387;
	            this.ordering_term();
	            this.state = 392;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 388;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 389;
	                this.ordering_term();
	                this.state = 394;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 403;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98) {
	            this.state = 397;
	            this.match(SQLtinyParser.K_LIMIT);
	            this.state = 398;
	            this.expr(0);
	            this.state = 401;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5 || _la===106) {
	                this.state = 399;
	                _la = this._input.LA(1);
	                if(!(_la===5 || _la===106)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 400;
	                this.expr(0);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update_stmt() {
	    let localctx = new Update_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, SQLtinyParser.RULE_update_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 406;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 405;
	            this.with_clause();
	        }

	        this.state = 408;
	        this.match(SQLtinyParser.K_UPDATE);
	        this.state = 419;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        if(la_===1) {
	            this.state = 409;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 410;
	            this.match(SQLtinyParser.K_ROLLBACK);

	        } else if(la_===2) {
	            this.state = 411;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 412;
	            this.match(SQLtinyParser.K_ABORT);

	        } else if(la_===3) {
	            this.state = 413;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 414;
	            this.match(SQLtinyParser.K_REPLACE);

	        } else if(la_===4) {
	            this.state = 415;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 416;
	            this.match(SQLtinyParser.K_FAIL);

	        } else if(la_===5) {
	            this.state = 417;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 418;
	            this.match(SQLtinyParser.K_IGNORE);

	        }
	        this.state = 421;
	        this.qualified_table_name();
	        this.state = 422;
	        this.match(SQLtinyParser.K_SET);
	        this.state = 423;
	        this.column_name();
	        this.state = 424;
	        this.match(SQLtinyParser.ASSIGN);
	        this.state = 425;
	        this.expr(0);
	        this.state = 433;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 426;
	            this.match(SQLtinyParser.COMMA);
	            this.state = 427;
	            this.column_name();
	            this.state = 428;
	            this.match(SQLtinyParser.ASSIGN);
	            this.state = 429;
	            this.expr(0);
	            this.state = 435;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 438;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 436;
	            this.match(SQLtinyParser.K_WHERE);
	            this.state = 437;
	            this.expr(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update_stmt_limited() {
	    let localctx = new Update_stmt_limitedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, SQLtinyParser.RULE_update_stmt_limited);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 441;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 440;
	            this.with_clause();
	        }

	        this.state = 443;
	        this.match(SQLtinyParser.K_UPDATE);
	        this.state = 454;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        if(la_===1) {
	            this.state = 444;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 445;
	            this.match(SQLtinyParser.K_ROLLBACK);

	        } else if(la_===2) {
	            this.state = 446;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 447;
	            this.match(SQLtinyParser.K_ABORT);

	        } else if(la_===3) {
	            this.state = 448;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 449;
	            this.match(SQLtinyParser.K_REPLACE);

	        } else if(la_===4) {
	            this.state = 450;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 451;
	            this.match(SQLtinyParser.K_FAIL);

	        } else if(la_===5) {
	            this.state = 452;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 453;
	            this.match(SQLtinyParser.K_IGNORE);

	        }
	        this.state = 456;
	        this.qualified_table_name();
	        this.state = 457;
	        this.match(SQLtinyParser.K_SET);
	        this.state = 458;
	        this.column_name();
	        this.state = 459;
	        this.match(SQLtinyParser.ASSIGN);
	        this.state = 460;
	        this.expr(0);
	        this.state = 468;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 461;
	            this.match(SQLtinyParser.COMMA);
	            this.state = 462;
	            this.column_name();
	            this.state = 463;
	            this.match(SQLtinyParser.ASSIGN);
	            this.state = 464;
	            this.expr(0);
	            this.state = 470;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 473;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 471;
	            this.match(SQLtinyParser.K_WHERE);
	            this.state = 472;
	            this.expr(0);
	        }

	        this.state = 493;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98 || _la===109) {
	            this.state = 485;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===109) {
	                this.state = 475;
	                this.match(SQLtinyParser.K_ORDER);
	                this.state = 476;
	                this.match(SQLtinyParser.K_BY);
	                this.state = 477;
	                this.ordering_term();
	                this.state = 482;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 478;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 479;
	                    this.ordering_term();
	                    this.state = 484;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 487;
	            this.match(SQLtinyParser.K_LIMIT);
	            this.state = 488;
	            this.expr(0);
	            this.state = 491;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5 || _la===106) {
	                this.state = 489;
	                _la = this._input.LA(1);
	                if(!(_la===5 || _la===106)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 490;
	                this.expr(0);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_def() {
	    let localctx = new Column_defContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, SQLtinyParser.RULE_column_def);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 495;
	        this.column_name();
	        this.state = 497;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	        if(la_===1) {
	            this.state = 496;
	            this.type_name();

	        }
	        this.state = 502;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 4131) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 34821) !== 0) || _la===138) {
	            this.state = 499;
	            this.column_constraint();
	            this.state = 504;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name() {
	    let localctx = new Type_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, SQLtinyParser.RULE_type_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 506; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 505;
	        		this.name();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 508; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,58, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 520;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        if(la_===1) {
	            this.state = 510;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 511;
	            this.signed_number();
	            this.state = 512;
	            this.match(SQLtinyParser.CLOSE_PAR);

	        } else if(la_===2) {
	            this.state = 514;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 515;
	            this.signed_number();
	            this.state = 516;
	            this.match(SQLtinyParser.COMMA);
	            this.state = 517;
	            this.signed_number();
	            this.state = 518;
	            this.match(SQLtinyParser.CLOSE_PAR);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_constraint() {
	    let localctx = new Column_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, SQLtinyParser.RULE_column_constraint);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 524;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 522;
	            this.match(SQLtinyParser.K_CONSTRAINT);
	            this.state = 523;
	            this.name();
	        }

	        this.state = 559;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 113:
	            this.state = 526;
	            this.match(SQLtinyParser.K_PRIMARY);
	            this.state = 527;
	            this.match(SQLtinyParser.K_KEY);
	            this.state = 529;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===34 || _la===60) {
	                this.state = 528;
	                _la = this._input.LA(1);
	                if(!(_la===34 || _la===60)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 531;
	            this.conflict_clause();
	            this.state = 533;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===36) {
	                this.state = 532;
	                this.match(SQLtinyParser.K_AUTOINCREMENT);
	            }

	            break;
	        case 102:
	        case 104:
	            this.state = 536;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===102) {
	                this.state = 535;
	                this.match(SQLtinyParser.K_NOT);
	            }

	            this.state = 538;
	            this.match(SQLtinyParser.K_NULL);
	            this.state = 539;
	            this.conflict_clause();
	            break;
	        case 138:
	            this.state = 540;
	            this.match(SQLtinyParser.K_UNIQUE);
	            this.state = 541;
	            this.conflict_clause();
	            break;
	        case 44:
	            this.state = 542;
	            this.match(SQLtinyParser.K_CHECK);
	            this.state = 543;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 544;
	            this.expr(0);
	            this.state = 545;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            break;
	        case 56:
	            this.state = 547;
	            this.match(SQLtinyParser.K_DEFAULT);
	            this.state = 554;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 548;
	                this.signed_number();
	                break;

	            case 2:
	                this.state = 549;
	                this.literal_value();
	                break;

	            case 3:
	                this.state = 550;
	                this.match(SQLtinyParser.OPEN_PAR);
	                this.state = 551;
	                this.expr(0);
	                this.state = 552;
	                this.match(SQLtinyParser.CLOSE_PAR);
	                break;

	            }
	            break;
	        case 45:
	            this.state = 556;
	            this.match(SQLtinyParser.K_COLLATE);
	            this.state = 557;
	            this.collation_name();
	            break;
	        case 117:
	            this.state = 558;
	            this.foreign_key_clause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conflict_clause() {
	    let localctx = new Conflict_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, SQLtinyParser.RULE_conflict_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 564;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===107) {
	            this.state = 561;
	            this.match(SQLtinyParser.K_ON);
	            this.state = 562;
	            this.match(SQLtinyParser.K_CONFLICT);
	            this.state = 563;
	            _la = this._input.LA(1);
	            if(!(_la===25 || _la===72 || _la===81 || _la===122 || _la===125)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 36;
	    this.enterRecursionRule(localctx, 36, SQLtinyParser.RULE_expr, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 642;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 567;
	            this.literal_value();
	            break;

	        case 2:
	            this.state = 568;
	            this.match(SQLtinyParser.BIND_PARAMETER);
	            break;

	        case 3:
	            this.state = 577;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	            if(la_===1) {
	                this.state = 572;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	                if(la_===1) {
	                    this.state = 569;
	                    this.database_name();
	                    this.state = 570;
	                    this.match(SQLtinyParser.DOT);

	                }
	                this.state = 574;
	                this.table_name();
	                this.state = 575;
	                this.match(SQLtinyParser.DOT);

	            }
	            this.state = 579;
	            this.column_name();
	            break;

	        case 4:
	            this.state = 580;
	            this.unary_operator();
	            this.state = 581;
	            this.expr(21);
	            break;

	        case 5:
	            this.state = 583;
	            this.function_name();
	            this.state = 584;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 597;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 3:
	            case 8:
	            case 9:
	            case 10:
	            case 25:
	            case 26:
	            case 27:
	            case 28:
	            case 29:
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 34:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 39:
	            case 40:
	            case 41:
	            case 42:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 47:
	            case 48:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 58:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            	this.state = 586;
	            	this._errHandler.sync(this);
	            	var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	            	if(la_===1) {
	            	    this.state = 585;
	            	    this.match(SQLtinyParser.K_DISTINCT);

	            	}
	            	this.state = 588;
	            	this.expr(0);
	            	this.state = 593;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	while(_la===5) {
	            	    this.state = 589;
	            	    this.match(SQLtinyParser.COMMA);
	            	    this.state = 590;
	            	    this.expr(0);
	            	    this.state = 595;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	}
	            	break;
	            case 7:
	            	this.state = 596;
	            	this.match(SQLtinyParser.STAR);
	            	break;
	            case 4:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 599;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            break;

	        case 6:
	            this.state = 601;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 602;
	            this.expr(0);
	            this.state = 603;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            break;

	        case 7:
	            this.state = 605;
	            this.match(SQLtinyParser.K_CAST);
	            this.state = 606;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 607;
	            this.expr(0);
	            this.state = 608;
	            this.match(SQLtinyParser.K_AS);
	            this.state = 609;
	            this.type_name();
	            this.state = 610;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            break;

	        case 8:
	            this.state = 616;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===70 || _la===102) {
	                this.state = 613;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===102) {
	                    this.state = 612;
	                    this.match(SQLtinyParser.K_NOT);
	                }

	                this.state = 615;
	                this.match(SQLtinyParser.K_EXISTS);
	            }

	            this.state = 618;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 619;
	            this.simple_select_stmt();
	            this.state = 620;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            break;

	        case 9:
	            this.state = 622;
	            this.match(SQLtinyParser.K_CASE);
	            this.state = 624;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	            if(la_===1) {
	                this.state = 623;
	                this.expr(0);

	            }
	            this.state = 631; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 626;
	                this.match(SQLtinyParser.K_WHEN);
	                this.state = 627;
	                this.expr(0);
	                this.state = 628;
	                this.match(SQLtinyParser.K_THEN);
	                this.state = 629;
	                this.expr(0);
	                this.state = 633; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===145);
	            this.state = 637;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===65) {
	                this.state = 635;
	                this.match(SQLtinyParser.K_ELSE);
	                this.state = 636;
	                this.expr(0);
	            }

	            this.state = 639;
	            this.match(SQLtinyParser.K_END);
	            break;

	        case 10:
	            this.state = 641;
	            this.raise_function();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 744;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 742;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 644;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 645;
	                    this.match(SQLtinyParser.PIPE2);
	                    this.state = 646;
	                    this.expr(21);
	                    break;

	                case 2:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 647;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 648;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 12416) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 649;
	                    this.expr(20);
	                    break;

	                case 3:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 650;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 651;
	                    _la = this._input.LA(1);
	                    if(!(_la===8 || _la===9)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 652;
	                    this.expr(19);
	                    break;

	                case 4:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 653;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 654;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 245760) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 655;
	                    this.expr(18);
	                    break;

	                case 5:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 656;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 657;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 3932160) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 658;
	                    this.expr(17);
	                    break;

	                case 6:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 659;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 672;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 660;
	                        this.match(SQLtinyParser.ASSIGN);
	                        break;

	                    case 2:
	                        this.state = 661;
	                        this.match(SQLtinyParser.EQ);
	                        break;

	                    case 3:
	                        this.state = 662;
	                        this.match(SQLtinyParser.NOT_EQ1);
	                        break;

	                    case 4:
	                        this.state = 663;
	                        this.match(SQLtinyParser.NOT_EQ2);
	                        break;

	                    case 5:
	                        this.state = 664;
	                        this.match(SQLtinyParser.K_IS);
	                        break;

	                    case 6:
	                        this.state = 665;
	                        this.match(SQLtinyParser.K_IS);
	                        this.state = 666;
	                        this.match(SQLtinyParser.K_NOT);
	                        break;

	                    case 7:
	                        this.state = 667;
	                        this.match(SQLtinyParser.K_IN);
	                        break;

	                    case 8:
	                        this.state = 668;
	                        this.match(SQLtinyParser.K_LIKE);
	                        break;

	                    case 9:
	                        this.state = 669;
	                        this.match(SQLtinyParser.K_GLOB);
	                        break;

	                    case 10:
	                        this.state = 670;
	                        this.match(SQLtinyParser.K_MATCH);
	                        break;

	                    case 11:
	                        this.state = 671;
	                        this.match(SQLtinyParser.K_REGEXP);
	                        break;

	                    }
	                    this.state = 674;
	                    this.expr(16);
	                    break;

	                case 7:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 675;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 676;
	                    this.match(SQLtinyParser.K_AND);
	                    this.state = 677;
	                    this.expr(15);
	                    break;

	                case 8:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 678;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 679;
	                    this.match(SQLtinyParser.K_OR);
	                    this.state = 680;
	                    this.expr(14);
	                    break;

	                case 9:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 681;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 682;
	                    this.match(SQLtinyParser.K_IS);
	                    this.state = 684;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	                    if(la_===1) {
	                        this.state = 683;
	                        this.match(SQLtinyParser.K_NOT);

	                    }
	                    this.state = 686;
	                    this.expr(7);
	                    break;

	                case 10:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 687;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 689;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===102) {
	                        this.state = 688;
	                        this.match(SQLtinyParser.K_NOT);
	                    }

	                    this.state = 691;
	                    this.match(SQLtinyParser.K_BETWEEN);
	                    this.state = 692;
	                    this.expr(0);
	                    this.state = 693;
	                    this.match(SQLtinyParser.K_AND);
	                    this.state = 694;
	                    this.expr(6);
	                    break;

	                case 11:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 696;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 697;
	                    this.match(SQLtinyParser.K_COLLATE);
	                    this.state = 698;
	                    this.collation_name();
	                    break;

	                case 12:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 699;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 701;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===102) {
	                        this.state = 700;
	                        this.match(SQLtinyParser.K_NOT);
	                    }

	                    this.state = 703;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 5242881) !== 0) || _la===118)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 704;
	                    this.expr(0);
	                    this.state = 707;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	                    if(la_===1) {
	                        this.state = 705;
	                        this.match(SQLtinyParser.K_ESCAPE);
	                        this.state = 706;
	                        this.expr(0);

	                    }
	                    break;

	                case 13:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 709;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 714;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case 93:
	                        this.state = 710;
	                        this.match(SQLtinyParser.K_ISNULL);
	                        break;
	                    case 103:
	                        this.state = 711;
	                        this.match(SQLtinyParser.K_NOTNULL);
	                        break;
	                    case 102:
	                        this.state = 712;
	                        this.match(SQLtinyParser.K_NOT);
	                        this.state = 713;
	                        this.match(SQLtinyParser.K_NULL);
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    }
	                    break;

	                case 14:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 716;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 718;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===102) {
	                        this.state = 717;
	                        this.match(SQLtinyParser.K_NOT);
	                    }

	                    this.state = 720;
	                    this.match(SQLtinyParser.K_IN);
	                    this.state = 740;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 721;
	                        this.match(SQLtinyParser.OPEN_PAR);
	                        this.state = 731;
	                        this._errHandler.sync(this);
	                        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	                        if(la_===1) {
	                            this.state = 722;
	                            this.simple_select_stmt();

	                        } else if(la_===2) {
	                            this.state = 723;
	                            this.expr(0);
	                            this.state = 728;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                            while(_la===5) {
	                                this.state = 724;
	                                this.match(SQLtinyParser.COMMA);
	                                this.state = 725;
	                                this.expr(0);
	                                this.state = 730;
	                                this._errHandler.sync(this);
	                                _la = this._input.LA(1);
	                            }

	                        }
	                        this.state = 733;
	                        this.match(SQLtinyParser.CLOSE_PAR);
	                        break;

	                    case 2:
	                        this.state = 737;
	                        this._errHandler.sync(this);
	                        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	                        if(la_===1) {
	                            this.state = 734;
	                            this.database_name();
	                            this.state = 735;
	                            this.match(SQLtinyParser.DOT);

	                        }
	                        this.state = 739;
	                        this.table_name();
	                        break;

	                    }
	                    break;

	                } 
	            }
	            this.state = 746;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	foreign_key_clause() {
	    let localctx = new Foreign_key_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, SQLtinyParser.RULE_foreign_key_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 747;
	        this.match(SQLtinyParser.K_REFERENCES);
	        this.state = 748;
	        this.foreign_table();
	        this.state = 760;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 749;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 750;
	            this.column_name();
	            this.state = 755;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 751;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 752;
	                this.column_name();
	                this.state = 757;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 758;
	            this.match(SQLtinyParser.CLOSE_PAR);
	        }

	        this.state = 780;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===99 || _la===107) {
	            this.state = 776;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 107:
	                this.state = 762;
	                this.match(SQLtinyParser.K_ON);
	                this.state = 763;
	                _la = this._input.LA(1);
	                if(!(_la===59 || _la===139)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 772;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 764;
	                    this.match(SQLtinyParser.K_SET);
	                    this.state = 765;
	                    this.match(SQLtinyParser.K_NULL);
	                    break;

	                case 2:
	                    this.state = 766;
	                    this.match(SQLtinyParser.K_SET);
	                    this.state = 767;
	                    this.match(SQLtinyParser.K_DEFAULT);
	                    break;

	                case 3:
	                    this.state = 768;
	                    this.match(SQLtinyParser.K_CASCADE);
	                    break;

	                case 4:
	                    this.state = 769;
	                    this.match(SQLtinyParser.K_RESTRICT);
	                    break;

	                case 5:
	                    this.state = 770;
	                    this.match(SQLtinyParser.K_NO);
	                    this.state = 771;
	                    this.match(SQLtinyParser.K_ACTION);
	                    break;

	                }
	                break;
	            case 99:
	                this.state = 774;
	                this.match(SQLtinyParser.K_MATCH);
	                this.state = 775;
	                this.name();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 782;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 793;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	        if(la_===1) {
	            this.state = 784;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===102) {
	                this.state = 783;
	                this.match(SQLtinyParser.K_NOT);
	            }

	            this.state = 786;
	            this.match(SQLtinyParser.K_DEFERRABLE);
	            this.state = 791;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
	            if(la_===1) {
	                this.state = 787;
	                this.match(SQLtinyParser.K_INITIALLY);
	                this.state = 788;
	                this.match(SQLtinyParser.K_DEFERRED);

	            } else if(la_===2) {
	                this.state = 789;
	                this.match(SQLtinyParser.K_INITIALLY);
	                this.state = 790;
	                this.match(SQLtinyParser.K_IMMEDIATE);

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	raise_function() {
	    let localctx = new Raise_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, SQLtinyParser.RULE_raise_function);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 795;
	        this.match(SQLtinyParser.K_RAISE);
	        this.state = 796;
	        this.match(SQLtinyParser.OPEN_PAR);
	        this.state = 801;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 81:
	            this.state = 797;
	            this.match(SQLtinyParser.K_IGNORE);
	            break;
	        case 25:
	        case 72:
	        case 125:
	            this.state = 798;
	            _la = this._input.LA(1);
	            if(!(_la===25 || _la===72 || _la===125)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 799;
	            this.match(SQLtinyParser.COMMA);
	            this.state = 800;
	            this.error_message();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 803;
	        this.match(SQLtinyParser.CLOSE_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexed_column() {
	    let localctx = new Indexed_columnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, SQLtinyParser.RULE_indexed_column);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 805;
	        this.column_name();
	        this.state = 808;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===45) {
	            this.state = 806;
	            this.match(SQLtinyParser.K_COLLATE);
	            this.state = 807;
	            this.collation_name();
	        }

	        this.state = 811;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34 || _la===60) {
	            this.state = 810;
	            _la = this._input.LA(1);
	            if(!(_la===34 || _la===60)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_constraint() {
	    let localctx = new Table_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, SQLtinyParser.RULE_table_constraint);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 815;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 813;
	            this.match(SQLtinyParser.K_CONSTRAINT);
	            this.state = 814;
	            this.name();
	        }

	        this.state = 853;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 113:
	        case 138:
	            this.state = 820;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 113:
	                this.state = 817;
	                this.match(SQLtinyParser.K_PRIMARY);
	                this.state = 818;
	                this.match(SQLtinyParser.K_KEY);
	                break;
	            case 138:
	                this.state = 819;
	                this.match(SQLtinyParser.K_UNIQUE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 822;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 823;
	            this.indexed_column();
	            this.state = 828;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 824;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 825;
	                this.indexed_column();
	                this.state = 830;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 831;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 832;
	            this.conflict_clause();
	            break;
	        case 44:
	            this.state = 834;
	            this.match(SQLtinyParser.K_CHECK);
	            this.state = 835;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 836;
	            this.expr(0);
	            this.state = 837;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            break;
	        case 74:
	            this.state = 839;
	            this.match(SQLtinyParser.K_FOREIGN);
	            this.state = 840;
	            this.match(SQLtinyParser.K_KEY);
	            this.state = 841;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 842;
	            this.column_name();
	            this.state = 847;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 843;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 844;
	                this.column_name();
	                this.state = 849;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 850;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 851;
	            this.foreign_key_clause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_clause() {
	    let localctx = new With_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, SQLtinyParser.RULE_with_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 855;
	        this.match(SQLtinyParser.K_WITH);
	        this.state = 857;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        if(la_===1) {
	            this.state = 856;
	            this.match(SQLtinyParser.K_RECURSIVE);

	        }
	        this.state = 859;
	        this.cte_table_name();
	        this.state = 860;
	        this.match(SQLtinyParser.K_AS);
	        this.state = 861;
	        this.match(SQLtinyParser.OPEN_PAR);
	        this.state = 862;
	        this.simple_select_stmt();
	        this.state = 863;
	        this.match(SQLtinyParser.CLOSE_PAR);
	        this.state = 873;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 864;
	            this.match(SQLtinyParser.COMMA);
	            this.state = 865;
	            this.cte_table_name();
	            this.state = 866;
	            this.match(SQLtinyParser.K_AS);
	            this.state = 867;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 868;
	            this.simple_select_stmt();
	            this.state = 869;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 875;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualified_table_name() {
	    let localctx = new Qualified_table_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, SQLtinyParser.RULE_qualified_table_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 879;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	        if(la_===1) {
	            this.state = 876;
	            this.database_name();
	            this.state = 877;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 881;
	        this.table_name();
	        this.state = 887;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 85:
	        	this.state = 882;
	        	this.match(SQLtinyParser.K_INDEXED);
	        	this.state = 883;
	        	this.match(SQLtinyParser.K_BY);
	        	this.state = 884;
	        	this.index_name();
	        	break;
	        case 102:
	        	this.state = 885;
	        	this.match(SQLtinyParser.K_NOT);
	        	this.state = 886;
	        	this.match(SQLtinyParser.K_INDEXED);
	        	break;
	        case -1:
	        case 1:
	        case 50:
	        case 59:
	        case 63:
	        case 88:
	        case 98:
	        case 109:
	        case 122:
	        case 128:
	        case 129:
	        case 139:
	        case 142:
	        case 146:
	        case 147:
	        case 157:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ordering_term() {
	    let localctx = new Ordering_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, SQLtinyParser.RULE_ordering_term);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 889;
	        this.expr(0);
	        this.state = 892;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===45) {
	            this.state = 890;
	            this.match(SQLtinyParser.K_COLLATE);
	            this.state = 891;
	            this.collation_name();
	        }

	        this.state = 895;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34 || _la===60) {
	            this.state = 894;
	            _la = this._input.LA(1);
	            if(!(_la===34 || _la===60)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragma_value() {
	    let localctx = new Pragma_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, SQLtinyParser.RULE_pragma_value);
	    try {
	        this.state = 900;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 897;
	            this.signed_number();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 898;
	            this.name();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 899;
	            this.match(SQLtinyParser.STRING_LITERAL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	common_table_expression() {
	    let localctx = new Common_table_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, SQLtinyParser.RULE_common_table_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 902;
	        this.table_name();
	        this.state = 914;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 903;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 904;
	            this.column_name();
	            this.state = 909;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 905;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 906;
	                this.column_name();
	                this.state = 911;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 912;
	            this.match(SQLtinyParser.CLOSE_PAR);
	        }

	        this.state = 916;
	        this.match(SQLtinyParser.K_AS);
	        this.state = 917;
	        this.match(SQLtinyParser.OPEN_PAR);
	        this.state = 918;
	        this.simple_select_stmt();
	        this.state = 919;
	        this.match(SQLtinyParser.CLOSE_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	result_column() {
	    let localctx = new Result_columnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, SQLtinyParser.RULE_result_column);
	    var _la = 0;
	    try {
	        this.state = 933;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 921;
	            this.match(SQLtinyParser.STAR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 922;
	            this.table_name();
	            this.state = 923;
	            this.match(SQLtinyParser.DOT);
	            this.state = 924;
	            this.match(SQLtinyParser.STAR);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 926;
	            this.expr(0);
	            this.state = 931;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===33 || _la===149 || _la===152) {
	                this.state = 928;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===33) {
	                    this.state = 927;
	                    this.match(SQLtinyParser.K_AS);
	                }

	                this.state = 930;
	                this.column_alias();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_or_subquery() {
	    let localctx = new Table_or_subqueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, SQLtinyParser.RULE_table_or_subquery);
	    var _la = 0;
	    try {
	        this.state = 982;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 938;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	            if(la_===1) {
	                this.state = 935;
	                this.database_name();
	                this.state = 936;
	                this.match(SQLtinyParser.DOT);

	            }
	            this.state = 940;
	            this.table_name();
	            this.state = 945;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	            if(la_===1) {
	                this.state = 942;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	                if(la_===1) {
	                    this.state = 941;
	                    this.match(SQLtinyParser.K_AS);

	                }
	                this.state = 944;
	                this.table_alias();

	            }
	            this.state = 952;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 85:
	            	this.state = 947;
	            	this.match(SQLtinyParser.K_INDEXED);
	            	this.state = 948;
	            	this.match(SQLtinyParser.K_BY);
	            	this.state = 949;
	            	this.index_name();
	            	break;
	            case 102:
	            	this.state = 950;
	            	this.match(SQLtinyParser.K_NOT);
	            	this.state = 951;
	            	this.match(SQLtinyParser.K_INDEXED);
	            	break;
	            case -1:
	            case 1:
	            case 4:
	            case 5:
	            case 50:
	            case 51:
	            case 59:
	            case 63:
	            case 78:
	            case 87:
	            case 88:
	            case 94:
	            case 96:
	            case 98:
	            case 100:
	            case 107:
	            case 109:
	            case 122:
	            case 128:
	            case 139:
	            case 140:
	            case 142:
	            case 146:
	            case 147:
	            case 157:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 954;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 964;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 955;
	                this.table_or_subquery();
	                this.state = 960;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 956;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 957;
	                    this.table_or_subquery();
	                    this.state = 962;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;

	            case 2:
	                this.state = 963;
	                this.join_clause();
	                break;

	            }
	            this.state = 966;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 971;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	            if(la_===1) {
	                this.state = 968;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
	                if(la_===1) {
	                    this.state = 967;
	                    this.match(SQLtinyParser.K_AS);

	                }
	                this.state = 970;
	                this.table_alias();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 973;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 974;
	            this.simple_select_stmt();
	            this.state = 975;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 980;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
	            if(la_===1) {
	                this.state = 977;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	                if(la_===1) {
	                    this.state = 976;
	                    this.match(SQLtinyParser.K_AS);

	                }
	                this.state = 979;
	                this.table_alias();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_clause() {
	    let localctx = new Join_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, SQLtinyParser.RULE_join_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 984;
	        this.table_or_subquery();
	        this.state = 991;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5 || _la===51 || ((((_la - 87)) & ~0x1f) === 0 && ((1 << (_la - 87)) & 8833) !== 0)) {
	            this.state = 985;
	            this.join_operator();
	            this.state = 986;
	            this.table_or_subquery();
	            this.state = 987;
	            this.join_constraint();
	            this.state = 993;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_operator() {
	    let localctx = new Join_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, SQLtinyParser.RULE_join_operator);
	    var _la = 0;
	    try {
	        this.state = 1007;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 994;
	            this.match(SQLtinyParser.COMMA);
	            break;
	        case 51:
	        case 87:
	        case 94:
	        case 96:
	        case 100:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 996;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===100) {
	                this.state = 995;
	                this.match(SQLtinyParser.K_NATURAL);
	            }

	            this.state = 1004;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 96:
	            	this.state = 998;
	            	this.match(SQLtinyParser.K_LEFT);
	            	this.state = 1000;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===110) {
	            	    this.state = 999;
	            	    this.match(SQLtinyParser.K_OUTER);
	            	}

	            	break;
	            case 87:
	            	this.state = 1002;
	            	this.match(SQLtinyParser.K_INNER);
	            	break;
	            case 51:
	            	this.state = 1003;
	            	this.match(SQLtinyParser.K_CROSS);
	            	break;
	            case 94:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 1006;
	            this.match(SQLtinyParser.K_JOIN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_constraint() {
	    let localctx = new Join_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, SQLtinyParser.RULE_join_constraint);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1023;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 107:
	        	this.state = 1009;
	        	this.match(SQLtinyParser.K_ON);
	        	this.state = 1010;
	        	this.expr(0);
	        	break;
	        case 140:
	        	this.state = 1011;
	        	this.match(SQLtinyParser.K_USING);
	        	this.state = 1012;
	        	this.match(SQLtinyParser.OPEN_PAR);
	        	this.state = 1013;
	        	this.column_name();
	        	this.state = 1018;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	while(_la===5) {
	        	    this.state = 1014;
	        	    this.match(SQLtinyParser.COMMA);
	        	    this.state = 1015;
	        	    this.column_name();
	        	    this.state = 1020;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	}
	        	this.state = 1021;
	        	this.match(SQLtinyParser.CLOSE_PAR);
	        	break;
	        case -1:
	        case 1:
	        case 4:
	        case 5:
	        case 50:
	        case 51:
	        case 59:
	        case 63:
	        case 78:
	        case 87:
	        case 88:
	        case 94:
	        case 96:
	        case 98:
	        case 100:
	        case 109:
	        case 122:
	        case 128:
	        case 139:
	        case 142:
	        case 146:
	        case 147:
	        case 157:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_core() {
	    let localctx = new Select_coreContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, SQLtinyParser.RULE_select_core);
	    var _la = 0;
	    try {
	        this.state = 1099;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 128:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1025;
	            this.match(SQLtinyParser.K_SELECT);
	            this.state = 1027;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
	            if(la_===1) {
	                this.state = 1026;
	                _la = this._input.LA(1);
	                if(!(_la===29 || _la===62)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 1029;
	            this.result_column();
	            this.state = 1034;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 1030;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 1031;
	                this.result_column();
	                this.state = 1036;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1049;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===75) {
	                this.state = 1037;
	                this.match(SQLtinyParser.K_FROM);
	                this.state = 1047;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1038;
	                    this.table_or_subquery();
	                    this.state = 1043;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===5) {
	                        this.state = 1039;
	                        this.match(SQLtinyParser.COMMA);
	                        this.state = 1040;
	                        this.table_or_subquery();
	                        this.state = 1045;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    break;

	                case 2:
	                    this.state = 1046;
	                    this.join_clause();
	                    break;

	                }
	            }

	            this.state = 1053;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===146) {
	                this.state = 1051;
	                this.match(SQLtinyParser.K_WHERE);
	                this.state = 1052;
	                this.expr(0);
	            }

	            this.state = 1069;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===78) {
	                this.state = 1055;
	                this.match(SQLtinyParser.K_GROUP);
	                this.state = 1056;
	                this.match(SQLtinyParser.K_BY);
	                this.state = 1057;
	                this.expr(0);
	                this.state = 1062;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 1058;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 1059;
	                    this.expr(0);
	                    this.state = 1064;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1067;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===79) {
	                    this.state = 1065;
	                    this.match(SQLtinyParser.K_HAVING);
	                    this.state = 1066;
	                    this.expr(0);
	                }

	            }

	            break;
	        case 142:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1071;
	            this.match(SQLtinyParser.K_VALUES);
	            this.state = 1072;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1073;
	            this.expr(0);
	            this.state = 1078;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 1074;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 1075;
	                this.expr(0);
	                this.state = 1080;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1081;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 1096;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 1082;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 1083;
	                this.match(SQLtinyParser.OPEN_PAR);
	                this.state = 1084;
	                this.expr(0);
	                this.state = 1089;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 1085;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 1086;
	                    this.expr(0);
	                    this.state = 1091;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1092;
	                this.match(SQLtinyParser.CLOSE_PAR);
	                this.state = 1098;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compound_operator() {
	    let localctx = new Compound_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, SQLtinyParser.RULE_compound_operator);
	    try {
	        this.state = 1106;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1101;
	            this.match(SQLtinyParser.K_UNION);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1102;
	            this.match(SQLtinyParser.K_UNION);
	            this.state = 1103;
	            this.match(SQLtinyParser.K_ALL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1104;
	            this.match(SQLtinyParser.K_INTERSECT);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1105;
	            this.match(SQLtinyParser.K_EXCEPT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cte_table_name() {
	    let localctx = new Cte_table_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, SQLtinyParser.RULE_cte_table_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1108;
	        this.table_name();
	        this.state = 1120;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 1109;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1110;
	            this.column_name();
	            this.state = 1115;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 1111;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 1112;
	                this.column_name();
	                this.state = 1117;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1118;
	            this.match(SQLtinyParser.CLOSE_PAR);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signed_number() {
	    let localctx = new Signed_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, SQLtinyParser.RULE_signed_number);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1123;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===8 || _la===9) {
	            this.state = 1122;
	            _la = this._input.LA(1);
	            if(!(_la===8 || _la===9)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1125;
	        this.match(SQLtinyParser.NUMERIC_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal_value() {
	    let localctx = new Literal_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, SQLtinyParser.RULE_literal_value);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1127;
	        _la = this._input.LA(1);
	        if(!(((((_la - 52)) & ~0x1f) === 0 && ((1 << (_la - 52)) & 7) !== 0) || _la===104 || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 13) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unary_operator() {
	    let localctx = new Unary_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, SQLtinyParser.RULE_unary_operator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1129;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 1792) !== 0) || _la===102)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	error_message() {
	    let localctx = new Error_messageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, SQLtinyParser.RULE_error_message);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1131;
	        this.match(SQLtinyParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module_argument() {
	    let localctx = new Module_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, SQLtinyParser.RULE_module_argument);
	    try {
	        this.state = 1135;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1133;
	            this.expr(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1134;
	            this.column_def();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_alias() {
	    let localctx = new Column_aliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, SQLtinyParser.RULE_column_alias);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1137;
	        _la = this._input.LA(1);
	        if(!(_la===149 || _la===152)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, SQLtinyParser.RULE_keyword);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1139;
	        _la = this._input.LA(1);
	        if(!(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 4294967295) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 4294967295) !== 0) || ((((_la - 121)) & ~0x1f) === 0 && ((1 << (_la - 121)) & 268435455) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name() {
	    let localctx = new NameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, SQLtinyParser.RULE_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1141;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_name() {
	    let localctx = new Function_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, SQLtinyParser.RULE_function_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1143;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	database_name() {
	    let localctx = new Database_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, SQLtinyParser.RULE_database_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1145;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_name() {
	    let localctx = new Table_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, SQLtinyParser.RULE_table_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1147;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_or_index_name() {
	    let localctx = new Table_or_index_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, SQLtinyParser.RULE_table_or_index_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1149;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	new_table_name() {
	    let localctx = new New_table_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, SQLtinyParser.RULE_new_table_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1151;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_name() {
	    let localctx = new Column_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, SQLtinyParser.RULE_column_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1153;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collation_name() {
	    let localctx = new Collation_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, SQLtinyParser.RULE_collation_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1155;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foreign_table() {
	    let localctx = new Foreign_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, SQLtinyParser.RULE_foreign_table);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1157;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_name() {
	    let localctx = new Index_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, SQLtinyParser.RULE_index_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1159;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trigger_name() {
	    let localctx = new Trigger_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, SQLtinyParser.RULE_trigger_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1161;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	view_name() {
	    let localctx = new View_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, SQLtinyParser.RULE_view_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1163;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module_name() {
	    let localctx = new Module_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, SQLtinyParser.RULE_module_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1165;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragma_name() {
	    let localctx = new Pragma_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, SQLtinyParser.RULE_pragma_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1167;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	savepoint_name() {
	    let localctx = new Savepoint_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, SQLtinyParser.RULE_savepoint_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1169;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_alias() {
	    let localctx = new Table_aliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, SQLtinyParser.RULE_table_alias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1171;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transaction_name() {
	    let localctx = new Transaction_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, SQLtinyParser.RULE_transaction_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1173;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	any_name() {
	    let localctx = new Any_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, SQLtinyParser.RULE_any_name);
	    try {
	        this.state = 1182;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 149:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1175;
	            this.match(SQLtinyParser.IDENTIFIER);
	            break;
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1176;
	            this.keyword();
	            break;
	        case 152:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1177;
	            this.match(SQLtinyParser.STRING_LITERAL);
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1178;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1179;
	            this.any_name();
	            this.state = 1180;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

SQLtinyParser.EOF = antlr4.Token.EOF;
SQLtinyParser.SCOL = 1;
SQLtinyParser.DOT = 2;
SQLtinyParser.OPEN_PAR = 3;
SQLtinyParser.CLOSE_PAR = 4;
SQLtinyParser.COMMA = 5;
SQLtinyParser.ASSIGN = 6;
SQLtinyParser.STAR = 7;
SQLtinyParser.PLUS = 8;
SQLtinyParser.MINUS = 9;
SQLtinyParser.TILDE = 10;
SQLtinyParser.PIPE2 = 11;
SQLtinyParser.DIV = 12;
SQLtinyParser.MOD = 13;
SQLtinyParser.LT2 = 14;
SQLtinyParser.GT2 = 15;
SQLtinyParser.AMP = 16;
SQLtinyParser.PIPE = 17;
SQLtinyParser.LT = 18;
SQLtinyParser.LT_EQ = 19;
SQLtinyParser.GT = 20;
SQLtinyParser.GT_EQ = 21;
SQLtinyParser.EQ = 22;
SQLtinyParser.NOT_EQ1 = 23;
SQLtinyParser.NOT_EQ2 = 24;
SQLtinyParser.K_ABORT = 25;
SQLtinyParser.K_ACTION = 26;
SQLtinyParser.K_ADD = 27;
SQLtinyParser.K_AFTER = 28;
SQLtinyParser.K_ALL = 29;
SQLtinyParser.K_ALTER = 30;
SQLtinyParser.K_ANALYZE = 31;
SQLtinyParser.K_AND = 32;
SQLtinyParser.K_AS = 33;
SQLtinyParser.K_ASC = 34;
SQLtinyParser.K_ATTACH = 35;
SQLtinyParser.K_AUTOINCREMENT = 36;
SQLtinyParser.K_BEFORE = 37;
SQLtinyParser.K_BEGIN = 38;
SQLtinyParser.K_BETWEEN = 39;
SQLtinyParser.K_BY = 40;
SQLtinyParser.K_CASCADE = 41;
SQLtinyParser.K_CASE = 42;
SQLtinyParser.K_CAST = 43;
SQLtinyParser.K_CHECK = 44;
SQLtinyParser.K_COLLATE = 45;
SQLtinyParser.K_COLUMN = 46;
SQLtinyParser.K_COMMIT = 47;
SQLtinyParser.K_CONFLICT = 48;
SQLtinyParser.K_CONSTRAINT = 49;
SQLtinyParser.K_CREATE = 50;
SQLtinyParser.K_CROSS = 51;
SQLtinyParser.K_CURRENT_DATE = 52;
SQLtinyParser.K_CURRENT_TIME = 53;
SQLtinyParser.K_CURRENT_TIMESTAMP = 54;
SQLtinyParser.K_DATABASE = 55;
SQLtinyParser.K_DEFAULT = 56;
SQLtinyParser.K_DEFERRABLE = 57;
SQLtinyParser.K_DEFERRED = 58;
SQLtinyParser.K_DELETE = 59;
SQLtinyParser.K_DESC = 60;
SQLtinyParser.K_DETACH = 61;
SQLtinyParser.K_DISTINCT = 62;
SQLtinyParser.K_DROP = 63;
SQLtinyParser.K_EACH = 64;
SQLtinyParser.K_ELSE = 65;
SQLtinyParser.K_END = 66;
SQLtinyParser.K_ESCAPE = 67;
SQLtinyParser.K_EXCEPT = 68;
SQLtinyParser.K_EXCLUSIVE = 69;
SQLtinyParser.K_EXISTS = 70;
SQLtinyParser.K_EXPLAIN = 71;
SQLtinyParser.K_FAIL = 72;
SQLtinyParser.K_FOR = 73;
SQLtinyParser.K_FOREIGN = 74;
SQLtinyParser.K_FROM = 75;
SQLtinyParser.K_FULL = 76;
SQLtinyParser.K_GLOB = 77;
SQLtinyParser.K_GROUP = 78;
SQLtinyParser.K_HAVING = 79;
SQLtinyParser.K_IF = 80;
SQLtinyParser.K_IGNORE = 81;
SQLtinyParser.K_IMMEDIATE = 82;
SQLtinyParser.K_IN = 83;
SQLtinyParser.K_INDEX = 84;
SQLtinyParser.K_INDEXED = 85;
SQLtinyParser.K_INITIALLY = 86;
SQLtinyParser.K_INNER = 87;
SQLtinyParser.K_INSERT = 88;
SQLtinyParser.K_INSTEAD = 89;
SQLtinyParser.K_INTERSECT = 90;
SQLtinyParser.K_INTO = 91;
SQLtinyParser.K_IS = 92;
SQLtinyParser.K_ISNULL = 93;
SQLtinyParser.K_JOIN = 94;
SQLtinyParser.K_KEY = 95;
SQLtinyParser.K_LEFT = 96;
SQLtinyParser.K_LIKE = 97;
SQLtinyParser.K_LIMIT = 98;
SQLtinyParser.K_MATCH = 99;
SQLtinyParser.K_NATURAL = 100;
SQLtinyParser.K_NO = 101;
SQLtinyParser.K_NOT = 102;
SQLtinyParser.K_NOTNULL = 103;
SQLtinyParser.K_NULL = 104;
SQLtinyParser.K_OF = 105;
SQLtinyParser.K_OFFSET = 106;
SQLtinyParser.K_ON = 107;
SQLtinyParser.K_OR = 108;
SQLtinyParser.K_ORDER = 109;
SQLtinyParser.K_OUTER = 110;
SQLtinyParser.K_PLAN = 111;
SQLtinyParser.K_PRAGMA = 112;
SQLtinyParser.K_PRIMARY = 113;
SQLtinyParser.K_QUERY = 114;
SQLtinyParser.K_RAISE = 115;
SQLtinyParser.K_RECURSIVE = 116;
SQLtinyParser.K_REFERENCES = 117;
SQLtinyParser.K_REGEXP = 118;
SQLtinyParser.K_REINDEX = 119;
SQLtinyParser.K_RELEASE = 120;
SQLtinyParser.K_RENAME = 121;
SQLtinyParser.K_REPLACE = 122;
SQLtinyParser.K_RESTRICT = 123;
SQLtinyParser.K_RIGHT = 124;
SQLtinyParser.K_ROLLBACK = 125;
SQLtinyParser.K_ROW = 126;
SQLtinyParser.K_SAVEPOINT = 127;
SQLtinyParser.K_SELECT = 128;
SQLtinyParser.K_SET = 129;
SQLtinyParser.K_TABLE = 130;
SQLtinyParser.K_TEMP = 131;
SQLtinyParser.K_TEMPORARY = 132;
SQLtinyParser.K_THEN = 133;
SQLtinyParser.K_TO = 134;
SQLtinyParser.K_TRANSACTION = 135;
SQLtinyParser.K_TRIGGER = 136;
SQLtinyParser.K_UNION = 137;
SQLtinyParser.K_UNIQUE = 138;
SQLtinyParser.K_UPDATE = 139;
SQLtinyParser.K_USING = 140;
SQLtinyParser.K_VACUUM = 141;
SQLtinyParser.K_VALUES = 142;
SQLtinyParser.K_VIEW = 143;
SQLtinyParser.K_VIRTUAL = 144;
SQLtinyParser.K_WHEN = 145;
SQLtinyParser.K_WHERE = 146;
SQLtinyParser.K_WITH = 147;
SQLtinyParser.K_WITHOUT = 148;
SQLtinyParser.IDENTIFIER = 149;
SQLtinyParser.NUMERIC_LITERAL = 150;
SQLtinyParser.BIND_PARAMETER = 151;
SQLtinyParser.STRING_LITERAL = 152;
SQLtinyParser.BLOB_LITERAL = 153;
SQLtinyParser.SINGLE_LINE_COMMENT = 154;
SQLtinyParser.MULTILINE_COMMENT = 155;
SQLtinyParser.SPACES = 156;
SQLtinyParser.UNEXPECTED_CHAR = 157;

SQLtinyParser.RULE_parse = 0;
SQLtinyParser.RULE_error = 1;
SQLtinyParser.RULE_sql_stmt_list = 2;
SQLtinyParser.RULE_sql_stmt = 3;
SQLtinyParser.RULE_create_index_stmt = 4;
SQLtinyParser.RULE_create_table_stmt = 5;
SQLtinyParser.RULE_delete_stmt = 6;
SQLtinyParser.RULE_delete_stmt_limited = 7;
SQLtinyParser.RULE_drop_index_stmt = 8;
SQLtinyParser.RULE_drop_table_stmt = 9;
SQLtinyParser.RULE_insert_stmt = 10;
SQLtinyParser.RULE_simple_select_stmt = 11;
SQLtinyParser.RULE_update_stmt = 12;
SQLtinyParser.RULE_update_stmt_limited = 13;
SQLtinyParser.RULE_column_def = 14;
SQLtinyParser.RULE_type_name = 15;
SQLtinyParser.RULE_column_constraint = 16;
SQLtinyParser.RULE_conflict_clause = 17;
SQLtinyParser.RULE_expr = 18;
SQLtinyParser.RULE_foreign_key_clause = 19;
SQLtinyParser.RULE_raise_function = 20;
SQLtinyParser.RULE_indexed_column = 21;
SQLtinyParser.RULE_table_constraint = 22;
SQLtinyParser.RULE_with_clause = 23;
SQLtinyParser.RULE_qualified_table_name = 24;
SQLtinyParser.RULE_ordering_term = 25;
SQLtinyParser.RULE_pragma_value = 26;
SQLtinyParser.RULE_common_table_expression = 27;
SQLtinyParser.RULE_result_column = 28;
SQLtinyParser.RULE_table_or_subquery = 29;
SQLtinyParser.RULE_join_clause = 30;
SQLtinyParser.RULE_join_operator = 31;
SQLtinyParser.RULE_join_constraint = 32;
SQLtinyParser.RULE_select_core = 33;
SQLtinyParser.RULE_compound_operator = 34;
SQLtinyParser.RULE_cte_table_name = 35;
SQLtinyParser.RULE_signed_number = 36;
SQLtinyParser.RULE_literal_value = 37;
SQLtinyParser.RULE_unary_operator = 38;
SQLtinyParser.RULE_error_message = 39;
SQLtinyParser.RULE_module_argument = 40;
SQLtinyParser.RULE_column_alias = 41;
SQLtinyParser.RULE_keyword = 42;
SQLtinyParser.RULE_name = 43;
SQLtinyParser.RULE_function_name = 44;
SQLtinyParser.RULE_database_name = 45;
SQLtinyParser.RULE_table_name = 46;
SQLtinyParser.RULE_table_or_index_name = 47;
SQLtinyParser.RULE_new_table_name = 48;
SQLtinyParser.RULE_column_name = 49;
SQLtinyParser.RULE_collation_name = 50;
SQLtinyParser.RULE_foreign_table = 51;
SQLtinyParser.RULE_index_name = 52;
SQLtinyParser.RULE_trigger_name = 53;
SQLtinyParser.RULE_view_name = 54;
SQLtinyParser.RULE_module_name = 55;
SQLtinyParser.RULE_pragma_name = 56;
SQLtinyParser.RULE_savepoint_name = 57;
SQLtinyParser.RULE_table_alias = 58;
SQLtinyParser.RULE_transaction_name = 59;
SQLtinyParser.RULE_any_name = 60;

class ParseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_parse;
    }

	EOF() {
	    return this.getToken(SQLtinyParser.EOF, 0);
	};

	sql_stmt_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sql_stmt_listContext);
	    } else {
	        return this.getTypedRuleContext(Sql_stmt_listContext,i);
	    }
	};

	error = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ErrorContext);
	    } else {
	        return this.getTypedRuleContext(ErrorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterParse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitParse(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitParse(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ErrorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_error;
        this._UNEXPECTED_CHAR = null;
    }

	UNEXPECTED_CHAR() {
	    return this.getToken(SQLtinyParser.UNEXPECTED_CHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterError(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitError(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitError(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Sql_stmt_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_sql_stmt_list;
    }

	sql_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sql_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Sql_stmtContext,i);
	    }
	};

	SCOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.SCOL);
	    } else {
	        return this.getToken(SQLtinyParser.SCOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSql_stmt_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSql_stmt_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitSql_stmt_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Sql_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_sql_stmt;
    }

	create_index_stmt() {
	    return this.getTypedRuleContext(Create_index_stmtContext,0);
	};

	create_table_stmt() {
	    return this.getTypedRuleContext(Create_table_stmtContext,0);
	};

	delete_stmt() {
	    return this.getTypedRuleContext(Delete_stmtContext,0);
	};

	delete_stmt_limited() {
	    return this.getTypedRuleContext(Delete_stmt_limitedContext,0);
	};

	drop_index_stmt() {
	    return this.getTypedRuleContext(Drop_index_stmtContext,0);
	};

	drop_table_stmt() {
	    return this.getTypedRuleContext(Drop_table_stmtContext,0);
	};

	insert_stmt() {
	    return this.getTypedRuleContext(Insert_stmtContext,0);
	};

	simple_select_stmt() {
	    return this.getTypedRuleContext(Simple_select_stmtContext,0);
	};

	update_stmt() {
	    return this.getTypedRuleContext(Update_stmtContext,0);
	};

	update_stmt_limited() {
	    return this.getTypedRuleContext(Update_stmt_limitedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSql_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSql_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitSql_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_index_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_create_index_stmt;
    }

	K_CREATE() {
	    return this.getToken(SQLtinyParser.K_CREATE, 0);
	};

	K_INDEX() {
	    return this.getToken(SQLtinyParser.K_INDEX, 0);
	};

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	K_ON() {
	    return this.getToken(SQLtinyParser.K_ON, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	indexed_column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Indexed_columnContext);
	    } else {
	        return this.getTypedRuleContext(Indexed_columnContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	K_UNIQUE() {
	    return this.getToken(SQLtinyParser.K_UNIQUE, 0);
	};

	K_IF() {
	    return this.getToken(SQLtinyParser.K_IF, 0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCreate_index_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCreate_index_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitCreate_index_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_create_table_stmt;
    }

	K_CREATE() {
	    return this.getToken(SQLtinyParser.K_CREATE, 0);
	};

	K_TABLE() {
	    return this.getToken(SQLtinyParser.K_TABLE, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	column_def = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_defContext);
	    } else {
	        return this.getTypedRuleContext(Column_defContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	K_AS() {
	    return this.getToken(SQLtinyParser.K_AS, 0);
	};

	simple_select_stmt() {
	    return this.getTypedRuleContext(Simple_select_stmtContext,0);
	};

	K_IF() {
	    return this.getToken(SQLtinyParser.K_IF, 0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	K_TEMP() {
	    return this.getToken(SQLtinyParser.K_TEMP, 0);
	};

	K_TEMPORARY() {
	    return this.getToken(SQLtinyParser.K_TEMPORARY, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	table_constraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_constraintContext);
	    } else {
	        return this.getTypedRuleContext(Table_constraintContext,i);
	    }
	};

	K_WITHOUT() {
	    return this.getToken(SQLtinyParser.K_WITHOUT, 0);
	};

	IDENTIFIER() {
	    return this.getToken(SQLtinyParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCreate_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCreate_table_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitCreate_table_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Delete_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_delete_stmt;
    }

	K_DELETE() {
	    return this.getToken(SQLtinyParser.K_DELETE, 0);
	};

	K_FROM() {
	    return this.getToken(SQLtinyParser.K_FROM, 0);
	};

	qualified_table_name() {
	    return this.getTypedRuleContext(Qualified_table_nameContext,0);
	};

	with_clause() {
	    return this.getTypedRuleContext(With_clauseContext,0);
	};

	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterDelete_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitDelete_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitDelete_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Delete_stmt_limitedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_delete_stmt_limited;
    }

	K_DELETE() {
	    return this.getToken(SQLtinyParser.K_DELETE, 0);
	};

	K_FROM() {
	    return this.getToken(SQLtinyParser.K_FROM, 0);
	};

	qualified_table_name() {
	    return this.getTypedRuleContext(Qualified_table_nameContext,0);
	};

	with_clause() {
	    return this.getTypedRuleContext(With_clauseContext,0);
	};

	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	K_LIMIT() {
	    return this.getToken(SQLtinyParser.K_LIMIT, 0);
	};

	K_ORDER() {
	    return this.getToken(SQLtinyParser.K_ORDER, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	ordering_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ordering_termContext);
	    } else {
	        return this.getTypedRuleContext(Ordering_termContext,i);
	    }
	};

	K_OFFSET() {
	    return this.getToken(SQLtinyParser.K_OFFSET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterDelete_stmt_limited(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitDelete_stmt_limited(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitDelete_stmt_limited(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_index_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_drop_index_stmt;
    }

	K_DROP() {
	    return this.getToken(SQLtinyParser.K_DROP, 0);
	};

	K_INDEX() {
	    return this.getToken(SQLtinyParser.K_INDEX, 0);
	};

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	K_IF() {
	    return this.getToken(SQLtinyParser.K_IF, 0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterDrop_index_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitDrop_index_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitDrop_index_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_drop_table_stmt;
    }

	K_DROP() {
	    return this.getToken(SQLtinyParser.K_DROP, 0);
	};

	K_TABLE() {
	    return this.getToken(SQLtinyParser.K_TABLE, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	K_IF() {
	    return this.getToken(SQLtinyParser.K_IF, 0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterDrop_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitDrop_table_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitDrop_table_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Insert_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_insert_stmt;
    }

	K_INTO() {
	    return this.getToken(SQLtinyParser.K_INTO, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	K_INSERT() {
	    return this.getToken(SQLtinyParser.K_INSERT, 0);
	};

	K_REPLACE() {
	    return this.getToken(SQLtinyParser.K_REPLACE, 0);
	};

	K_OR() {
	    return this.getToken(SQLtinyParser.K_OR, 0);
	};

	K_ROLLBACK() {
	    return this.getToken(SQLtinyParser.K_ROLLBACK, 0);
	};

	K_ABORT() {
	    return this.getToken(SQLtinyParser.K_ABORT, 0);
	};

	K_FAIL() {
	    return this.getToken(SQLtinyParser.K_FAIL, 0);
	};

	K_IGNORE() {
	    return this.getToken(SQLtinyParser.K_IGNORE, 0);
	};

	K_VALUES() {
	    return this.getToken(SQLtinyParser.K_VALUES, 0);
	};

	OPEN_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.OPEN_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.OPEN_PAR, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	CLOSE_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.CLOSE_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.CLOSE_PAR, i);
	    }
	};


	simple_select_stmt() {
	    return this.getTypedRuleContext(Simple_select_stmtContext,0);
	};

	K_DEFAULT() {
	    return this.getToken(SQLtinyParser.K_DEFAULT, 0);
	};

	with_clause() {
	    return this.getTypedRuleContext(With_clauseContext,0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterInsert_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitInsert_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitInsert_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Simple_select_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_simple_select_stmt;
    }

	select_core() {
	    return this.getTypedRuleContext(Select_coreContext,0);
	};

	K_ORDER() {
	    return this.getToken(SQLtinyParser.K_ORDER, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	ordering_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ordering_termContext);
	    } else {
	        return this.getTypedRuleContext(Ordering_termContext,i);
	    }
	};

	K_LIMIT() {
	    return this.getToken(SQLtinyParser.K_LIMIT, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_OFFSET() {
	    return this.getToken(SQLtinyParser.K_OFFSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSimple_select_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSimple_select_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitSimple_select_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Update_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_update_stmt;
    }

	K_UPDATE() {
	    return this.getToken(SQLtinyParser.K_UPDATE, 0);
	};

	qualified_table_name() {
	    return this.getTypedRuleContext(Qualified_table_nameContext,0);
	};

	K_SET() {
	    return this.getToken(SQLtinyParser.K_SET, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	ASSIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.ASSIGN);
	    } else {
	        return this.getToken(SQLtinyParser.ASSIGN, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	with_clause() {
	    return this.getTypedRuleContext(With_clauseContext,0);
	};

	K_OR() {
	    return this.getToken(SQLtinyParser.K_OR, 0);
	};

	K_ROLLBACK() {
	    return this.getToken(SQLtinyParser.K_ROLLBACK, 0);
	};

	K_ABORT() {
	    return this.getToken(SQLtinyParser.K_ABORT, 0);
	};

	K_REPLACE() {
	    return this.getToken(SQLtinyParser.K_REPLACE, 0);
	};

	K_FAIL() {
	    return this.getToken(SQLtinyParser.K_FAIL, 0);
	};

	K_IGNORE() {
	    return this.getToken(SQLtinyParser.K_IGNORE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterUpdate_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitUpdate_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitUpdate_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Update_stmt_limitedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_update_stmt_limited;
    }

	K_UPDATE() {
	    return this.getToken(SQLtinyParser.K_UPDATE, 0);
	};

	qualified_table_name() {
	    return this.getTypedRuleContext(Qualified_table_nameContext,0);
	};

	K_SET() {
	    return this.getToken(SQLtinyParser.K_SET, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	ASSIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.ASSIGN);
	    } else {
	        return this.getToken(SQLtinyParser.ASSIGN, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	with_clause() {
	    return this.getTypedRuleContext(With_clauseContext,0);
	};

	K_OR() {
	    return this.getToken(SQLtinyParser.K_OR, 0);
	};

	K_ROLLBACK() {
	    return this.getToken(SQLtinyParser.K_ROLLBACK, 0);
	};

	K_ABORT() {
	    return this.getToken(SQLtinyParser.K_ABORT, 0);
	};

	K_REPLACE() {
	    return this.getToken(SQLtinyParser.K_REPLACE, 0);
	};

	K_FAIL() {
	    return this.getToken(SQLtinyParser.K_FAIL, 0);
	};

	K_IGNORE() {
	    return this.getToken(SQLtinyParser.K_IGNORE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	K_LIMIT() {
	    return this.getToken(SQLtinyParser.K_LIMIT, 0);
	};

	K_ORDER() {
	    return this.getToken(SQLtinyParser.K_ORDER, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	ordering_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ordering_termContext);
	    } else {
	        return this.getTypedRuleContext(Ordering_termContext,i);
	    }
	};

	K_OFFSET() {
	    return this.getToken(SQLtinyParser.K_OFFSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterUpdate_stmt_limited(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitUpdate_stmt_limited(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitUpdate_stmt_limited(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Column_defContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_column_def;
    }

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	type_name() {
	    return this.getTypedRuleContext(Type_nameContext,0);
	};

	column_constraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_constraintContext);
	    } else {
	        return this.getTypedRuleContext(Column_constraintContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterColumn_def(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitColumn_def(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitColumn_def(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_type_name;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	signed_number = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Signed_numberContext);
	    } else {
	        return this.getTypedRuleContext(Signed_numberContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	COMMA() {
	    return this.getToken(SQLtinyParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterType_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitType_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitType_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Column_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_column_constraint;
    }

	K_PRIMARY() {
	    return this.getToken(SQLtinyParser.K_PRIMARY, 0);
	};

	K_KEY() {
	    return this.getToken(SQLtinyParser.K_KEY, 0);
	};

	conflict_clause() {
	    return this.getTypedRuleContext(Conflict_clauseContext,0);
	};

	K_NULL() {
	    return this.getToken(SQLtinyParser.K_NULL, 0);
	};

	K_UNIQUE() {
	    return this.getToken(SQLtinyParser.K_UNIQUE, 0);
	};

	K_CHECK() {
	    return this.getToken(SQLtinyParser.K_CHECK, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	K_DEFAULT() {
	    return this.getToken(SQLtinyParser.K_DEFAULT, 0);
	};

	K_COLLATE() {
	    return this.getToken(SQLtinyParser.K_COLLATE, 0);
	};

	collation_name() {
	    return this.getTypedRuleContext(Collation_nameContext,0);
	};

	foreign_key_clause() {
	    return this.getTypedRuleContext(Foreign_key_clauseContext,0);
	};

	K_CONSTRAINT() {
	    return this.getToken(SQLtinyParser.K_CONSTRAINT, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	signed_number() {
	    return this.getTypedRuleContext(Signed_numberContext,0);
	};

	literal_value() {
	    return this.getTypedRuleContext(Literal_valueContext,0);
	};

	K_AUTOINCREMENT() {
	    return this.getToken(SQLtinyParser.K_AUTOINCREMENT, 0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_ASC() {
	    return this.getToken(SQLtinyParser.K_ASC, 0);
	};

	K_DESC() {
	    return this.getToken(SQLtinyParser.K_DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterColumn_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitColumn_constraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitColumn_constraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Conflict_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_conflict_clause;
    }

	K_ON() {
	    return this.getToken(SQLtinyParser.K_ON, 0);
	};

	K_CONFLICT() {
	    return this.getToken(SQLtinyParser.K_CONFLICT, 0);
	};

	K_ROLLBACK() {
	    return this.getToken(SQLtinyParser.K_ROLLBACK, 0);
	};

	K_ABORT() {
	    return this.getToken(SQLtinyParser.K_ABORT, 0);
	};

	K_FAIL() {
	    return this.getToken(SQLtinyParser.K_FAIL, 0);
	};

	K_IGNORE() {
	    return this.getToken(SQLtinyParser.K_IGNORE, 0);
	};

	K_REPLACE() {
	    return this.getToken(SQLtinyParser.K_REPLACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterConflict_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitConflict_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitConflict_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_expr;
    }

	literal_value() {
	    return this.getTypedRuleContext(Literal_valueContext,0);
	};

	BIND_PARAMETER() {
	    return this.getToken(SQLtinyParser.BIND_PARAMETER, 0);
	};

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.DOT);
	    } else {
	        return this.getToken(SQLtinyParser.DOT, i);
	    }
	};


	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	unary_operator() {
	    return this.getTypedRuleContext(Unary_operatorContext,0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	function_name() {
	    return this.getTypedRuleContext(Function_nameContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	STAR() {
	    return this.getToken(SQLtinyParser.STAR, 0);
	};

	K_DISTINCT() {
	    return this.getToken(SQLtinyParser.K_DISTINCT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_CAST() {
	    return this.getToken(SQLtinyParser.K_CAST, 0);
	};

	K_AS() {
	    return this.getToken(SQLtinyParser.K_AS, 0);
	};

	type_name() {
	    return this.getTypedRuleContext(Type_nameContext,0);
	};

	simple_select_stmt() {
	    return this.getTypedRuleContext(Simple_select_stmtContext,0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_CASE() {
	    return this.getToken(SQLtinyParser.K_CASE, 0);
	};

	K_END() {
	    return this.getToken(SQLtinyParser.K_END, 0);
	};

	K_WHEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_WHEN);
	    } else {
	        return this.getToken(SQLtinyParser.K_WHEN, i);
	    }
	};


	K_THEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_THEN);
	    } else {
	        return this.getToken(SQLtinyParser.K_THEN, i);
	    }
	};


	K_ELSE() {
	    return this.getToken(SQLtinyParser.K_ELSE, 0);
	};

	raise_function() {
	    return this.getTypedRuleContext(Raise_functionContext,0);
	};

	PIPE2() {
	    return this.getToken(SQLtinyParser.PIPE2, 0);
	};

	DIV() {
	    return this.getToken(SQLtinyParser.DIV, 0);
	};

	MOD() {
	    return this.getToken(SQLtinyParser.MOD, 0);
	};

	PLUS() {
	    return this.getToken(SQLtinyParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(SQLtinyParser.MINUS, 0);
	};

	LT2() {
	    return this.getToken(SQLtinyParser.LT2, 0);
	};

	GT2() {
	    return this.getToken(SQLtinyParser.GT2, 0);
	};

	AMP() {
	    return this.getToken(SQLtinyParser.AMP, 0);
	};

	PIPE() {
	    return this.getToken(SQLtinyParser.PIPE, 0);
	};

	LT() {
	    return this.getToken(SQLtinyParser.LT, 0);
	};

	LT_EQ() {
	    return this.getToken(SQLtinyParser.LT_EQ, 0);
	};

	GT() {
	    return this.getToken(SQLtinyParser.GT, 0);
	};

	GT_EQ() {
	    return this.getToken(SQLtinyParser.GT_EQ, 0);
	};

	ASSIGN() {
	    return this.getToken(SQLtinyParser.ASSIGN, 0);
	};

	EQ() {
	    return this.getToken(SQLtinyParser.EQ, 0);
	};

	NOT_EQ1() {
	    return this.getToken(SQLtinyParser.NOT_EQ1, 0);
	};

	NOT_EQ2() {
	    return this.getToken(SQLtinyParser.NOT_EQ2, 0);
	};

	K_IS() {
	    return this.getToken(SQLtinyParser.K_IS, 0);
	};

	K_IN() {
	    return this.getToken(SQLtinyParser.K_IN, 0);
	};

	K_LIKE() {
	    return this.getToken(SQLtinyParser.K_LIKE, 0);
	};

	K_GLOB() {
	    return this.getToken(SQLtinyParser.K_GLOB, 0);
	};

	K_MATCH() {
	    return this.getToken(SQLtinyParser.K_MATCH, 0);
	};

	K_REGEXP() {
	    return this.getToken(SQLtinyParser.K_REGEXP, 0);
	};

	K_AND() {
	    return this.getToken(SQLtinyParser.K_AND, 0);
	};

	K_OR() {
	    return this.getToken(SQLtinyParser.K_OR, 0);
	};

	K_BETWEEN() {
	    return this.getToken(SQLtinyParser.K_BETWEEN, 0);
	};

	K_COLLATE() {
	    return this.getToken(SQLtinyParser.K_COLLATE, 0);
	};

	collation_name() {
	    return this.getTypedRuleContext(Collation_nameContext,0);
	};

	K_ESCAPE() {
	    return this.getToken(SQLtinyParser.K_ESCAPE, 0);
	};

	K_ISNULL() {
	    return this.getToken(SQLtinyParser.K_ISNULL, 0);
	};

	K_NOTNULL() {
	    return this.getToken(SQLtinyParser.K_NOTNULL, 0);
	};

	K_NULL() {
	    return this.getToken(SQLtinyParser.K_NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Foreign_key_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_foreign_key_clause;
    }

	K_REFERENCES() {
	    return this.getToken(SQLtinyParser.K_REFERENCES, 0);
	};

	foreign_table() {
	    return this.getTypedRuleContext(Foreign_tableContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	K_DEFERRABLE() {
	    return this.getToken(SQLtinyParser.K_DEFERRABLE, 0);
	};

	K_ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_ON);
	    } else {
	        return this.getToken(SQLtinyParser.K_ON, i);
	    }
	};


	K_MATCH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_MATCH);
	    } else {
	        return this.getToken(SQLtinyParser.K_MATCH, i);
	    }
	};


	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_DELETE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_DELETE);
	    } else {
	        return this.getToken(SQLtinyParser.K_DELETE, i);
	    }
	};


	K_UPDATE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_UPDATE);
	    } else {
	        return this.getToken(SQLtinyParser.K_UPDATE, i);
	    }
	};


	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_INITIALLY() {
	    return this.getToken(SQLtinyParser.K_INITIALLY, 0);
	};

	K_DEFERRED() {
	    return this.getToken(SQLtinyParser.K_DEFERRED, 0);
	};

	K_IMMEDIATE() {
	    return this.getToken(SQLtinyParser.K_IMMEDIATE, 0);
	};

	K_SET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_SET);
	    } else {
	        return this.getToken(SQLtinyParser.K_SET, i);
	    }
	};


	K_NULL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_NULL);
	    } else {
	        return this.getToken(SQLtinyParser.K_NULL, i);
	    }
	};


	K_DEFAULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_DEFAULT);
	    } else {
	        return this.getToken(SQLtinyParser.K_DEFAULT, i);
	    }
	};


	K_CASCADE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_CASCADE);
	    } else {
	        return this.getToken(SQLtinyParser.K_CASCADE, i);
	    }
	};


	K_RESTRICT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_RESTRICT);
	    } else {
	        return this.getToken(SQLtinyParser.K_RESTRICT, i);
	    }
	};


	K_NO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_NO);
	    } else {
	        return this.getToken(SQLtinyParser.K_NO, i);
	    }
	};


	K_ACTION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_ACTION);
	    } else {
	        return this.getToken(SQLtinyParser.K_ACTION, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterForeign_key_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitForeign_key_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitForeign_key_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Raise_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_raise_function;
    }

	K_RAISE() {
	    return this.getToken(SQLtinyParser.K_RAISE, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	K_IGNORE() {
	    return this.getToken(SQLtinyParser.K_IGNORE, 0);
	};

	COMMA() {
	    return this.getToken(SQLtinyParser.COMMA, 0);
	};

	error_message() {
	    return this.getTypedRuleContext(Error_messageContext,0);
	};

	K_ROLLBACK() {
	    return this.getToken(SQLtinyParser.K_ROLLBACK, 0);
	};

	K_ABORT() {
	    return this.getToken(SQLtinyParser.K_ABORT, 0);
	};

	K_FAIL() {
	    return this.getToken(SQLtinyParser.K_FAIL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterRaise_function(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitRaise_function(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitRaise_function(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Indexed_columnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_indexed_column;
    }

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	K_COLLATE() {
	    return this.getToken(SQLtinyParser.K_COLLATE, 0);
	};

	collation_name() {
	    return this.getTypedRuleContext(Collation_nameContext,0);
	};

	K_ASC() {
	    return this.getToken(SQLtinyParser.K_ASC, 0);
	};

	K_DESC() {
	    return this.getToken(SQLtinyParser.K_DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterIndexed_column(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitIndexed_column(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitIndexed_column(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_table_constraint;
    }

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	indexed_column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Indexed_columnContext);
	    } else {
	        return this.getTypedRuleContext(Indexed_columnContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	conflict_clause() {
	    return this.getTypedRuleContext(Conflict_clauseContext,0);
	};

	K_CHECK() {
	    return this.getToken(SQLtinyParser.K_CHECK, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	K_FOREIGN() {
	    return this.getToken(SQLtinyParser.K_FOREIGN, 0);
	};

	K_KEY() {
	    return this.getToken(SQLtinyParser.K_KEY, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	foreign_key_clause() {
	    return this.getTypedRuleContext(Foreign_key_clauseContext,0);
	};

	K_CONSTRAINT() {
	    return this.getToken(SQLtinyParser.K_CONSTRAINT, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	K_PRIMARY() {
	    return this.getToken(SQLtinyParser.K_PRIMARY, 0);
	};

	K_UNIQUE() {
	    return this.getToken(SQLtinyParser.K_UNIQUE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterTable_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitTable_constraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitTable_constraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class With_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_with_clause;
    }

	K_WITH() {
	    return this.getToken(SQLtinyParser.K_WITH, 0);
	};

	cte_table_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Cte_table_nameContext);
	    } else {
	        return this.getTypedRuleContext(Cte_table_nameContext,i);
	    }
	};

	K_AS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_AS);
	    } else {
	        return this.getToken(SQLtinyParser.K_AS, i);
	    }
	};


	OPEN_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.OPEN_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.OPEN_PAR, i);
	    }
	};


	simple_select_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Simple_select_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Simple_select_stmtContext,i);
	    }
	};

	CLOSE_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.CLOSE_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.CLOSE_PAR, i);
	    }
	};


	K_RECURSIVE() {
	    return this.getToken(SQLtinyParser.K_RECURSIVE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterWith_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitWith_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitWith_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Qualified_table_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_qualified_table_name;
    }

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	K_INDEXED() {
	    return this.getToken(SQLtinyParser.K_INDEXED, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterQualified_table_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitQualified_table_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitQualified_table_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Ordering_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_ordering_term;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	K_COLLATE() {
	    return this.getToken(SQLtinyParser.K_COLLATE, 0);
	};

	collation_name() {
	    return this.getTypedRuleContext(Collation_nameContext,0);
	};

	K_ASC() {
	    return this.getToken(SQLtinyParser.K_ASC, 0);
	};

	K_DESC() {
	    return this.getToken(SQLtinyParser.K_DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterOrdering_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitOrdering_term(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitOrdering_term(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Pragma_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_pragma_value;
    }

	signed_number() {
	    return this.getTypedRuleContext(Signed_numberContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(SQLtinyParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterPragma_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitPragma_value(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitPragma_value(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Common_table_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_common_table_expression;
    }

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	K_AS() {
	    return this.getToken(SQLtinyParser.K_AS, 0);
	};

	OPEN_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.OPEN_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.OPEN_PAR, i);
	    }
	};


	simple_select_stmt() {
	    return this.getTypedRuleContext(Simple_select_stmtContext,0);
	};

	CLOSE_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.CLOSE_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.CLOSE_PAR, i);
	    }
	};


	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCommon_table_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCommon_table_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitCommon_table_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Result_columnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_result_column;
    }

	STAR() {
	    return this.getToken(SQLtinyParser.STAR, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	column_alias() {
	    return this.getTypedRuleContext(Column_aliasContext,0);
	};

	K_AS() {
	    return this.getToken(SQLtinyParser.K_AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterResult_column(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitResult_column(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitResult_column(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_or_subqueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_table_or_subquery;
    }

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	table_alias() {
	    return this.getTypedRuleContext(Table_aliasContext,0);
	};

	K_INDEXED() {
	    return this.getToken(SQLtinyParser.K_INDEXED, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_AS() {
	    return this.getToken(SQLtinyParser.K_AS, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	table_or_subquery = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_or_subqueryContext);
	    } else {
	        return this.getTypedRuleContext(Table_or_subqueryContext,i);
	    }
	};

	join_clause() {
	    return this.getTypedRuleContext(Join_clauseContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	simple_select_stmt() {
	    return this.getTypedRuleContext(Simple_select_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterTable_or_subquery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitTable_or_subquery(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitTable_or_subquery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Join_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_join_clause;
    }

	table_or_subquery = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_or_subqueryContext);
	    } else {
	        return this.getTypedRuleContext(Table_or_subqueryContext,i);
	    }
	};

	join_operator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Join_operatorContext);
	    } else {
	        return this.getTypedRuleContext(Join_operatorContext,i);
	    }
	};

	join_constraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Join_constraintContext);
	    } else {
	        return this.getTypedRuleContext(Join_constraintContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterJoin_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitJoin_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitJoin_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Join_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_join_operator;
    }

	COMMA() {
	    return this.getToken(SQLtinyParser.COMMA, 0);
	};

	K_JOIN() {
	    return this.getToken(SQLtinyParser.K_JOIN, 0);
	};

	K_NATURAL() {
	    return this.getToken(SQLtinyParser.K_NATURAL, 0);
	};

	K_LEFT() {
	    return this.getToken(SQLtinyParser.K_LEFT, 0);
	};

	K_INNER() {
	    return this.getToken(SQLtinyParser.K_INNER, 0);
	};

	K_CROSS() {
	    return this.getToken(SQLtinyParser.K_CROSS, 0);
	};

	K_OUTER() {
	    return this.getToken(SQLtinyParser.K_OUTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterJoin_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitJoin_operator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitJoin_operator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Join_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_join_constraint;
    }

	K_ON() {
	    return this.getToken(SQLtinyParser.K_ON, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	K_USING() {
	    return this.getToken(SQLtinyParser.K_USING, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterJoin_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitJoin_constraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitJoin_constraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Select_coreContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_select_core;
    }

	K_SELECT() {
	    return this.getToken(SQLtinyParser.K_SELECT, 0);
	};

	result_column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Result_columnContext);
	    } else {
	        return this.getTypedRuleContext(Result_columnContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_FROM() {
	    return this.getToken(SQLtinyParser.K_FROM, 0);
	};

	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	K_GROUP() {
	    return this.getToken(SQLtinyParser.K_GROUP, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	K_DISTINCT() {
	    return this.getToken(SQLtinyParser.K_DISTINCT, 0);
	};

	K_ALL() {
	    return this.getToken(SQLtinyParser.K_ALL, 0);
	};

	table_or_subquery = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_or_subqueryContext);
	    } else {
	        return this.getTypedRuleContext(Table_or_subqueryContext,i);
	    }
	};

	join_clause() {
	    return this.getTypedRuleContext(Join_clauseContext,0);
	};

	K_HAVING() {
	    return this.getToken(SQLtinyParser.K_HAVING, 0);
	};

	K_VALUES() {
	    return this.getToken(SQLtinyParser.K_VALUES, 0);
	};

	OPEN_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.OPEN_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.OPEN_PAR, i);
	    }
	};


	CLOSE_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.CLOSE_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.CLOSE_PAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSelect_core(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSelect_core(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitSelect_core(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Compound_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_compound_operator;
    }

	K_UNION() {
	    return this.getToken(SQLtinyParser.K_UNION, 0);
	};

	K_ALL() {
	    return this.getToken(SQLtinyParser.K_ALL, 0);
	};

	K_INTERSECT() {
	    return this.getToken(SQLtinyParser.K_INTERSECT, 0);
	};

	K_EXCEPT() {
	    return this.getToken(SQLtinyParser.K_EXCEPT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCompound_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCompound_operator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitCompound_operator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Cte_table_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_cte_table_name;
    }

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCte_table_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCte_table_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitCte_table_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Signed_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_signed_number;
    }

	NUMERIC_LITERAL() {
	    return this.getToken(SQLtinyParser.NUMERIC_LITERAL, 0);
	};

	PLUS() {
	    return this.getToken(SQLtinyParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(SQLtinyParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSigned_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSigned_number(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitSigned_number(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Literal_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_literal_value;
    }

	NUMERIC_LITERAL() {
	    return this.getToken(SQLtinyParser.NUMERIC_LITERAL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(SQLtinyParser.STRING_LITERAL, 0);
	};

	BLOB_LITERAL() {
	    return this.getToken(SQLtinyParser.BLOB_LITERAL, 0);
	};

	K_NULL() {
	    return this.getToken(SQLtinyParser.K_NULL, 0);
	};

	K_CURRENT_TIME() {
	    return this.getToken(SQLtinyParser.K_CURRENT_TIME, 0);
	};

	K_CURRENT_DATE() {
	    return this.getToken(SQLtinyParser.K_CURRENT_DATE, 0);
	};

	K_CURRENT_TIMESTAMP() {
	    return this.getToken(SQLtinyParser.K_CURRENT_TIMESTAMP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterLiteral_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitLiteral_value(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitLiteral_value(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Unary_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_unary_operator;
    }

	MINUS() {
	    return this.getToken(SQLtinyParser.MINUS, 0);
	};

	PLUS() {
	    return this.getToken(SQLtinyParser.PLUS, 0);
	};

	TILDE() {
	    return this.getToken(SQLtinyParser.TILDE, 0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterUnary_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitUnary_operator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitUnary_operator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Error_messageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_error_message;
    }

	STRING_LITERAL() {
	    return this.getToken(SQLtinyParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterError_message(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitError_message(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitError_message(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Module_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_module_argument;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	column_def() {
	    return this.getTypedRuleContext(Column_defContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterModule_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitModule_argument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitModule_argument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Column_aliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_column_alias;
    }

	IDENTIFIER() {
	    return this.getToken(SQLtinyParser.IDENTIFIER, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(SQLtinyParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterColumn_alias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitColumn_alias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitColumn_alias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_keyword;
    }

	K_ABORT() {
	    return this.getToken(SQLtinyParser.K_ABORT, 0);
	};

	K_ACTION() {
	    return this.getToken(SQLtinyParser.K_ACTION, 0);
	};

	K_ADD() {
	    return this.getToken(SQLtinyParser.K_ADD, 0);
	};

	K_AFTER() {
	    return this.getToken(SQLtinyParser.K_AFTER, 0);
	};

	K_ALL() {
	    return this.getToken(SQLtinyParser.K_ALL, 0);
	};

	K_ALTER() {
	    return this.getToken(SQLtinyParser.K_ALTER, 0);
	};

	K_ANALYZE() {
	    return this.getToken(SQLtinyParser.K_ANALYZE, 0);
	};

	K_AND() {
	    return this.getToken(SQLtinyParser.K_AND, 0);
	};

	K_AS() {
	    return this.getToken(SQLtinyParser.K_AS, 0);
	};

	K_ASC() {
	    return this.getToken(SQLtinyParser.K_ASC, 0);
	};

	K_ATTACH() {
	    return this.getToken(SQLtinyParser.K_ATTACH, 0);
	};

	K_AUTOINCREMENT() {
	    return this.getToken(SQLtinyParser.K_AUTOINCREMENT, 0);
	};

	K_BEFORE() {
	    return this.getToken(SQLtinyParser.K_BEFORE, 0);
	};

	K_BEGIN() {
	    return this.getToken(SQLtinyParser.K_BEGIN, 0);
	};

	K_BETWEEN() {
	    return this.getToken(SQLtinyParser.K_BETWEEN, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	K_CASCADE() {
	    return this.getToken(SQLtinyParser.K_CASCADE, 0);
	};

	K_CASE() {
	    return this.getToken(SQLtinyParser.K_CASE, 0);
	};

	K_CAST() {
	    return this.getToken(SQLtinyParser.K_CAST, 0);
	};

	K_CHECK() {
	    return this.getToken(SQLtinyParser.K_CHECK, 0);
	};

	K_COLLATE() {
	    return this.getToken(SQLtinyParser.K_COLLATE, 0);
	};

	K_COLUMN() {
	    return this.getToken(SQLtinyParser.K_COLUMN, 0);
	};

	K_COMMIT() {
	    return this.getToken(SQLtinyParser.K_COMMIT, 0);
	};

	K_CONFLICT() {
	    return this.getToken(SQLtinyParser.K_CONFLICT, 0);
	};

	K_CONSTRAINT() {
	    return this.getToken(SQLtinyParser.K_CONSTRAINT, 0);
	};

	K_CREATE() {
	    return this.getToken(SQLtinyParser.K_CREATE, 0);
	};

	K_CROSS() {
	    return this.getToken(SQLtinyParser.K_CROSS, 0);
	};

	K_CURRENT_DATE() {
	    return this.getToken(SQLtinyParser.K_CURRENT_DATE, 0);
	};

	K_CURRENT_TIME() {
	    return this.getToken(SQLtinyParser.K_CURRENT_TIME, 0);
	};

	K_CURRENT_TIMESTAMP() {
	    return this.getToken(SQLtinyParser.K_CURRENT_TIMESTAMP, 0);
	};

	K_DATABASE() {
	    return this.getToken(SQLtinyParser.K_DATABASE, 0);
	};

	K_DEFAULT() {
	    return this.getToken(SQLtinyParser.K_DEFAULT, 0);
	};

	K_DEFERRABLE() {
	    return this.getToken(SQLtinyParser.K_DEFERRABLE, 0);
	};

	K_DEFERRED() {
	    return this.getToken(SQLtinyParser.K_DEFERRED, 0);
	};

	K_DELETE() {
	    return this.getToken(SQLtinyParser.K_DELETE, 0);
	};

	K_DESC() {
	    return this.getToken(SQLtinyParser.K_DESC, 0);
	};

	K_DETACH() {
	    return this.getToken(SQLtinyParser.K_DETACH, 0);
	};

	K_DISTINCT() {
	    return this.getToken(SQLtinyParser.K_DISTINCT, 0);
	};

	K_DROP() {
	    return this.getToken(SQLtinyParser.K_DROP, 0);
	};

	K_EACH() {
	    return this.getToken(SQLtinyParser.K_EACH, 0);
	};

	K_ELSE() {
	    return this.getToken(SQLtinyParser.K_ELSE, 0);
	};

	K_END() {
	    return this.getToken(SQLtinyParser.K_END, 0);
	};

	K_ESCAPE() {
	    return this.getToken(SQLtinyParser.K_ESCAPE, 0);
	};

	K_EXCEPT() {
	    return this.getToken(SQLtinyParser.K_EXCEPT, 0);
	};

	K_EXCLUSIVE() {
	    return this.getToken(SQLtinyParser.K_EXCLUSIVE, 0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	K_EXPLAIN() {
	    return this.getToken(SQLtinyParser.K_EXPLAIN, 0);
	};

	K_FAIL() {
	    return this.getToken(SQLtinyParser.K_FAIL, 0);
	};

	K_FOR() {
	    return this.getToken(SQLtinyParser.K_FOR, 0);
	};

	K_FOREIGN() {
	    return this.getToken(SQLtinyParser.K_FOREIGN, 0);
	};

	K_FROM() {
	    return this.getToken(SQLtinyParser.K_FROM, 0);
	};

	K_FULL() {
	    return this.getToken(SQLtinyParser.K_FULL, 0);
	};

	K_GLOB() {
	    return this.getToken(SQLtinyParser.K_GLOB, 0);
	};

	K_GROUP() {
	    return this.getToken(SQLtinyParser.K_GROUP, 0);
	};

	K_HAVING() {
	    return this.getToken(SQLtinyParser.K_HAVING, 0);
	};

	K_IF() {
	    return this.getToken(SQLtinyParser.K_IF, 0);
	};

	K_IGNORE() {
	    return this.getToken(SQLtinyParser.K_IGNORE, 0);
	};

	K_IMMEDIATE() {
	    return this.getToken(SQLtinyParser.K_IMMEDIATE, 0);
	};

	K_IN() {
	    return this.getToken(SQLtinyParser.K_IN, 0);
	};

	K_INDEX() {
	    return this.getToken(SQLtinyParser.K_INDEX, 0);
	};

	K_INDEXED() {
	    return this.getToken(SQLtinyParser.K_INDEXED, 0);
	};

	K_INITIALLY() {
	    return this.getToken(SQLtinyParser.K_INITIALLY, 0);
	};

	K_INNER() {
	    return this.getToken(SQLtinyParser.K_INNER, 0);
	};

	K_INSERT() {
	    return this.getToken(SQLtinyParser.K_INSERT, 0);
	};

	K_INSTEAD() {
	    return this.getToken(SQLtinyParser.K_INSTEAD, 0);
	};

	K_INTERSECT() {
	    return this.getToken(SQLtinyParser.K_INTERSECT, 0);
	};

	K_INTO() {
	    return this.getToken(SQLtinyParser.K_INTO, 0);
	};

	K_IS() {
	    return this.getToken(SQLtinyParser.K_IS, 0);
	};

	K_ISNULL() {
	    return this.getToken(SQLtinyParser.K_ISNULL, 0);
	};

	K_JOIN() {
	    return this.getToken(SQLtinyParser.K_JOIN, 0);
	};

	K_KEY() {
	    return this.getToken(SQLtinyParser.K_KEY, 0);
	};

	K_LEFT() {
	    return this.getToken(SQLtinyParser.K_LEFT, 0);
	};

	K_LIKE() {
	    return this.getToken(SQLtinyParser.K_LIKE, 0);
	};

	K_LIMIT() {
	    return this.getToken(SQLtinyParser.K_LIMIT, 0);
	};

	K_MATCH() {
	    return this.getToken(SQLtinyParser.K_MATCH, 0);
	};

	K_NATURAL() {
	    return this.getToken(SQLtinyParser.K_NATURAL, 0);
	};

	K_NO() {
	    return this.getToken(SQLtinyParser.K_NO, 0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_NOTNULL() {
	    return this.getToken(SQLtinyParser.K_NOTNULL, 0);
	};

	K_NULL() {
	    return this.getToken(SQLtinyParser.K_NULL, 0);
	};

	K_OF() {
	    return this.getToken(SQLtinyParser.K_OF, 0);
	};

	K_OFFSET() {
	    return this.getToken(SQLtinyParser.K_OFFSET, 0);
	};

	K_ON() {
	    return this.getToken(SQLtinyParser.K_ON, 0);
	};

	K_OR() {
	    return this.getToken(SQLtinyParser.K_OR, 0);
	};

	K_ORDER() {
	    return this.getToken(SQLtinyParser.K_ORDER, 0);
	};

	K_OUTER() {
	    return this.getToken(SQLtinyParser.K_OUTER, 0);
	};

	K_PLAN() {
	    return this.getToken(SQLtinyParser.K_PLAN, 0);
	};

	K_PRAGMA() {
	    return this.getToken(SQLtinyParser.K_PRAGMA, 0);
	};

	K_PRIMARY() {
	    return this.getToken(SQLtinyParser.K_PRIMARY, 0);
	};

	K_QUERY() {
	    return this.getToken(SQLtinyParser.K_QUERY, 0);
	};

	K_RAISE() {
	    return this.getToken(SQLtinyParser.K_RAISE, 0);
	};

	K_RECURSIVE() {
	    return this.getToken(SQLtinyParser.K_RECURSIVE, 0);
	};

	K_REFERENCES() {
	    return this.getToken(SQLtinyParser.K_REFERENCES, 0);
	};

	K_REGEXP() {
	    return this.getToken(SQLtinyParser.K_REGEXP, 0);
	};

	K_REINDEX() {
	    return this.getToken(SQLtinyParser.K_REINDEX, 0);
	};

	K_RELEASE() {
	    return this.getToken(SQLtinyParser.K_RELEASE, 0);
	};

	K_RENAME() {
	    return this.getToken(SQLtinyParser.K_RENAME, 0);
	};

	K_REPLACE() {
	    return this.getToken(SQLtinyParser.K_REPLACE, 0);
	};

	K_RESTRICT() {
	    return this.getToken(SQLtinyParser.K_RESTRICT, 0);
	};

	K_RIGHT() {
	    return this.getToken(SQLtinyParser.K_RIGHT, 0);
	};

	K_ROLLBACK() {
	    return this.getToken(SQLtinyParser.K_ROLLBACK, 0);
	};

	K_ROW() {
	    return this.getToken(SQLtinyParser.K_ROW, 0);
	};

	K_SAVEPOINT() {
	    return this.getToken(SQLtinyParser.K_SAVEPOINT, 0);
	};

	K_SELECT() {
	    return this.getToken(SQLtinyParser.K_SELECT, 0);
	};

	K_SET() {
	    return this.getToken(SQLtinyParser.K_SET, 0);
	};

	K_TABLE() {
	    return this.getToken(SQLtinyParser.K_TABLE, 0);
	};

	K_TEMP() {
	    return this.getToken(SQLtinyParser.K_TEMP, 0);
	};

	K_TEMPORARY() {
	    return this.getToken(SQLtinyParser.K_TEMPORARY, 0);
	};

	K_THEN() {
	    return this.getToken(SQLtinyParser.K_THEN, 0);
	};

	K_TO() {
	    return this.getToken(SQLtinyParser.K_TO, 0);
	};

	K_TRANSACTION() {
	    return this.getToken(SQLtinyParser.K_TRANSACTION, 0);
	};

	K_TRIGGER() {
	    return this.getToken(SQLtinyParser.K_TRIGGER, 0);
	};

	K_UNION() {
	    return this.getToken(SQLtinyParser.K_UNION, 0);
	};

	K_UNIQUE() {
	    return this.getToken(SQLtinyParser.K_UNIQUE, 0);
	};

	K_UPDATE() {
	    return this.getToken(SQLtinyParser.K_UPDATE, 0);
	};

	K_USING() {
	    return this.getToken(SQLtinyParser.K_USING, 0);
	};

	K_VACUUM() {
	    return this.getToken(SQLtinyParser.K_VACUUM, 0);
	};

	K_VALUES() {
	    return this.getToken(SQLtinyParser.K_VALUES, 0);
	};

	K_VIEW() {
	    return this.getToken(SQLtinyParser.K_VIEW, 0);
	};

	K_VIRTUAL() {
	    return this.getToken(SQLtinyParser.K_VIRTUAL, 0);
	};

	K_WHEN() {
	    return this.getToken(SQLtinyParser.K_WHEN, 0);
	};

	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	K_WITH() {
	    return this.getToken(SQLtinyParser.K_WITH, 0);
	};

	K_WITHOUT() {
	    return this.getToken(SQLtinyParser.K_WITHOUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitKeyword(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Function_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_function_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterFunction_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitFunction_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitFunction_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Database_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_database_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterDatabase_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitDatabase_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitDatabase_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_table_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterTable_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitTable_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitTable_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_or_index_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_table_or_index_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterTable_or_index_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitTable_or_index_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitTable_or_index_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class New_table_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_new_table_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterNew_table_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitNew_table_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitNew_table_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Column_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_column_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterColumn_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitColumn_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitColumn_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Collation_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_collation_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCollation_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCollation_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitCollation_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Foreign_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_foreign_table;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterForeign_table(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitForeign_table(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitForeign_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Index_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_index_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterIndex_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitIndex_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitIndex_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Trigger_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_trigger_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterTrigger_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitTrigger_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitTrigger_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class View_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_view_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterView_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitView_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitView_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Module_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_module_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterModule_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitModule_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitModule_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Pragma_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_pragma_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterPragma_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitPragma_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitPragma_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Savepoint_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_savepoint_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSavepoint_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSavepoint_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitSavepoint_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_aliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_table_alias;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterTable_alias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitTable_alias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitTable_alias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Transaction_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_transaction_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterTransaction_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitTransaction_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitTransaction_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Any_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_any_name;
    }

	IDENTIFIER() {
	    return this.getToken(SQLtinyParser.IDENTIFIER, 0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(SQLtinyParser.STRING_LITERAL, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterAny_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitAny_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitAny_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




SQLtinyParser.ParseContext = ParseContext; 
SQLtinyParser.ErrorContext = ErrorContext; 
SQLtinyParser.Sql_stmt_listContext = Sql_stmt_listContext; 
SQLtinyParser.Sql_stmtContext = Sql_stmtContext; 
SQLtinyParser.Create_index_stmtContext = Create_index_stmtContext; 
SQLtinyParser.Create_table_stmtContext = Create_table_stmtContext; 
SQLtinyParser.Delete_stmtContext = Delete_stmtContext; 
SQLtinyParser.Delete_stmt_limitedContext = Delete_stmt_limitedContext; 
SQLtinyParser.Drop_index_stmtContext = Drop_index_stmtContext; 
SQLtinyParser.Drop_table_stmtContext = Drop_table_stmtContext; 
SQLtinyParser.Insert_stmtContext = Insert_stmtContext; 
SQLtinyParser.Simple_select_stmtContext = Simple_select_stmtContext; 
SQLtinyParser.Update_stmtContext = Update_stmtContext; 
SQLtinyParser.Update_stmt_limitedContext = Update_stmt_limitedContext; 
SQLtinyParser.Column_defContext = Column_defContext; 
SQLtinyParser.Type_nameContext = Type_nameContext; 
SQLtinyParser.Column_constraintContext = Column_constraintContext; 
SQLtinyParser.Conflict_clauseContext = Conflict_clauseContext; 
SQLtinyParser.ExprContext = ExprContext; 
SQLtinyParser.Foreign_key_clauseContext = Foreign_key_clauseContext; 
SQLtinyParser.Raise_functionContext = Raise_functionContext; 
SQLtinyParser.Indexed_columnContext = Indexed_columnContext; 
SQLtinyParser.Table_constraintContext = Table_constraintContext; 
SQLtinyParser.With_clauseContext = With_clauseContext; 
SQLtinyParser.Qualified_table_nameContext = Qualified_table_nameContext; 
SQLtinyParser.Ordering_termContext = Ordering_termContext; 
SQLtinyParser.Pragma_valueContext = Pragma_valueContext; 
SQLtinyParser.Common_table_expressionContext = Common_table_expressionContext; 
SQLtinyParser.Result_columnContext = Result_columnContext; 
SQLtinyParser.Table_or_subqueryContext = Table_or_subqueryContext; 
SQLtinyParser.Join_clauseContext = Join_clauseContext; 
SQLtinyParser.Join_operatorContext = Join_operatorContext; 
SQLtinyParser.Join_constraintContext = Join_constraintContext; 
SQLtinyParser.Select_coreContext = Select_coreContext; 
SQLtinyParser.Compound_operatorContext = Compound_operatorContext; 
SQLtinyParser.Cte_table_nameContext = Cte_table_nameContext; 
SQLtinyParser.Signed_numberContext = Signed_numberContext; 
SQLtinyParser.Literal_valueContext = Literal_valueContext; 
SQLtinyParser.Unary_operatorContext = Unary_operatorContext; 
SQLtinyParser.Error_messageContext = Error_messageContext; 
SQLtinyParser.Module_argumentContext = Module_argumentContext; 
SQLtinyParser.Column_aliasContext = Column_aliasContext; 
SQLtinyParser.KeywordContext = KeywordContext; 
SQLtinyParser.NameContext = NameContext; 
SQLtinyParser.Function_nameContext = Function_nameContext; 
SQLtinyParser.Database_nameContext = Database_nameContext; 
SQLtinyParser.Table_nameContext = Table_nameContext; 
SQLtinyParser.Table_or_index_nameContext = Table_or_index_nameContext; 
SQLtinyParser.New_table_nameContext = New_table_nameContext; 
SQLtinyParser.Column_nameContext = Column_nameContext; 
SQLtinyParser.Collation_nameContext = Collation_nameContext; 
SQLtinyParser.Foreign_tableContext = Foreign_tableContext; 
SQLtinyParser.Index_nameContext = Index_nameContext; 
SQLtinyParser.Trigger_nameContext = Trigger_nameContext; 
SQLtinyParser.View_nameContext = View_nameContext; 
SQLtinyParser.Module_nameContext = Module_nameContext; 
SQLtinyParser.Pragma_nameContext = Pragma_nameContext; 
SQLtinyParser.Savepoint_nameContext = Savepoint_nameContext; 
SQLtinyParser.Table_aliasContext = Table_aliasContext; 
SQLtinyParser.Transaction_nameContext = Transaction_nameContext; 
SQLtinyParser.Any_nameContext = Any_nameContext; 
