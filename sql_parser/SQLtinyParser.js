// Generated from SQLtiny.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';
import SQLtinyListener from './SQLtinyListener.js';
const serializedATN = [4,1,157,1732,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,1,0,1,0,5,0,167,8,0,10,0,12,0,170,
9,0,1,0,1,0,1,1,1,1,1,1,1,2,5,2,178,8,2,10,2,12,2,181,9,2,1,2,1,2,4,2,185,
8,2,11,2,12,2,186,1,2,5,2,190,8,2,10,2,12,2,193,9,2,1,2,5,2,196,8,2,10,2,
12,2,199,9,2,1,3,1,3,1,3,3,3,204,8,3,3,3,206,8,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,3,3,238,8,3,1,4,1,4,1,4,1,4,1,4,3,4,245,8,4,1,4,
1,4,1,4,1,4,1,4,1,4,3,4,253,8,4,1,4,3,4,256,8,4,1,5,1,5,1,5,1,5,1,5,1,5,
1,5,3,5,265,8,5,1,6,1,6,3,6,269,8,6,1,6,1,6,1,6,1,6,1,7,1,7,3,7,277,8,7,
1,7,1,7,3,7,281,8,7,3,7,283,8,7,1,8,1,8,1,8,3,8,288,8,8,3,8,290,8,8,1,9,
1,9,3,9,294,8,9,1,9,1,9,1,9,5,9,299,8,9,10,9,12,9,302,9,9,3,9,304,8,9,1,
9,1,9,1,9,3,9,309,8,9,1,9,1,9,3,9,313,8,9,1,9,4,9,316,8,9,11,9,12,9,317,
1,9,1,9,1,9,1,9,1,9,5,9,325,8,9,10,9,12,9,328,9,9,3,9,330,8,9,1,9,1,9,1,
9,1,9,3,9,336,8,9,3,9,338,8,9,1,10,1,10,3,10,342,8,10,1,10,1,10,1,10,1,10,
3,10,348,8,10,1,10,1,10,1,10,3,10,353,8,10,1,10,1,10,1,10,1,10,1,10,1,10,
1,10,5,10,362,8,10,10,10,12,10,365,9,10,1,10,1,10,1,10,3,10,370,8,10,1,11,
1,11,3,11,374,8,11,1,11,1,11,1,11,1,11,3,11,380,8,11,1,11,1,11,1,11,3,11,
385,8,11,1,11,1,11,1,11,1,11,1,11,5,11,392,8,11,10,11,12,11,395,9,11,1,11,
1,11,5,11,399,8,11,10,11,12,11,402,9,11,1,11,1,11,1,11,3,11,407,8,11,1,11,
1,11,3,11,411,8,11,1,12,1,12,3,12,415,8,12,1,12,1,12,1,12,1,12,3,12,421,
8,12,1,12,1,12,1,12,3,12,426,8,12,1,12,1,12,1,12,1,12,1,12,3,12,433,8,12,
1,12,1,12,1,12,1,12,1,12,1,12,1,12,5,12,442,8,12,10,12,12,12,445,9,12,3,
12,447,8,12,3,12,449,8,12,1,12,1,12,1,12,1,12,3,12,455,8,12,1,12,1,12,1,
12,1,12,3,12,461,8,12,1,12,1,12,3,12,465,8,12,1,12,1,12,1,12,1,12,1,12,3,
12,472,8,12,1,12,1,12,4,12,476,8,12,11,12,12,12,477,1,12,1,12,1,13,1,13,
3,13,484,8,13,1,13,1,13,1,13,1,13,3,13,490,8,13,1,13,1,13,1,13,3,13,495,
8,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,3,14,507,8,14,1,14,
1,14,1,14,3,14,512,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,5,14,521,8,14,
10,14,12,14,524,9,14,1,14,1,14,3,14,528,8,14,1,15,3,15,531,8,15,1,15,1,15,
1,15,1,15,1,15,3,15,538,8,15,1,16,3,16,541,8,16,1,16,1,16,1,16,1,16,1,16,
3,16,548,8,16,1,16,1,16,1,16,1,16,1,16,5,16,555,8,16,10,16,12,16,558,9,16,
3,16,560,8,16,1,16,1,16,1,16,1,16,3,16,566,8,16,3,16,568,8,16,1,17,1,17,
3,17,572,8,17,1,17,1,17,1,18,1,18,1,18,1,18,3,18,580,8,18,1,18,1,18,1,18,
3,18,585,8,18,1,18,1,18,1,19,1,19,1,19,1,19,3,19,593,8,19,1,19,1,19,1,19,
3,19,598,8,19,1,19,1,19,1,20,1,20,1,20,1,20,3,20,606,8,20,1,20,1,20,1,20,
3,20,611,8,20,1,20,1,20,1,21,1,21,1,21,1,21,3,21,619,8,21,1,21,1,21,1,21,
3,21,624,8,21,1,21,1,21,1,22,1,22,3,22,630,8,22,1,22,1,22,1,22,5,22,635,
8,22,10,22,12,22,638,9,22,3,22,640,8,22,1,22,1,22,1,22,1,22,5,22,646,8,22,
10,22,12,22,649,9,22,1,22,1,22,1,22,1,22,1,22,5,22,656,8,22,10,22,12,22,
659,9,22,3,22,661,8,22,1,22,1,22,1,22,1,22,3,22,667,8,22,3,22,669,8,22,1,
23,3,23,672,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
1,23,1,23,1,23,1,23,1,23,1,23,3,23,691,8,23,1,23,1,23,1,23,1,23,3,23,697,
8,23,1,23,1,23,1,23,1,23,1,23,5,23,704,8,23,10,23,12,23,707,9,23,1,23,1,
23,3,23,711,8,23,1,23,1,23,1,23,1,23,1,23,5,23,718,8,23,10,23,12,23,721,
9,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,729,8,23,10,23,12,23,732,9,23,1,
23,1,23,5,23,736,8,23,10,23,12,23,739,9,23,1,23,1,23,1,23,3,23,744,8,23,
1,24,1,24,1,24,1,24,3,24,750,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,
759,8,24,1,25,1,25,1,25,1,25,1,25,3,25,766,8,25,1,25,1,25,3,25,770,8,25,
3,25,772,8,25,1,26,1,26,3,26,776,8,26,1,26,1,26,1,27,1,27,1,27,3,27,783,
8,27,3,27,785,8,27,1,27,1,27,3,27,789,8,27,1,27,3,27,792,8,27,1,28,1,28,
1,28,1,29,1,29,3,29,799,8,29,1,29,1,29,1,29,5,29,804,8,29,10,29,12,29,807,
9,29,3,29,809,8,29,1,29,1,29,1,29,1,29,1,29,1,29,5,29,817,8,29,10,29,12,
29,820,9,29,3,29,822,8,29,1,29,1,29,1,29,1,29,3,29,828,8,29,3,29,830,8,29,
1,30,1,30,3,30,834,8,30,1,30,1,30,1,30,5,30,839,8,30,10,30,12,30,842,9,30,
3,30,844,8,30,1,30,1,30,1,30,1,30,5,30,850,8,30,10,30,12,30,853,9,30,1,30,
1,30,1,30,1,30,1,30,5,30,860,8,30,10,30,12,30,863,9,30,3,30,865,8,30,1,30,
1,30,1,30,1,30,3,30,871,8,30,3,30,873,8,30,1,31,1,31,3,31,877,8,31,1,31,
1,31,1,31,5,31,882,8,31,10,31,12,31,885,9,31,1,31,1,31,1,31,1,31,5,31,891,
8,31,10,31,12,31,894,9,31,1,31,3,31,897,8,31,3,31,899,8,31,1,31,1,31,3,31,
903,8,31,1,31,1,31,1,31,1,31,1,31,5,31,910,8,31,10,31,12,31,913,9,31,1,31,
1,31,3,31,917,8,31,3,31,919,8,31,1,31,1,31,1,31,1,31,1,31,5,31,926,8,31,
10,31,12,31,929,9,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,937,8,31,10,31,12,
31,940,9,31,1,31,1,31,5,31,944,8,31,10,31,12,31,947,9,31,3,31,949,8,31,1,
32,3,32,952,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
3,32,965,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,977,
8,32,10,32,12,32,980,9,32,1,32,1,32,3,32,984,8,32,1,33,3,33,987,8,33,1,33,
1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,1000,8,33,1,33,1,
33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,5,33,1012,8,33,10,33,12,33,1015,
9,33,1,33,1,33,3,33,1019,8,33,1,33,1,33,1,33,1,33,1,33,5,33,1026,8,33,10,
33,12,33,1029,9,33,3,33,1031,8,33,1,33,1,33,1,33,1,33,3,33,1037,8,33,3,33,
1039,8,33,1,34,1,34,1,35,1,35,3,35,1045,8,35,1,35,5,35,1048,8,35,10,35,12,
35,1051,9,35,1,36,4,36,1054,8,36,11,36,12,36,1055,1,36,1,36,1,36,1,36,1,
36,1,36,1,36,1,36,1,36,1,36,3,36,1068,8,36,1,37,1,37,3,37,1072,8,37,1,37,
1,37,1,37,3,37,1077,8,37,1,37,1,37,3,37,1081,8,37,1,37,3,37,1084,8,37,1,
37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
1,37,3,37,1102,8,37,1,37,1,37,1,37,3,37,1107,8,37,1,38,1,38,1,38,3,38,1112,
8,38,1,39,1,39,1,39,1,39,1,39,1,39,3,39,1120,8,39,1,39,1,39,1,39,3,39,1125,
8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,1134,8,39,1,39,1,39,1,39,5,
39,1139,8,39,10,39,12,39,1142,9,39,1,39,3,39,1145,8,39,1,39,1,39,1,39,1,
39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,1161,8,39,1,39,
3,39,1164,8,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,1172,8,39,1,39,1,39,1,
39,1,39,1,39,4,39,1179,8,39,11,39,12,39,1180,1,39,1,39,3,39,1185,8,39,1,
39,1,39,1,39,3,39,1190,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
39,1,39,1,39,1,39,1,39,3,39,1220,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
1,39,1,39,1,39,3,39,1232,8,39,1,39,1,39,1,39,3,39,1237,8,39,1,39,1,39,1,
39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,1249,8,39,1,39,1,39,1,39,1,39,
3,39,1255,8,39,1,39,1,39,1,39,1,39,1,39,3,39,1262,8,39,1,39,1,39,3,39,1266,
8,39,1,39,1,39,1,39,1,39,1,39,1,39,5,39,1274,8,39,10,39,12,39,1277,9,39,
3,39,1279,8,39,1,39,1,39,1,39,1,39,3,39,1285,8,39,1,39,3,39,1288,8,39,5,
39,1290,8,39,10,39,12,39,1293,9,39,1,40,1,40,1,40,1,40,1,40,1,40,5,40,1301,
8,40,10,40,12,40,1304,9,40,1,40,1,40,3,40,1308,8,40,1,40,1,40,1,40,1,40,
1,40,1,40,1,40,1,40,1,40,1,40,3,40,1320,8,40,1,40,1,40,3,40,1324,8,40,5,
40,1326,8,40,10,40,12,40,1329,9,40,1,40,3,40,1332,8,40,1,40,1,40,1,40,1,
40,1,40,3,40,1339,8,40,3,40,1341,8,40,1,41,1,41,1,41,1,41,1,41,1,41,3,41,
1349,8,41,1,41,1,41,1,42,1,42,1,42,3,42,1356,8,42,1,42,3,42,1359,8,42,1,
43,1,43,3,43,1363,8,43,1,43,1,43,1,43,3,43,1368,8,43,1,43,1,43,1,43,1,43,
5,43,1374,8,43,10,43,12,43,1377,9,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
1,43,1,43,1,43,1,43,1,43,1,43,1,43,5,43,1393,8,43,10,43,12,43,1396,9,43,
1,43,1,43,1,43,3,43,1401,8,43,1,44,1,44,3,44,1405,8,44,1,44,1,44,1,44,1,
44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,1419,8,44,10,44,12,44,1422,
9,44,1,45,1,45,1,45,3,45,1427,8,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,1435,
8,45,1,46,1,46,1,46,3,46,1440,8,46,1,46,3,46,1443,8,46,1,47,1,47,1,47,3,
47,1448,8,47,1,48,1,48,1,48,1,48,1,48,5,48,1455,8,48,10,48,12,48,1458,9,
48,1,48,1,48,3,48,1462,8,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,
1,49,1,49,1,49,3,49,1476,8,49,1,49,3,49,1479,8,49,3,49,1481,8,49,1,50,1,
50,1,50,3,50,1486,8,50,1,50,1,50,3,50,1490,8,50,1,50,3,50,1493,8,50,1,50,
1,50,1,50,1,50,1,50,3,50,1500,8,50,1,50,1,50,1,50,1,50,5,50,1506,8,50,10,
50,12,50,1509,9,50,1,50,3,50,1512,8,50,1,50,1,50,3,50,1516,8,50,1,50,3,50,
1519,8,50,1,50,1,50,1,50,1,50,3,50,1525,8,50,1,50,3,50,1528,8,50,3,50,1530,
8,50,1,51,1,51,1,51,1,51,1,51,5,51,1537,8,51,10,51,12,51,1540,9,51,1,52,
1,52,3,52,1544,8,52,1,52,1,52,3,52,1548,8,52,1,52,1,52,3,52,1552,8,52,1,
52,3,52,1555,8,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,5,53,1564,8,53,10,53,
12,53,1567,9,53,1,53,1,53,3,53,1571,8,53,1,54,1,54,3,54,1575,8,54,1,54,1,
54,1,54,5,54,1580,8,54,10,54,12,54,1583,9,54,1,54,1,54,1,54,1,54,5,54,1589,
8,54,10,54,12,54,1592,9,54,1,54,3,54,1595,8,54,3,54,1597,8,54,1,54,1,54,
3,54,1601,8,54,1,54,1,54,1,54,1,54,1,54,5,54,1608,8,54,10,54,12,54,1611,
9,54,1,54,1,54,3,54,1615,8,54,3,54,1617,8,54,1,54,1,54,1,54,1,54,1,54,5,
54,1624,8,54,10,54,12,54,1627,9,54,1,54,1,54,1,54,1,54,1,54,1,54,5,54,1635,
8,54,10,54,12,54,1638,9,54,1,54,1,54,5,54,1642,8,54,10,54,12,54,1645,9,54,
3,54,1647,8,54,1,55,1,55,1,55,1,55,1,55,3,55,1654,8,55,1,56,1,56,1,56,1,
56,1,56,5,56,1661,8,56,10,56,12,56,1664,9,56,1,56,1,56,3,56,1668,8,56,1,
57,3,57,1671,8,57,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,3,61,
1683,8,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,
68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,
1,75,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,81,1,
81,1,81,1,81,1,81,3,81,1730,8,81,1,81,0,1,78,82,0,2,4,6,8,10,12,14,16,18,
20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
148,150,152,154,156,158,160,162,0,18,3,0,58,58,69,69,82,82,2,0,47,47,66,
66,2,0,5,5,106,106,1,0,131,132,2,0,29,29,62,62,2,0,34,34,60,60,5,0,25,25,
72,72,81,81,122,122,125,125,2,0,7,7,12,13,1,0,8,9,1,0,14,17,1,0,18,21,4,
0,77,77,97,97,99,99,118,118,2,0,59,59,139,139,3,0,25,25,72,72,125,125,4,
0,52,54,104,104,150,150,152,153,2,0,8,10,102,102,2,0,149,149,152,152,1,0,
25,148,2001,0,168,1,0,0,0,2,173,1,0,0,0,4,179,1,0,0,0,6,205,1,0,0,0,8,239,
1,0,0,0,10,257,1,0,0,0,12,266,1,0,0,0,14,274,1,0,0,0,16,284,1,0,0,0,18,303,
1,0,0,0,20,339,1,0,0,0,22,371,1,0,0,0,24,412,1,0,0,0,26,481,1,0,0,0,28,500,
1,0,0,0,30,530,1,0,0,0,32,540,1,0,0,0,34,569,1,0,0,0,36,575,1,0,0,0,38,588,
1,0,0,0,40,601,1,0,0,0,42,614,1,0,0,0,44,639,1,0,0,0,46,671,1,0,0,0,48,745,
1,0,0,0,50,760,1,0,0,0,52,773,1,0,0,0,54,779,1,0,0,0,56,793,1,0,0,0,58,808,
1,0,0,0,60,843,1,0,0,0,62,948,1,0,0,0,64,951,1,0,0,0,66,986,1,0,0,0,68,1040,
1,0,0,0,70,1042,1,0,0,0,72,1053,1,0,0,0,74,1071,1,0,0,0,76,1111,1,0,0,0,
78,1189,1,0,0,0,80,1294,1,0,0,0,82,1342,1,0,0,0,84,1352,1,0,0,0,86,1362,
1,0,0,0,88,1402,1,0,0,0,90,1426,1,0,0,0,92,1436,1,0,0,0,94,1447,1,0,0,0,
96,1449,1,0,0,0,98,1480,1,0,0,0,100,1529,1,0,0,0,102,1531,1,0,0,0,104,1554,
1,0,0,0,106,1570,1,0,0,0,108,1646,1,0,0,0,110,1653,1,0,0,0,112,1655,1,0,
0,0,114,1670,1,0,0,0,116,1674,1,0,0,0,118,1676,1,0,0,0,120,1678,1,0,0,0,
122,1682,1,0,0,0,124,1684,1,0,0,0,126,1686,1,0,0,0,128,1688,1,0,0,0,130,
1690,1,0,0,0,132,1692,1,0,0,0,134,1694,1,0,0,0,136,1696,1,0,0,0,138,1698,
1,0,0,0,140,1700,1,0,0,0,142,1702,1,0,0,0,144,1704,1,0,0,0,146,1706,1,0,
0,0,148,1708,1,0,0,0,150,1710,1,0,0,0,152,1712,1,0,0,0,154,1714,1,0,0,0,
156,1716,1,0,0,0,158,1718,1,0,0,0,160,1720,1,0,0,0,162,1729,1,0,0,0,164,
167,3,4,2,0,165,167,3,2,1,0,166,164,1,0,0,0,166,165,1,0,0,0,167,170,1,0,
0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,171,1,0,0,0,170,168,1,0,0,0,171,
172,5,0,0,1,172,1,1,0,0,0,173,174,5,157,0,0,174,175,6,1,-1,0,175,3,1,0,0,
0,176,178,5,1,0,0,177,176,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,
1,0,0,0,180,182,1,0,0,0,181,179,1,0,0,0,182,191,3,6,3,0,183,185,5,1,0,0,
184,183,1,0,0,0,185,186,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,188,
1,0,0,0,188,190,3,6,3,0,189,184,1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,
191,192,1,0,0,0,192,197,1,0,0,0,193,191,1,0,0,0,194,196,5,1,0,0,195,194,
1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,5,1,0,0,0,199,
197,1,0,0,0,200,203,5,71,0,0,201,202,5,114,0,0,202,204,5,111,0,0,203,201,
1,0,0,0,203,204,1,0,0,0,204,206,1,0,0,0,205,200,1,0,0,0,205,206,1,0,0,0,
206,237,1,0,0,0,207,238,3,8,4,0,208,238,3,10,5,0,209,238,3,12,6,0,210,238,
3,14,7,0,211,238,3,16,8,0,212,238,3,18,9,0,213,238,3,20,10,0,214,238,3,22,
11,0,215,238,3,24,12,0,216,238,3,26,13,0,217,238,3,28,14,0,218,238,3,30,
15,0,219,238,3,32,16,0,220,238,3,34,17,0,221,238,3,36,18,0,222,238,3,38,
19,0,223,238,3,40,20,0,224,238,3,42,21,0,225,238,3,44,22,0,226,238,3,46,
23,0,227,238,3,48,24,0,228,238,3,50,25,0,229,238,3,52,26,0,230,238,3,54,
27,0,231,238,3,56,28,0,232,238,3,58,29,0,233,238,3,60,30,0,234,238,3,64,
32,0,235,238,3,66,33,0,236,238,3,68,34,0,237,207,1,0,0,0,237,208,1,0,0,0,
237,209,1,0,0,0,237,210,1,0,0,0,237,211,1,0,0,0,237,212,1,0,0,0,237,213,
1,0,0,0,237,214,1,0,0,0,237,215,1,0,0,0,237,216,1,0,0,0,237,217,1,0,0,0,
237,218,1,0,0,0,237,219,1,0,0,0,237,220,1,0,0,0,237,221,1,0,0,0,237,222,
1,0,0,0,237,223,1,0,0,0,237,224,1,0,0,0,237,225,1,0,0,0,237,226,1,0,0,0,
237,227,1,0,0,0,237,228,1,0,0,0,237,229,1,0,0,0,237,230,1,0,0,0,237,231,
1,0,0,0,237,232,1,0,0,0,237,233,1,0,0,0,237,234,1,0,0,0,237,235,1,0,0,0,
237,236,1,0,0,0,238,7,1,0,0,0,239,240,5,30,0,0,240,244,5,130,0,0,241,242,
3,132,66,0,242,243,5,2,0,0,243,245,1,0,0,0,244,241,1,0,0,0,244,245,1,0,0,
0,245,246,1,0,0,0,246,255,3,134,67,0,247,248,5,121,0,0,248,249,5,134,0,0,
249,256,3,138,69,0,250,252,5,27,0,0,251,253,5,46,0,0,252,251,1,0,0,0,252,
253,1,0,0,0,253,254,1,0,0,0,254,256,3,70,35,0,255,247,1,0,0,0,255,250,1,
0,0,0,256,9,1,0,0,0,257,264,5,31,0,0,258,265,3,132,66,0,259,265,3,136,68,
0,260,261,3,132,66,0,261,262,5,2,0,0,262,263,3,136,68,0,263,265,1,0,0,0,
264,258,1,0,0,0,264,259,1,0,0,0,264,260,1,0,0,0,264,265,1,0,0,0,265,11,1,
0,0,0,266,268,5,35,0,0,267,269,5,55,0,0,268,267,1,0,0,0,268,269,1,0,0,0,
269,270,1,0,0,0,270,271,3,78,39,0,271,272,5,33,0,0,272,273,3,132,66,0,273,
13,1,0,0,0,274,276,5,38,0,0,275,277,7,0,0,0,276,275,1,0,0,0,276,277,1,0,
0,0,277,282,1,0,0,0,278,280,5,135,0,0,279,281,3,160,80,0,280,279,1,0,0,0,
280,281,1,0,0,0,281,283,1,0,0,0,282,278,1,0,0,0,282,283,1,0,0,0,283,15,1,
0,0,0,284,289,7,1,0,0,285,287,5,135,0,0,286,288,3,160,80,0,287,286,1,0,0,
0,287,288,1,0,0,0,288,290,1,0,0,0,289,285,1,0,0,0,289,290,1,0,0,0,290,17,
1,0,0,0,291,293,5,147,0,0,292,294,5,116,0,0,293,292,1,0,0,0,293,294,1,0,
0,0,294,295,1,0,0,0,295,300,3,96,48,0,296,297,5,5,0,0,297,299,3,96,48,0,
298,296,1,0,0,0,299,302,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,304,
1,0,0,0,302,300,1,0,0,0,303,291,1,0,0,0,303,304,1,0,0,0,304,305,1,0,0,0,
305,315,3,108,54,0,306,308,5,137,0,0,307,309,5,29,0,0,308,307,1,0,0,0,308,
309,1,0,0,0,309,313,1,0,0,0,310,313,5,90,0,0,311,313,5,68,0,0,312,306,1,
0,0,0,312,310,1,0,0,0,312,311,1,0,0,0,313,314,1,0,0,0,314,316,3,108,54,0,
315,312,1,0,0,0,316,317,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,329,
1,0,0,0,319,320,5,109,0,0,320,321,5,40,0,0,321,326,3,92,46,0,322,323,5,5,
0,0,323,325,3,92,46,0,324,322,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,326,
327,1,0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,329,319,1,0,0,0,329,330,1,0,
0,0,330,337,1,0,0,0,331,332,5,98,0,0,332,335,3,78,39,0,333,334,7,2,0,0,334,
336,3,78,39,0,335,333,1,0,0,0,335,336,1,0,0,0,336,338,1,0,0,0,337,331,1,
0,0,0,337,338,1,0,0,0,338,19,1,0,0,0,339,341,5,50,0,0,340,342,5,138,0,0,
341,340,1,0,0,0,341,342,1,0,0,0,342,343,1,0,0,0,343,347,5,84,0,0,344,345,
5,80,0,0,345,346,5,102,0,0,346,348,5,70,0,0,347,344,1,0,0,0,347,348,1,0,
0,0,348,352,1,0,0,0,349,350,3,132,66,0,350,351,5,2,0,0,351,353,1,0,0,0,352,
349,1,0,0,0,352,353,1,0,0,0,353,354,1,0,0,0,354,355,3,146,73,0,355,356,5,
107,0,0,356,357,3,134,67,0,357,358,5,3,0,0,358,363,3,84,42,0,359,360,5,5,
0,0,360,362,3,84,42,0,361,359,1,0,0,0,362,365,1,0,0,0,363,361,1,0,0,0,363,
364,1,0,0,0,364,366,1,0,0,0,365,363,1,0,0,0,366,369,5,4,0,0,367,368,5,146,
0,0,368,370,3,78,39,0,369,367,1,0,0,0,369,370,1,0,0,0,370,21,1,0,0,0,371,
373,5,50,0,0,372,374,7,3,0,0,373,372,1,0,0,0,373,374,1,0,0,0,374,375,1,0,
0,0,375,379,5,130,0,0,376,377,5,80,0,0,377,378,5,102,0,0,378,380,5,70,0,
0,379,376,1,0,0,0,379,380,1,0,0,0,380,384,1,0,0,0,381,382,3,132,66,0,382,
383,5,2,0,0,383,385,1,0,0,0,384,381,1,0,0,0,384,385,1,0,0,0,385,386,1,0,
0,0,386,410,3,134,67,0,387,388,5,3,0,0,388,393,3,70,35,0,389,390,5,5,0,0,
390,392,3,70,35,0,391,389,1,0,0,0,392,395,1,0,0,0,393,391,1,0,0,0,393,394,
1,0,0,0,394,400,1,0,0,0,395,393,1,0,0,0,396,397,5,5,0,0,397,399,3,86,43,
0,398,396,1,0,0,0,399,402,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,403,
1,0,0,0,402,400,1,0,0,0,403,406,5,4,0,0,404,405,5,148,0,0,405,407,5,149,
0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,411,1,0,0,0,408,409,5,33,0,0,409,
411,3,60,30,0,410,387,1,0,0,0,410,408,1,0,0,0,411,23,1,0,0,0,412,414,5,50,
0,0,413,415,7,3,0,0,414,413,1,0,0,0,414,415,1,0,0,0,415,416,1,0,0,0,416,
420,5,136,0,0,417,418,5,80,0,0,418,419,5,102,0,0,419,421,5,70,0,0,420,417,
1,0,0,0,420,421,1,0,0,0,421,425,1,0,0,0,422,423,3,132,66,0,423,424,5,2,0,
0,424,426,1,0,0,0,425,422,1,0,0,0,425,426,1,0,0,0,426,427,1,0,0,0,427,432,
3,148,74,0,428,433,5,37,0,0,429,433,5,28,0,0,430,431,5,89,0,0,431,433,5,
105,0,0,432,428,1,0,0,0,432,429,1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,
433,448,1,0,0,0,434,449,5,59,0,0,435,449,5,88,0,0,436,446,5,139,0,0,437,
438,5,105,0,0,438,443,3,140,70,0,439,440,5,5,0,0,440,442,3,140,70,0,441,
439,1,0,0,0,442,445,1,0,0,0,443,441,1,0,0,0,443,444,1,0,0,0,444,447,1,0,
0,0,445,443,1,0,0,0,446,437,1,0,0,0,446,447,1,0,0,0,447,449,1,0,0,0,448,
434,1,0,0,0,448,435,1,0,0,0,448,436,1,0,0,0,449,450,1,0,0,0,450,454,5,107,
0,0,451,452,3,132,66,0,452,453,5,2,0,0,453,455,1,0,0,0,454,451,1,0,0,0,454,
455,1,0,0,0,455,456,1,0,0,0,456,460,3,134,67,0,457,458,5,73,0,0,458,459,
5,64,0,0,459,461,5,126,0,0,460,457,1,0,0,0,460,461,1,0,0,0,461,464,1,0,0,
0,462,463,5,145,0,0,463,465,3,78,39,0,464,462,1,0,0,0,464,465,1,0,0,0,465,
466,1,0,0,0,466,475,5,38,0,0,467,472,3,64,32,0,468,472,3,46,23,0,469,472,
3,30,15,0,470,472,3,60,30,0,471,467,1,0,0,0,471,468,1,0,0,0,471,469,1,0,
0,0,471,470,1,0,0,0,472,473,1,0,0,0,473,474,5,1,0,0,474,476,1,0,0,0,475,
471,1,0,0,0,476,477,1,0,0,0,477,475,1,0,0,0,477,478,1,0,0,0,478,479,1,0,
0,0,479,480,5,66,0,0,480,25,1,0,0,0,481,483,5,50,0,0,482,484,7,3,0,0,483,
482,1,0,0,0,483,484,1,0,0,0,484,485,1,0,0,0,485,489,5,143,0,0,486,487,5,
80,0,0,487,488,5,102,0,0,488,490,5,70,0,0,489,486,1,0,0,0,489,490,1,0,0,
0,490,494,1,0,0,0,491,492,3,132,66,0,492,493,5,2,0,0,493,495,1,0,0,0,494,
491,1,0,0,0,494,495,1,0,0,0,495,496,1,0,0,0,496,497,3,150,75,0,497,498,5,
33,0,0,498,499,3,60,30,0,499,27,1,0,0,0,500,501,5,50,0,0,501,502,5,144,0,
0,502,506,5,130,0,0,503,504,5,80,0,0,504,505,5,102,0,0,505,507,5,70,0,0,
506,503,1,0,0,0,506,507,1,0,0,0,507,511,1,0,0,0,508,509,3,132,66,0,509,510,
5,2,0,0,510,512,1,0,0,0,511,508,1,0,0,0,511,512,1,0,0,0,512,513,1,0,0,0,
513,514,3,134,67,0,514,515,5,140,0,0,515,527,3,152,76,0,516,517,5,3,0,0,
517,522,3,122,61,0,518,519,5,5,0,0,519,521,3,122,61,0,520,518,1,0,0,0,521,
524,1,0,0,0,522,520,1,0,0,0,522,523,1,0,0,0,523,525,1,0,0,0,524,522,1,0,
0,0,525,526,5,4,0,0,526,528,1,0,0,0,527,516,1,0,0,0,527,528,1,0,0,0,528,
29,1,0,0,0,529,531,3,88,44,0,530,529,1,0,0,0,530,531,1,0,0,0,531,532,1,0,
0,0,532,533,5,59,0,0,533,534,5,75,0,0,534,537,3,90,45,0,535,536,5,146,0,
0,536,538,3,78,39,0,537,535,1,0,0,0,537,538,1,0,0,0,538,31,1,0,0,0,539,541,
3,88,44,0,540,539,1,0,0,0,540,541,1,0,0,0,541,542,1,0,0,0,542,543,5,59,0,
0,543,544,5,75,0,0,544,547,3,90,45,0,545,546,5,146,0,0,546,548,3,78,39,0,
547,545,1,0,0,0,547,548,1,0,0,0,548,567,1,0,0,0,549,550,5,109,0,0,550,551,
5,40,0,0,551,556,3,92,46,0,552,553,5,5,0,0,553,555,3,92,46,0,554,552,1,0,
0,0,555,558,1,0,0,0,556,554,1,0,0,0,556,557,1,0,0,0,557,560,1,0,0,0,558,
556,1,0,0,0,559,549,1,0,0,0,559,560,1,0,0,0,560,561,1,0,0,0,561,562,5,98,
0,0,562,565,3,78,39,0,563,564,7,2,0,0,564,566,3,78,39,0,565,563,1,0,0,0,
565,566,1,0,0,0,566,568,1,0,0,0,567,559,1,0,0,0,567,568,1,0,0,0,568,33,1,
0,0,0,569,571,5,61,0,0,570,572,5,55,0,0,571,570,1,0,0,0,571,572,1,0,0,0,
572,573,1,0,0,0,573,574,3,132,66,0,574,35,1,0,0,0,575,576,5,63,0,0,576,579,
5,84,0,0,577,578,5,80,0,0,578,580,5,70,0,0,579,577,1,0,0,0,579,580,1,0,0,
0,580,584,1,0,0,0,581,582,3,132,66,0,582,583,5,2,0,0,583,585,1,0,0,0,584,
581,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,587,3,146,73,0,587,37,1,
0,0,0,588,589,5,63,0,0,589,592,5,130,0,0,590,591,5,80,0,0,591,593,5,70,0,
0,592,590,1,0,0,0,592,593,1,0,0,0,593,597,1,0,0,0,594,595,3,132,66,0,595,
596,5,2,0,0,596,598,1,0,0,0,597,594,1,0,0,0,597,598,1,0,0,0,598,599,1,0,
0,0,599,600,3,134,67,0,600,39,1,0,0,0,601,602,5,63,0,0,602,605,5,136,0,0,
603,604,5,80,0,0,604,606,5,70,0,0,605,603,1,0,0,0,605,606,1,0,0,0,606,610,
1,0,0,0,607,608,3,132,66,0,608,609,5,2,0,0,609,611,1,0,0,0,610,607,1,0,0,
0,610,611,1,0,0,0,611,612,1,0,0,0,612,613,3,148,74,0,613,41,1,0,0,0,614,
615,5,63,0,0,615,618,5,143,0,0,616,617,5,80,0,0,617,619,5,70,0,0,618,616,
1,0,0,0,618,619,1,0,0,0,619,623,1,0,0,0,620,621,3,132,66,0,621,622,5,2,0,
0,622,624,1,0,0,0,623,620,1,0,0,0,623,624,1,0,0,0,624,625,1,0,0,0,625,626,
3,150,75,0,626,43,1,0,0,0,627,629,5,147,0,0,628,630,5,116,0,0,629,628,1,
0,0,0,629,630,1,0,0,0,630,631,1,0,0,0,631,636,3,96,48,0,632,633,5,5,0,0,
633,635,3,96,48,0,634,632,1,0,0,0,635,638,1,0,0,0,636,634,1,0,0,0,636,637,
1,0,0,0,637,640,1,0,0,0,638,636,1,0,0,0,639,627,1,0,0,0,639,640,1,0,0,0,
640,641,1,0,0,0,641,647,3,108,54,0,642,643,3,110,55,0,643,644,3,108,54,0,
644,646,1,0,0,0,645,642,1,0,0,0,646,649,1,0,0,0,647,645,1,0,0,0,647,648,
1,0,0,0,648,660,1,0,0,0,649,647,1,0,0,0,650,651,5,109,0,0,651,652,5,40,0,
0,652,657,3,92,46,0,653,654,5,5,0,0,654,656,3,92,46,0,655,653,1,0,0,0,656,
659,1,0,0,0,657,655,1,0,0,0,657,658,1,0,0,0,658,661,1,0,0,0,659,657,1,0,
0,0,660,650,1,0,0,0,660,661,1,0,0,0,661,668,1,0,0,0,662,663,5,98,0,0,663,
666,3,78,39,0,664,665,7,2,0,0,665,667,3,78,39,0,666,664,1,0,0,0,666,667,
1,0,0,0,667,669,1,0,0,0,668,662,1,0,0,0,668,669,1,0,0,0,669,45,1,0,0,0,670,
672,3,88,44,0,671,670,1,0,0,0,671,672,1,0,0,0,672,690,1,0,0,0,673,691,5,
88,0,0,674,691,5,122,0,0,675,676,5,88,0,0,676,677,5,108,0,0,677,691,5,122,
0,0,678,679,5,88,0,0,679,680,5,108,0,0,680,691,5,125,0,0,681,682,5,88,0,
0,682,683,5,108,0,0,683,691,5,25,0,0,684,685,5,88,0,0,685,686,5,108,0,0,
686,691,5,72,0,0,687,688,5,88,0,0,688,689,5,108,0,0,689,691,5,81,0,0,690,
673,1,0,0,0,690,674,1,0,0,0,690,675,1,0,0,0,690,678,1,0,0,0,690,681,1,0,
0,0,690,684,1,0,0,0,690,687,1,0,0,0,691,692,1,0,0,0,692,696,5,91,0,0,693,
694,3,132,66,0,694,695,5,2,0,0,695,697,1,0,0,0,696,693,1,0,0,0,696,697,1,
0,0,0,697,698,1,0,0,0,698,710,3,134,67,0,699,700,5,3,0,0,700,705,3,140,70,
0,701,702,5,5,0,0,702,704,3,140,70,0,703,701,1,0,0,0,704,707,1,0,0,0,705,
703,1,0,0,0,705,706,1,0,0,0,706,708,1,0,0,0,707,705,1,0,0,0,708,709,5,4,
0,0,709,711,1,0,0,0,710,699,1,0,0,0,710,711,1,0,0,0,711,743,1,0,0,0,712,
713,5,142,0,0,713,714,5,3,0,0,714,719,3,78,39,0,715,716,5,5,0,0,716,718,
3,78,39,0,717,715,1,0,0,0,718,721,1,0,0,0,719,717,1,0,0,0,719,720,1,0,0,
0,720,722,1,0,0,0,721,719,1,0,0,0,722,737,5,4,0,0,723,724,5,5,0,0,724,725,
5,3,0,0,725,730,3,78,39,0,726,727,5,5,0,0,727,729,3,78,39,0,728,726,1,0,
0,0,729,732,1,0,0,0,730,728,1,0,0,0,730,731,1,0,0,0,731,733,1,0,0,0,732,
730,1,0,0,0,733,734,5,4,0,0,734,736,1,0,0,0,735,723,1,0,0,0,736,739,1,0,
0,0,737,735,1,0,0,0,737,738,1,0,0,0,738,744,1,0,0,0,739,737,1,0,0,0,740,
744,3,60,30,0,741,742,5,56,0,0,742,744,5,142,0,0,743,712,1,0,0,0,743,740,
1,0,0,0,743,741,1,0,0,0,744,47,1,0,0,0,745,749,5,112,0,0,746,747,3,132,66,
0,747,748,5,2,0,0,748,750,1,0,0,0,749,746,1,0,0,0,749,750,1,0,0,0,750,751,
1,0,0,0,751,758,3,154,77,0,752,753,5,6,0,0,753,759,3,94,47,0,754,755,5,3,
0,0,755,756,3,94,47,0,756,757,5,4,0,0,757,759,1,0,0,0,758,752,1,0,0,0,758,
754,1,0,0,0,758,759,1,0,0,0,759,49,1,0,0,0,760,771,5,119,0,0,761,772,3,142,
71,0,762,763,3,132,66,0,763,764,5,2,0,0,764,766,1,0,0,0,765,762,1,0,0,0,
765,766,1,0,0,0,766,769,1,0,0,0,767,770,3,134,67,0,768,770,3,146,73,0,769,
767,1,0,0,0,769,768,1,0,0,0,770,772,1,0,0,0,771,761,1,0,0,0,771,765,1,0,
0,0,771,772,1,0,0,0,772,51,1,0,0,0,773,775,5,120,0,0,774,776,5,127,0,0,775,
774,1,0,0,0,775,776,1,0,0,0,776,777,1,0,0,0,777,778,3,156,78,0,778,53,1,
0,0,0,779,784,5,125,0,0,780,782,5,135,0,0,781,783,3,160,80,0,782,781,1,0,
0,0,782,783,1,0,0,0,783,785,1,0,0,0,784,780,1,0,0,0,784,785,1,0,0,0,785,
791,1,0,0,0,786,788,5,134,0,0,787,789,5,127,0,0,788,787,1,0,0,0,788,789,
1,0,0,0,789,790,1,0,0,0,790,792,3,156,78,0,791,786,1,0,0,0,791,792,1,0,0,
0,792,55,1,0,0,0,793,794,5,127,0,0,794,795,3,156,78,0,795,57,1,0,0,0,796,
798,5,147,0,0,797,799,5,116,0,0,798,797,1,0,0,0,798,799,1,0,0,0,799,800,
1,0,0,0,800,805,3,96,48,0,801,802,5,5,0,0,802,804,3,96,48,0,803,801,1,0,
0,0,804,807,1,0,0,0,805,803,1,0,0,0,805,806,1,0,0,0,806,809,1,0,0,0,807,
805,1,0,0,0,808,796,1,0,0,0,808,809,1,0,0,0,809,810,1,0,0,0,810,821,3,108,
54,0,811,812,5,109,0,0,812,813,5,40,0,0,813,818,3,92,46,0,814,815,5,5,0,
0,815,817,3,92,46,0,816,814,1,0,0,0,817,820,1,0,0,0,818,816,1,0,0,0,818,
819,1,0,0,0,819,822,1,0,0,0,820,818,1,0,0,0,821,811,1,0,0,0,821,822,1,0,
0,0,822,829,1,0,0,0,823,824,5,98,0,0,824,827,3,78,39,0,825,826,7,2,0,0,826,
828,3,78,39,0,827,825,1,0,0,0,827,828,1,0,0,0,828,830,1,0,0,0,829,823,1,
0,0,0,829,830,1,0,0,0,830,59,1,0,0,0,831,833,5,147,0,0,832,834,5,116,0,0,
833,832,1,0,0,0,833,834,1,0,0,0,834,835,1,0,0,0,835,840,3,96,48,0,836,837,
5,5,0,0,837,839,3,96,48,0,838,836,1,0,0,0,839,842,1,0,0,0,840,838,1,0,0,
0,840,841,1,0,0,0,841,844,1,0,0,0,842,840,1,0,0,0,843,831,1,0,0,0,843,844,
1,0,0,0,844,845,1,0,0,0,845,851,3,62,31,0,846,847,3,110,55,0,847,848,3,62,
31,0,848,850,1,0,0,0,849,846,1,0,0,0,850,853,1,0,0,0,851,849,1,0,0,0,851,
852,1,0,0,0,852,864,1,0,0,0,853,851,1,0,0,0,854,855,5,109,0,0,855,856,5,
40,0,0,856,861,3,92,46,0,857,858,5,5,0,0,858,860,3,92,46,0,859,857,1,0,0,
0,860,863,1,0,0,0,861,859,1,0,0,0,861,862,1,0,0,0,862,865,1,0,0,0,863,861,
1,0,0,0,864,854,1,0,0,0,864,865,1,0,0,0,865,872,1,0,0,0,866,867,5,98,0,0,
867,870,3,78,39,0,868,869,7,2,0,0,869,871,3,78,39,0,870,868,1,0,0,0,870,
871,1,0,0,0,871,873,1,0,0,0,872,866,1,0,0,0,872,873,1,0,0,0,873,61,1,0,0,
0,874,876,5,128,0,0,875,877,7,4,0,0,876,875,1,0,0,0,876,877,1,0,0,0,877,
878,1,0,0,0,878,883,3,98,49,0,879,880,5,5,0,0,880,882,3,98,49,0,881,879,
1,0,0,0,882,885,1,0,0,0,883,881,1,0,0,0,883,884,1,0,0,0,884,898,1,0,0,0,
885,883,1,0,0,0,886,896,5,75,0,0,887,892,3,100,50,0,888,889,5,5,0,0,889,
891,3,100,50,0,890,888,1,0,0,0,891,894,1,0,0,0,892,890,1,0,0,0,892,893,1,
0,0,0,893,897,1,0,0,0,894,892,1,0,0,0,895,897,3,102,51,0,896,887,1,0,0,0,
896,895,1,0,0,0,897,899,1,0,0,0,898,886,1,0,0,0,898,899,1,0,0,0,899,902,
1,0,0,0,900,901,5,146,0,0,901,903,3,78,39,0,902,900,1,0,0,0,902,903,1,0,
0,0,903,918,1,0,0,0,904,905,5,78,0,0,905,906,5,40,0,0,906,911,3,78,39,0,
907,908,5,5,0,0,908,910,3,78,39,0,909,907,1,0,0,0,910,913,1,0,0,0,911,909,
1,0,0,0,911,912,1,0,0,0,912,916,1,0,0,0,913,911,1,0,0,0,914,915,5,79,0,0,
915,917,3,78,39,0,916,914,1,0,0,0,916,917,1,0,0,0,917,919,1,0,0,0,918,904,
1,0,0,0,918,919,1,0,0,0,919,949,1,0,0,0,920,921,5,142,0,0,921,922,5,3,0,
0,922,927,3,78,39,0,923,924,5,5,0,0,924,926,3,78,39,0,925,923,1,0,0,0,926,
929,1,0,0,0,927,925,1,0,0,0,927,928,1,0,0,0,928,930,1,0,0,0,929,927,1,0,
0,0,930,945,5,4,0,0,931,932,5,5,0,0,932,933,5,3,0,0,933,938,3,78,39,0,934,
935,5,5,0,0,935,937,3,78,39,0,936,934,1,0,0,0,937,940,1,0,0,0,938,936,1,
0,0,0,938,939,1,0,0,0,939,941,1,0,0,0,940,938,1,0,0,0,941,942,5,4,0,0,942,
944,1,0,0,0,943,931,1,0,0,0,944,947,1,0,0,0,945,943,1,0,0,0,945,946,1,0,
0,0,946,949,1,0,0,0,947,945,1,0,0,0,948,874,1,0,0,0,948,920,1,0,0,0,949,
63,1,0,0,0,950,952,3,88,44,0,951,950,1,0,0,0,951,952,1,0,0,0,952,953,1,0,
0,0,953,964,5,139,0,0,954,955,5,108,0,0,955,965,5,125,0,0,956,957,5,108,
0,0,957,965,5,25,0,0,958,959,5,108,0,0,959,965,5,122,0,0,960,961,5,108,0,
0,961,965,5,72,0,0,962,963,5,108,0,0,963,965,5,81,0,0,964,954,1,0,0,0,964,
956,1,0,0,0,964,958,1,0,0,0,964,960,1,0,0,0,964,962,1,0,0,0,964,965,1,0,
0,0,965,966,1,0,0,0,966,967,3,90,45,0,967,968,5,129,0,0,968,969,3,140,70,
0,969,970,5,6,0,0,970,978,3,78,39,0,971,972,5,5,0,0,972,973,3,140,70,0,973,
974,5,6,0,0,974,975,3,78,39,0,975,977,1,0,0,0,976,971,1,0,0,0,977,980,1,
0,0,0,978,976,1,0,0,0,978,979,1,0,0,0,979,983,1,0,0,0,980,978,1,0,0,0,981,
982,5,146,0,0,982,984,3,78,39,0,983,981,1,0,0,0,983,984,1,0,0,0,984,65,1,
0,0,0,985,987,3,88,44,0,986,985,1,0,0,0,986,987,1,0,0,0,987,988,1,0,0,0,
988,999,5,139,0,0,989,990,5,108,0,0,990,1000,5,125,0,0,991,992,5,108,0,0,
992,1000,5,25,0,0,993,994,5,108,0,0,994,1000,5,122,0,0,995,996,5,108,0,0,
996,1000,5,72,0,0,997,998,5,108,0,0,998,1000,5,81,0,0,999,989,1,0,0,0,999,
991,1,0,0,0,999,993,1,0,0,0,999,995,1,0,0,0,999,997,1,0,0,0,999,1000,1,0,
0,0,1000,1001,1,0,0,0,1001,1002,3,90,45,0,1002,1003,5,129,0,0,1003,1004,
3,140,70,0,1004,1005,5,6,0,0,1005,1013,3,78,39,0,1006,1007,5,5,0,0,1007,
1008,3,140,70,0,1008,1009,5,6,0,0,1009,1010,3,78,39,0,1010,1012,1,0,0,0,
1011,1006,1,0,0,0,1012,1015,1,0,0,0,1013,1011,1,0,0,0,1013,1014,1,0,0,0,
1014,1018,1,0,0,0,1015,1013,1,0,0,0,1016,1017,5,146,0,0,1017,1019,3,78,39,
0,1018,1016,1,0,0,0,1018,1019,1,0,0,0,1019,1038,1,0,0,0,1020,1021,5,109,
0,0,1021,1022,5,40,0,0,1022,1027,3,92,46,0,1023,1024,5,5,0,0,1024,1026,3,
92,46,0,1025,1023,1,0,0,0,1026,1029,1,0,0,0,1027,1025,1,0,0,0,1027,1028,
1,0,0,0,1028,1031,1,0,0,0,1029,1027,1,0,0,0,1030,1020,1,0,0,0,1030,1031,
1,0,0,0,1031,1032,1,0,0,0,1032,1033,5,98,0,0,1033,1036,3,78,39,0,1034,1035,
7,2,0,0,1035,1037,3,78,39,0,1036,1034,1,0,0,0,1036,1037,1,0,0,0,1037,1039,
1,0,0,0,1038,1030,1,0,0,0,1038,1039,1,0,0,0,1039,67,1,0,0,0,1040,1041,5,
141,0,0,1041,69,1,0,0,0,1042,1044,3,140,70,0,1043,1045,3,72,36,0,1044,1043,
1,0,0,0,1044,1045,1,0,0,0,1045,1049,1,0,0,0,1046,1048,3,74,37,0,1047,1046,
1,0,0,0,1048,1051,1,0,0,0,1049,1047,1,0,0,0,1049,1050,1,0,0,0,1050,71,1,
0,0,0,1051,1049,1,0,0,0,1052,1054,3,128,64,0,1053,1052,1,0,0,0,1054,1055,
1,0,0,0,1055,1053,1,0,0,0,1055,1056,1,0,0,0,1056,1067,1,0,0,0,1057,1058,
5,3,0,0,1058,1059,3,114,57,0,1059,1060,5,4,0,0,1060,1068,1,0,0,0,1061,1062,
5,3,0,0,1062,1063,3,114,57,0,1063,1064,5,5,0,0,1064,1065,3,114,57,0,1065,
1066,5,4,0,0,1066,1068,1,0,0,0,1067,1057,1,0,0,0,1067,1061,1,0,0,0,1067,
1068,1,0,0,0,1068,73,1,0,0,0,1069,1070,5,49,0,0,1070,1072,3,128,64,0,1071,
1069,1,0,0,0,1071,1072,1,0,0,0,1072,1106,1,0,0,0,1073,1074,5,113,0,0,1074,
1076,5,95,0,0,1075,1077,7,5,0,0,1076,1075,1,0,0,0,1076,1077,1,0,0,0,1077,
1078,1,0,0,0,1078,1080,3,76,38,0,1079,1081,5,36,0,0,1080,1079,1,0,0,0,1080,
1081,1,0,0,0,1081,1107,1,0,0,0,1082,1084,5,102,0,0,1083,1082,1,0,0,0,1083,
1084,1,0,0,0,1084,1085,1,0,0,0,1085,1086,5,104,0,0,1086,1107,3,76,38,0,1087,
1088,5,138,0,0,1088,1107,3,76,38,0,1089,1090,5,44,0,0,1090,1091,5,3,0,0,
1091,1092,3,78,39,0,1092,1093,5,4,0,0,1093,1107,1,0,0,0,1094,1101,5,56,0,
0,1095,1102,3,114,57,0,1096,1102,3,116,58,0,1097,1098,5,3,0,0,1098,1099,
3,78,39,0,1099,1100,5,4,0,0,1100,1102,1,0,0,0,1101,1095,1,0,0,0,1101,1096,
1,0,0,0,1101,1097,1,0,0,0,1102,1107,1,0,0,0,1103,1104,5,45,0,0,1104,1107,
3,142,71,0,1105,1107,3,80,40,0,1106,1073,1,0,0,0,1106,1083,1,0,0,0,1106,
1087,1,0,0,0,1106,1089,1,0,0,0,1106,1094,1,0,0,0,1106,1103,1,0,0,0,1106,
1105,1,0,0,0,1107,75,1,0,0,0,1108,1109,5,107,0,0,1109,1110,5,48,0,0,1110,
1112,7,6,0,0,1111,1108,1,0,0,0,1111,1112,1,0,0,0,1112,77,1,0,0,0,1113,1114,
6,39,-1,0,1114,1190,3,116,58,0,1115,1190,5,151,0,0,1116,1117,3,132,66,0,
1117,1118,5,2,0,0,1118,1120,1,0,0,0,1119,1116,1,0,0,0,1119,1120,1,0,0,0,
1120,1121,1,0,0,0,1121,1122,3,134,67,0,1122,1123,5,2,0,0,1123,1125,1,0,0,
0,1124,1119,1,0,0,0,1124,1125,1,0,0,0,1125,1126,1,0,0,0,1126,1190,3,140,
70,0,1127,1128,3,118,59,0,1128,1129,3,78,39,21,1129,1190,1,0,0,0,1130,1131,
3,130,65,0,1131,1144,5,3,0,0,1132,1134,5,62,0,0,1133,1132,1,0,0,0,1133,1134,
1,0,0,0,1134,1135,1,0,0,0,1135,1140,3,78,39,0,1136,1137,5,5,0,0,1137,1139,
3,78,39,0,1138,1136,1,0,0,0,1139,1142,1,0,0,0,1140,1138,1,0,0,0,1140,1141,
1,0,0,0,1141,1145,1,0,0,0,1142,1140,1,0,0,0,1143,1145,5,7,0,0,1144,1133,
1,0,0,0,1144,1143,1,0,0,0,1144,1145,1,0,0,0,1145,1146,1,0,0,0,1146,1147,
5,4,0,0,1147,1190,1,0,0,0,1148,1149,5,3,0,0,1149,1150,3,78,39,0,1150,1151,
5,4,0,0,1151,1190,1,0,0,0,1152,1153,5,43,0,0,1153,1154,5,3,0,0,1154,1155,
3,78,39,0,1155,1156,5,33,0,0,1156,1157,3,72,36,0,1157,1158,5,4,0,0,1158,
1190,1,0,0,0,1159,1161,5,102,0,0,1160,1159,1,0,0,0,1160,1161,1,0,0,0,1161,
1162,1,0,0,0,1162,1164,5,70,0,0,1163,1160,1,0,0,0,1163,1164,1,0,0,0,1164,
1165,1,0,0,0,1165,1166,5,3,0,0,1166,1167,3,60,30,0,1167,1168,5,4,0,0,1168,
1190,1,0,0,0,1169,1171,5,42,0,0,1170,1172,3,78,39,0,1171,1170,1,0,0,0,1171,
1172,1,0,0,0,1172,1178,1,0,0,0,1173,1174,5,145,0,0,1174,1175,3,78,39,0,1175,
1176,5,133,0,0,1176,1177,3,78,39,0,1177,1179,1,0,0,0,1178,1173,1,0,0,0,1179,
1180,1,0,0,0,1180,1178,1,0,0,0,1180,1181,1,0,0,0,1181,1184,1,0,0,0,1182,
1183,5,65,0,0,1183,1185,3,78,39,0,1184,1182,1,0,0,0,1184,1185,1,0,0,0,1185,
1186,1,0,0,0,1186,1187,5,66,0,0,1187,1190,1,0,0,0,1188,1190,3,82,41,0,1189,
1113,1,0,0,0,1189,1115,1,0,0,0,1189,1124,1,0,0,0,1189,1127,1,0,0,0,1189,
1130,1,0,0,0,1189,1148,1,0,0,0,1189,1152,1,0,0,0,1189,1163,1,0,0,0,1189,
1169,1,0,0,0,1189,1188,1,0,0,0,1190,1291,1,0,0,0,1191,1192,10,20,0,0,1192,
1193,5,11,0,0,1193,1290,3,78,39,21,1194,1195,10,19,0,0,1195,1196,7,7,0,0,
1196,1290,3,78,39,20,1197,1198,10,18,0,0,1198,1199,7,8,0,0,1199,1290,3,78,
39,19,1200,1201,10,17,0,0,1201,1202,7,9,0,0,1202,1290,3,78,39,18,1203,1204,
10,16,0,0,1204,1205,7,10,0,0,1205,1290,3,78,39,17,1206,1219,10,15,0,0,1207,
1220,5,6,0,0,1208,1220,5,22,0,0,1209,1220,5,23,0,0,1210,1220,5,24,0,0,1211,
1220,5,92,0,0,1212,1213,5,92,0,0,1213,1220,5,102,0,0,1214,1220,5,83,0,0,
1215,1220,5,97,0,0,1216,1220,5,77,0,0,1217,1220,5,99,0,0,1218,1220,5,118,
0,0,1219,1207,1,0,0,0,1219,1208,1,0,0,0,1219,1209,1,0,0,0,1219,1210,1,0,
0,0,1219,1211,1,0,0,0,1219,1212,1,0,0,0,1219,1214,1,0,0,0,1219,1215,1,0,
0,0,1219,1216,1,0,0,0,1219,1217,1,0,0,0,1219,1218,1,0,0,0,1220,1221,1,0,
0,0,1221,1290,3,78,39,16,1222,1223,10,14,0,0,1223,1224,5,32,0,0,1224,1290,
3,78,39,15,1225,1226,10,13,0,0,1226,1227,5,108,0,0,1227,1290,3,78,39,14,
1228,1229,10,6,0,0,1229,1231,5,92,0,0,1230,1232,5,102,0,0,1231,1230,1,0,
0,0,1231,1232,1,0,0,0,1232,1233,1,0,0,0,1233,1290,3,78,39,7,1234,1236,10,
5,0,0,1235,1237,5,102,0,0,1236,1235,1,0,0,0,1236,1237,1,0,0,0,1237,1238,
1,0,0,0,1238,1239,5,39,0,0,1239,1240,3,78,39,0,1240,1241,5,32,0,0,1241,1242,
3,78,39,6,1242,1290,1,0,0,0,1243,1244,10,9,0,0,1244,1245,5,45,0,0,1245,1290,
3,142,71,0,1246,1248,10,8,0,0,1247,1249,5,102,0,0,1248,1247,1,0,0,0,1248,
1249,1,0,0,0,1249,1250,1,0,0,0,1250,1251,7,11,0,0,1251,1254,3,78,39,0,1252,
1253,5,67,0,0,1253,1255,3,78,39,0,1254,1252,1,0,0,0,1254,1255,1,0,0,0,1255,
1290,1,0,0,0,1256,1261,10,7,0,0,1257,1262,5,93,0,0,1258,1262,5,103,0,0,1259,
1260,5,102,0,0,1260,1262,5,104,0,0,1261,1257,1,0,0,0,1261,1258,1,0,0,0,1261,
1259,1,0,0,0,1262,1290,1,0,0,0,1263,1265,10,4,0,0,1264,1266,5,102,0,0,1265,
1264,1,0,0,0,1265,1266,1,0,0,0,1266,1267,1,0,0,0,1267,1287,5,83,0,0,1268,
1278,5,3,0,0,1269,1279,3,60,30,0,1270,1275,3,78,39,0,1271,1272,5,5,0,0,1272,
1274,3,78,39,0,1273,1271,1,0,0,0,1274,1277,1,0,0,0,1275,1273,1,0,0,0,1275,
1276,1,0,0,0,1276,1279,1,0,0,0,1277,1275,1,0,0,0,1278,1269,1,0,0,0,1278,
1270,1,0,0,0,1278,1279,1,0,0,0,1279,1280,1,0,0,0,1280,1288,5,4,0,0,1281,
1282,3,132,66,0,1282,1283,5,2,0,0,1283,1285,1,0,0,0,1284,1281,1,0,0,0,1284,
1285,1,0,0,0,1285,1286,1,0,0,0,1286,1288,3,134,67,0,1287,1268,1,0,0,0,1287,
1284,1,0,0,0,1288,1290,1,0,0,0,1289,1191,1,0,0,0,1289,1194,1,0,0,0,1289,
1197,1,0,0,0,1289,1200,1,0,0,0,1289,1203,1,0,0,0,1289,1206,1,0,0,0,1289,
1222,1,0,0,0,1289,1225,1,0,0,0,1289,1228,1,0,0,0,1289,1234,1,0,0,0,1289,
1243,1,0,0,0,1289,1246,1,0,0,0,1289,1256,1,0,0,0,1289,1263,1,0,0,0,1290,
1293,1,0,0,0,1291,1289,1,0,0,0,1291,1292,1,0,0,0,1292,79,1,0,0,0,1293,1291,
1,0,0,0,1294,1295,5,117,0,0,1295,1307,3,144,72,0,1296,1297,5,3,0,0,1297,
1302,3,140,70,0,1298,1299,5,5,0,0,1299,1301,3,140,70,0,1300,1298,1,0,0,0,
1301,1304,1,0,0,0,1302,1300,1,0,0,0,1302,1303,1,0,0,0,1303,1305,1,0,0,0,
1304,1302,1,0,0,0,1305,1306,5,4,0,0,1306,1308,1,0,0,0,1307,1296,1,0,0,0,
1307,1308,1,0,0,0,1308,1327,1,0,0,0,1309,1310,5,107,0,0,1310,1319,7,12,0,
0,1311,1312,5,129,0,0,1312,1320,5,104,0,0,1313,1314,5,129,0,0,1314,1320,
5,56,0,0,1315,1320,5,41,0,0,1316,1320,5,123,0,0,1317,1318,5,101,0,0,1318,
1320,5,26,0,0,1319,1311,1,0,0,0,1319,1313,1,0,0,0,1319,1315,1,0,0,0,1319,
1316,1,0,0,0,1319,1317,1,0,0,0,1320,1324,1,0,0,0,1321,1322,5,99,0,0,1322,
1324,3,128,64,0,1323,1309,1,0,0,0,1323,1321,1,0,0,0,1324,1326,1,0,0,0,1325,
1323,1,0,0,0,1326,1329,1,0,0,0,1327,1325,1,0,0,0,1327,1328,1,0,0,0,1328,
1340,1,0,0,0,1329,1327,1,0,0,0,1330,1332,5,102,0,0,1331,1330,1,0,0,0,1331,
1332,1,0,0,0,1332,1333,1,0,0,0,1333,1338,5,57,0,0,1334,1335,5,86,0,0,1335,
1339,5,58,0,0,1336,1337,5,86,0,0,1337,1339,5,82,0,0,1338,1334,1,0,0,0,1338,
1336,1,0,0,0,1338,1339,1,0,0,0,1339,1341,1,0,0,0,1340,1331,1,0,0,0,1340,
1341,1,0,0,0,1341,81,1,0,0,0,1342,1343,5,115,0,0,1343,1348,5,3,0,0,1344,
1349,5,81,0,0,1345,1346,7,13,0,0,1346,1347,5,5,0,0,1347,1349,3,120,60,0,
1348,1344,1,0,0,0,1348,1345,1,0,0,0,1349,1350,1,0,0,0,1350,1351,5,4,0,0,
1351,83,1,0,0,0,1352,1355,3,140,70,0,1353,1354,5,45,0,0,1354,1356,3,142,
71,0,1355,1353,1,0,0,0,1355,1356,1,0,0,0,1356,1358,1,0,0,0,1357,1359,7,5,
0,0,1358,1357,1,0,0,0,1358,1359,1,0,0,0,1359,85,1,0,0,0,1360,1361,5,49,0,
0,1361,1363,3,128,64,0,1362,1360,1,0,0,0,1362,1363,1,0,0,0,1363,1400,1,0,
0,0,1364,1365,5,113,0,0,1365,1368,5,95,0,0,1366,1368,5,138,0,0,1367,1364,
1,0,0,0,1367,1366,1,0,0,0,1368,1369,1,0,0,0,1369,1370,5,3,0,0,1370,1375,
3,84,42,0,1371,1372,5,5,0,0,1372,1374,3,84,42,0,1373,1371,1,0,0,0,1374,1377,
1,0,0,0,1375,1373,1,0,0,0,1375,1376,1,0,0,0,1376,1378,1,0,0,0,1377,1375,
1,0,0,0,1378,1379,5,4,0,0,1379,1380,3,76,38,0,1380,1401,1,0,0,0,1381,1382,
5,44,0,0,1382,1383,5,3,0,0,1383,1384,3,78,39,0,1384,1385,5,4,0,0,1385,1401,
1,0,0,0,1386,1387,5,74,0,0,1387,1388,5,95,0,0,1388,1389,5,3,0,0,1389,1394,
3,140,70,0,1390,1391,5,5,0,0,1391,1393,3,140,70,0,1392,1390,1,0,0,0,1393,
1396,1,0,0,0,1394,1392,1,0,0,0,1394,1395,1,0,0,0,1395,1397,1,0,0,0,1396,
1394,1,0,0,0,1397,1398,5,4,0,0,1398,1399,3,80,40,0,1399,1401,1,0,0,0,1400,
1367,1,0,0,0,1400,1381,1,0,0,0,1400,1386,1,0,0,0,1401,87,1,0,0,0,1402,1404,
5,147,0,0,1403,1405,5,116,0,0,1404,1403,1,0,0,0,1404,1405,1,0,0,0,1405,1406,
1,0,0,0,1406,1407,3,112,56,0,1407,1408,5,33,0,0,1408,1409,5,3,0,0,1409,1410,
3,60,30,0,1410,1420,5,4,0,0,1411,1412,5,5,0,0,1412,1413,3,112,56,0,1413,
1414,5,33,0,0,1414,1415,5,3,0,0,1415,1416,3,60,30,0,1416,1417,5,4,0,0,1417,
1419,1,0,0,0,1418,1411,1,0,0,0,1419,1422,1,0,0,0,1420,1418,1,0,0,0,1420,
1421,1,0,0,0,1421,89,1,0,0,0,1422,1420,1,0,0,0,1423,1424,3,132,66,0,1424,
1425,5,2,0,0,1425,1427,1,0,0,0,1426,1423,1,0,0,0,1426,1427,1,0,0,0,1427,
1428,1,0,0,0,1428,1434,3,134,67,0,1429,1430,5,85,0,0,1430,1431,5,40,0,0,
1431,1435,3,146,73,0,1432,1433,5,102,0,0,1433,1435,5,85,0,0,1434,1429,1,
0,0,0,1434,1432,1,0,0,0,1434,1435,1,0,0,0,1435,91,1,0,0,0,1436,1439,3,78,
39,0,1437,1438,5,45,0,0,1438,1440,3,142,71,0,1439,1437,1,0,0,0,1439,1440,
1,0,0,0,1440,1442,1,0,0,0,1441,1443,7,5,0,0,1442,1441,1,0,0,0,1442,1443,
1,0,0,0,1443,93,1,0,0,0,1444,1448,3,114,57,0,1445,1448,3,128,64,0,1446,1448,
5,152,0,0,1447,1444,1,0,0,0,1447,1445,1,0,0,0,1447,1446,1,0,0,0,1448,95,
1,0,0,0,1449,1461,3,134,67,0,1450,1451,5,3,0,0,1451,1456,3,140,70,0,1452,
1453,5,5,0,0,1453,1455,3,140,70,0,1454,1452,1,0,0,0,1455,1458,1,0,0,0,1456,
1454,1,0,0,0,1456,1457,1,0,0,0,1457,1459,1,0,0,0,1458,1456,1,0,0,0,1459,
1460,5,4,0,0,1460,1462,1,0,0,0,1461,1450,1,0,0,0,1461,1462,1,0,0,0,1462,
1463,1,0,0,0,1463,1464,5,33,0,0,1464,1465,5,3,0,0,1465,1466,3,60,30,0,1466,
1467,5,4,0,0,1467,97,1,0,0,0,1468,1481,5,7,0,0,1469,1470,3,134,67,0,1470,
1471,5,2,0,0,1471,1472,5,7,0,0,1472,1481,1,0,0,0,1473,1478,3,78,39,0,1474,
1476,5,33,0,0,1475,1474,1,0,0,0,1475,1476,1,0,0,0,1476,1477,1,0,0,0,1477,
1479,3,124,62,0,1478,1475,1,0,0,0,1478,1479,1,0,0,0,1479,1481,1,0,0,0,1480,
1468,1,0,0,0,1480,1469,1,0,0,0,1480,1473,1,0,0,0,1481,99,1,0,0,0,1482,1483,
3,132,66,0,1483,1484,5,2,0,0,1484,1486,1,0,0,0,1485,1482,1,0,0,0,1485,1486,
1,0,0,0,1486,1487,1,0,0,0,1487,1492,3,134,67,0,1488,1490,5,33,0,0,1489,1488,
1,0,0,0,1489,1490,1,0,0,0,1490,1491,1,0,0,0,1491,1493,3,158,79,0,1492,1489,
1,0,0,0,1492,1493,1,0,0,0,1493,1499,1,0,0,0,1494,1495,5,85,0,0,1495,1496,
5,40,0,0,1496,1500,3,146,73,0,1497,1498,5,102,0,0,1498,1500,5,85,0,0,1499,
1494,1,0,0,0,1499,1497,1,0,0,0,1499,1500,1,0,0,0,1500,1530,1,0,0,0,1501,
1511,5,3,0,0,1502,1507,3,100,50,0,1503,1504,5,5,0,0,1504,1506,3,100,50,0,
1505,1503,1,0,0,0,1506,1509,1,0,0,0,1507,1505,1,0,0,0,1507,1508,1,0,0,0,
1508,1512,1,0,0,0,1509,1507,1,0,0,0,1510,1512,3,102,51,0,1511,1502,1,0,0,
0,1511,1510,1,0,0,0,1512,1513,1,0,0,0,1513,1518,5,4,0,0,1514,1516,5,33,0,
0,1515,1514,1,0,0,0,1515,1516,1,0,0,0,1516,1517,1,0,0,0,1517,1519,3,158,
79,0,1518,1515,1,0,0,0,1518,1519,1,0,0,0,1519,1530,1,0,0,0,1520,1521,5,3,
0,0,1521,1522,3,60,30,0,1522,1527,5,4,0,0,1523,1525,5,33,0,0,1524,1523,1,
0,0,0,1524,1525,1,0,0,0,1525,1526,1,0,0,0,1526,1528,3,158,79,0,1527,1524,
1,0,0,0,1527,1528,1,0,0,0,1528,1530,1,0,0,0,1529,1485,1,0,0,0,1529,1501,
1,0,0,0,1529,1520,1,0,0,0,1530,101,1,0,0,0,1531,1538,3,100,50,0,1532,1533,
3,104,52,0,1533,1534,3,100,50,0,1534,1535,3,106,53,0,1535,1537,1,0,0,0,1536,
1532,1,0,0,0,1537,1540,1,0,0,0,1538,1536,1,0,0,0,1538,1539,1,0,0,0,1539,
103,1,0,0,0,1540,1538,1,0,0,0,1541,1555,5,5,0,0,1542,1544,5,100,0,0,1543,
1542,1,0,0,0,1543,1544,1,0,0,0,1544,1551,1,0,0,0,1545,1547,5,96,0,0,1546,
1548,5,110,0,0,1547,1546,1,0,0,0,1547,1548,1,0,0,0,1548,1552,1,0,0,0,1549,
1552,5,87,0,0,1550,1552,5,51,0,0,1551,1545,1,0,0,0,1551,1549,1,0,0,0,1551,
1550,1,0,0,0,1551,1552,1,0,0,0,1552,1553,1,0,0,0,1553,1555,5,94,0,0,1554,
1541,1,0,0,0,1554,1543,1,0,0,0,1555,105,1,0,0,0,1556,1557,5,107,0,0,1557,
1571,3,78,39,0,1558,1559,5,140,0,0,1559,1560,5,3,0,0,1560,1565,3,140,70,
0,1561,1562,5,5,0,0,1562,1564,3,140,70,0,1563,1561,1,0,0,0,1564,1567,1,0,
0,0,1565,1563,1,0,0,0,1565,1566,1,0,0,0,1566,1568,1,0,0,0,1567,1565,1,0,
0,0,1568,1569,5,4,0,0,1569,1571,1,0,0,0,1570,1556,1,0,0,0,1570,1558,1,0,
0,0,1570,1571,1,0,0,0,1571,107,1,0,0,0,1572,1574,5,128,0,0,1573,1575,7,4,
0,0,1574,1573,1,0,0,0,1574,1575,1,0,0,0,1575,1576,1,0,0,0,1576,1581,3,98,
49,0,1577,1578,5,5,0,0,1578,1580,3,98,49,0,1579,1577,1,0,0,0,1580,1583,1,
0,0,0,1581,1579,1,0,0,0,1581,1582,1,0,0,0,1582,1596,1,0,0,0,1583,1581,1,
0,0,0,1584,1594,5,75,0,0,1585,1590,3,100,50,0,1586,1587,5,5,0,0,1587,1589,
3,100,50,0,1588,1586,1,0,0,0,1589,1592,1,0,0,0,1590,1588,1,0,0,0,1590,1591,
1,0,0,0,1591,1595,1,0,0,0,1592,1590,1,0,0,0,1593,1595,3,102,51,0,1594,1585,
1,0,0,0,1594,1593,1,0,0,0,1595,1597,1,0,0,0,1596,1584,1,0,0,0,1596,1597,
1,0,0,0,1597,1600,1,0,0,0,1598,1599,5,146,0,0,1599,1601,3,78,39,0,1600,1598,
1,0,0,0,1600,1601,1,0,0,0,1601,1616,1,0,0,0,1602,1603,5,78,0,0,1603,1604,
5,40,0,0,1604,1609,3,78,39,0,1605,1606,5,5,0,0,1606,1608,3,78,39,0,1607,
1605,1,0,0,0,1608,1611,1,0,0,0,1609,1607,1,0,0,0,1609,1610,1,0,0,0,1610,
1614,1,0,0,0,1611,1609,1,0,0,0,1612,1613,5,79,0,0,1613,1615,3,78,39,0,1614,
1612,1,0,0,0,1614,1615,1,0,0,0,1615,1617,1,0,0,0,1616,1602,1,0,0,0,1616,
1617,1,0,0,0,1617,1647,1,0,0,0,1618,1619,5,142,0,0,1619,1620,5,3,0,0,1620,
1625,3,78,39,0,1621,1622,5,5,0,0,1622,1624,3,78,39,0,1623,1621,1,0,0,0,1624,
1627,1,0,0,0,1625,1623,1,0,0,0,1625,1626,1,0,0,0,1626,1628,1,0,0,0,1627,
1625,1,0,0,0,1628,1643,5,4,0,0,1629,1630,5,5,0,0,1630,1631,5,3,0,0,1631,
1636,3,78,39,0,1632,1633,5,5,0,0,1633,1635,3,78,39,0,1634,1632,1,0,0,0,1635,
1638,1,0,0,0,1636,1634,1,0,0,0,1636,1637,1,0,0,0,1637,1639,1,0,0,0,1638,
1636,1,0,0,0,1639,1640,5,4,0,0,1640,1642,1,0,0,0,1641,1629,1,0,0,0,1642,
1645,1,0,0,0,1643,1641,1,0,0,0,1643,1644,1,0,0,0,1644,1647,1,0,0,0,1645,
1643,1,0,0,0,1646,1572,1,0,0,0,1646,1618,1,0,0,0,1647,109,1,0,0,0,1648,1654,
5,137,0,0,1649,1650,5,137,0,0,1650,1654,5,29,0,0,1651,1654,5,90,0,0,1652,
1654,5,68,0,0,1653,1648,1,0,0,0,1653,1649,1,0,0,0,1653,1651,1,0,0,0,1653,
1652,1,0,0,0,1654,111,1,0,0,0,1655,1667,3,134,67,0,1656,1657,5,3,0,0,1657,
1662,3,140,70,0,1658,1659,5,5,0,0,1659,1661,3,140,70,0,1660,1658,1,0,0,0,
1661,1664,1,0,0,0,1662,1660,1,0,0,0,1662,1663,1,0,0,0,1663,1665,1,0,0,0,
1664,1662,1,0,0,0,1665,1666,5,4,0,0,1666,1668,1,0,0,0,1667,1656,1,0,0,0,
1667,1668,1,0,0,0,1668,113,1,0,0,0,1669,1671,7,8,0,0,1670,1669,1,0,0,0,1670,
1671,1,0,0,0,1671,1672,1,0,0,0,1672,1673,5,150,0,0,1673,115,1,0,0,0,1674,
1675,7,14,0,0,1675,117,1,0,0,0,1676,1677,7,15,0,0,1677,119,1,0,0,0,1678,
1679,5,152,0,0,1679,121,1,0,0,0,1680,1683,3,78,39,0,1681,1683,3,70,35,0,
1682,1680,1,0,0,0,1682,1681,1,0,0,0,1683,123,1,0,0,0,1684,1685,7,16,0,0,
1685,125,1,0,0,0,1686,1687,7,17,0,0,1687,127,1,0,0,0,1688,1689,3,162,81,
0,1689,129,1,0,0,0,1690,1691,3,162,81,0,1691,131,1,0,0,0,1692,1693,3,162,
81,0,1693,133,1,0,0,0,1694,1695,3,162,81,0,1695,135,1,0,0,0,1696,1697,3,
162,81,0,1697,137,1,0,0,0,1698,1699,3,162,81,0,1699,139,1,0,0,0,1700,1701,
3,162,81,0,1701,141,1,0,0,0,1702,1703,3,162,81,0,1703,143,1,0,0,0,1704,1705,
3,162,81,0,1705,145,1,0,0,0,1706,1707,3,162,81,0,1707,147,1,0,0,0,1708,1709,
3,162,81,0,1709,149,1,0,0,0,1710,1711,3,162,81,0,1711,151,1,0,0,0,1712,1713,
3,162,81,0,1713,153,1,0,0,0,1714,1715,3,162,81,0,1715,155,1,0,0,0,1716,1717,
3,162,81,0,1717,157,1,0,0,0,1718,1719,3,162,81,0,1719,159,1,0,0,0,1720,1721,
3,162,81,0,1721,161,1,0,0,0,1722,1730,5,149,0,0,1723,1730,3,126,63,0,1724,
1730,5,152,0,0,1725,1726,5,3,0,0,1726,1727,3,162,81,0,1727,1728,5,4,0,0,
1728,1730,1,0,0,0,1729,1722,1,0,0,0,1729,1723,1,0,0,0,1729,1724,1,0,0,0,
1729,1725,1,0,0,0,1730,163,1,0,0,0,244,166,168,179,186,191,197,203,205,237,
244,252,255,264,268,276,280,282,287,289,293,300,303,308,312,317,326,329,
335,337,341,347,352,363,369,373,379,384,393,400,406,410,414,420,425,432,
443,446,448,454,460,464,471,477,483,489,494,506,511,522,527,530,537,540,
547,556,559,565,567,571,579,584,592,597,605,610,618,623,629,636,639,647,
657,660,666,668,671,690,696,705,710,719,730,737,743,749,758,765,769,771,
775,782,784,788,791,798,805,808,818,821,827,829,833,840,843,851,861,864,
870,872,876,883,892,896,898,902,911,916,918,927,938,945,948,951,964,978,
983,986,999,1013,1018,1027,1030,1036,1038,1044,1049,1055,1067,1071,1076,
1080,1083,1101,1106,1111,1119,1124,1133,1140,1144,1160,1163,1171,1180,1184,
1189,1219,1231,1236,1248,1254,1261,1265,1275,1278,1284,1287,1289,1291,1302,
1307,1319,1323,1327,1331,1338,1340,1348,1355,1358,1362,1367,1375,1394,1400,
1404,1420,1426,1434,1439,1442,1447,1456,1461,1475,1478,1480,1485,1489,1492,
1499,1507,1511,1515,1518,1524,1527,1529,1538,1543,1547,1551,1554,1565,1570,
1574,1581,1590,1594,1596,1600,1609,1614,1616,1625,1636,1643,1646,1653,1662,
1667,1670,1682,1729];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class SQLtinyParser extends antlr4.Parser {

    static grammarFileName = "SQLtiny.g4";
    static literalNames = [ null, "';'", "'.'", "'('", "')'", "','", "'='", 
                            "'*'", "'+'", "'-'", "'~'", "'||'", "'/'", "'%'", 
                            "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", 
                            "'>'", "'>='", "'=='", "'!='", "'<>'" ];
    static symbolicNames = [ null, "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", 
                             "COMMA", "ASSIGN", "STAR", "PLUS", "MINUS", 
                             "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", 
                             "AMP", "PIPE", "LT", "LT_EQ", "GT", "GT_EQ", 
                             "EQ", "NOT_EQ1", "NOT_EQ2", "K_ABORT", "K_ACTION", 
                             "K_ADD", "K_AFTER", "K_ALL", "K_ALTER", "K_ANALYZE", 
                             "K_AND", "K_AS", "K_ASC", "K_ATTACH", "K_AUTOINCREMENT", 
                             "K_BEFORE", "K_BEGIN", "K_BETWEEN", "K_BY", 
                             "K_CASCADE", "K_CASE", "K_CAST", "K_CHECK", 
                             "K_COLLATE", "K_COLUMN", "K_COMMIT", "K_CONFLICT", 
                             "K_CONSTRAINT", "K_CREATE", "K_CROSS", "K_CURRENT_DATE", 
                             "K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_DATABASE", 
                             "K_DEFAULT", "K_DEFERRABLE", "K_DEFERRED", 
                             "K_DELETE", "K_DESC", "K_DETACH", "K_DISTINCT", 
                             "K_DROP", "K_EACH", "K_ELSE", "K_END", "K_ESCAPE", 
                             "K_EXCEPT", "K_EXCLUSIVE", "K_EXISTS", "K_EXPLAIN", 
                             "K_FAIL", "K_FOR", "K_FOREIGN", "K_FROM", "K_FULL", 
                             "K_GLOB", "K_GROUP", "K_HAVING", "K_IF", "K_IGNORE", 
                             "K_IMMEDIATE", "K_IN", "K_INDEX", "K_INDEXED", 
                             "K_INITIALLY", "K_INNER", "K_INSERT", "K_INSTEAD", 
                             "K_INTERSECT", "K_INTO", "K_IS", "K_ISNULL", 
                             "K_JOIN", "K_KEY", "K_LEFT", "K_LIKE", "K_LIMIT", 
                             "K_MATCH", "K_NATURAL", "K_NO", "K_NOT", "K_NOTNULL", 
                             "K_NULL", "K_OF", "K_OFFSET", "K_ON", "K_OR", 
                             "K_ORDER", "K_OUTER", "K_PLAN", "K_PRAGMA", 
                             "K_PRIMARY", "K_QUERY", "K_RAISE", "K_RECURSIVE", 
                             "K_REFERENCES", "K_REGEXP", "K_REINDEX", "K_RELEASE", 
                             "K_RENAME", "K_REPLACE", "K_RESTRICT", "K_RIGHT", 
                             "K_ROLLBACK", "K_ROW", "K_SAVEPOINT", "K_SELECT", 
                             "K_SET", "K_TABLE", "K_TEMP", "K_TEMPORARY", 
                             "K_THEN", "K_TO", "K_TRANSACTION", "K_TRIGGER", 
                             "K_UNION", "K_UNIQUE", "K_UPDATE", "K_USING", 
                             "K_VACUUM", "K_VALUES", "K_VIEW", "K_VIRTUAL", 
                             "K_WHEN", "K_WHERE", "K_WITH", "K_WITHOUT", 
                             "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", 
                             "STRING_LITERAL", "BLOB_LITERAL", "SINGLE_LINE_COMMENT", 
                             "MULTILINE_COMMENT", "SPACES", "UNEXPECTED_CHAR" ];
    static ruleNames = [ "parse", "error", "sql_stmt_list", "sql_stmt", 
                         "alter_table_stmt", "analyze_stmt", "attach_stmt", 
                         "begin_stmt", "commit_stmt", "compound_select_stmt", 
                         "create_index_stmt", "create_table_stmt", "create_trigger_stmt", 
                         "create_view_stmt", "create_virtual_table_stmt", 
                         "delete_stmt", "delete_stmt_limited", "detach_stmt", 
                         "drop_index_stmt", "drop_table_stmt", "drop_trigger_stmt", 
                         "drop_view_stmt", "factored_select_stmt", "insert_stmt", 
                         "pragma_stmt", "reindex_stmt", "release_stmt", 
                         "rollback_stmt", "savepoint_stmt", "simple_select_stmt", 
                         "select_stmt", "select_or_values", "update_stmt", 
                         "update_stmt_limited", "vacuum_stmt", "column_def", 
                         "type_name", "column_constraint", "conflict_clause", 
                         "expr", "foreign_key_clause", "raise_function", 
                         "indexed_column", "table_constraint", "with_clause", 
                         "qualified_table_name", "ordering_term", "pragma_value", 
                         "common_table_expression", "result_column", "table_or_subquery", 
                         "join_clause", "join_operator", "join_constraint", 
                         "select_core", "compound_operator", "cte_table_name", 
                         "signed_number", "literal_value", "unary_operator", 
                         "error_message", "module_argument", "column_alias", 
                         "keyword", "name", "function_name", "database_name", 
                         "table_name", "table_or_index_name", "new_table_name", 
                         "column_name", "collation_name", "foreign_table", 
                         "index_name", "trigger_name", "view_name", "module_name", 
                         "pragma_name", "savepoint_name", "table_alias", 
                         "transaction_name", "any_name" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = SQLtinyParser.ruleNames;
        this.literalNames = SQLtinyParser.literalNames;
        this.symbolicNames = SQLtinyParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 39:
    	    		return this.expr_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 20);
    		case 1:
    			return this.precpred(this._ctx, 19);
    		case 2:
    			return this.precpred(this._ctx, 18);
    		case 3:
    			return this.precpred(this._ctx, 17);
    		case 4:
    			return this.precpred(this._ctx, 16);
    		case 5:
    			return this.precpred(this._ctx, 15);
    		case 6:
    			return this.precpred(this._ctx, 14);
    		case 7:
    			return this.precpred(this._ctx, 13);
    		case 8:
    			return this.precpred(this._ctx, 6);
    		case 9:
    			return this.precpred(this._ctx, 5);
    		case 10:
    			return this.precpred(this._ctx, 9);
    		case 11:
    			return this.precpred(this._ctx, 8);
    		case 12:
    			return this.precpred(this._ctx, 7);
    		case 13:
    			return this.precpred(this._ctx, 4);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	parse() {
	    let localctx = new ParseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, SQLtinyParser.RULE_parse);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 168;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3221225474) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 2499842057) !== 0) || _la===71 || _la===88 || ((((_la - 112)) & ~0x1f) === 0 && ((1 << (_la - 112)) & 1744938369) !== 0) || _la===147 || _la===157) {
	            this.state = 166;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1:
	            case 30:
	            case 31:
	            case 35:
	            case 38:
	            case 47:
	            case 50:
	            case 59:
	            case 61:
	            case 63:
	            case 66:
	            case 71:
	            case 88:
	            case 112:
	            case 119:
	            case 120:
	            case 122:
	            case 125:
	            case 127:
	            case 128:
	            case 139:
	            case 141:
	            case 142:
	            case 147:
	                this.state = 164;
	                this.sql_stmt_list();
	                break;
	            case 157:
	                this.state = 165;
	                this.error();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 170;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 171;
	        this.match(SQLtinyParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	error() {
	    let localctx = new ErrorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, SQLtinyParser.RULE_error);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 173;
	        localctx._UNEXPECTED_CHAR = this.match(SQLtinyParser.UNEXPECTED_CHAR);
	         
	             throw new RuntimeException("UNEXPECTED_CHAR=" + (localctx._UNEXPECTED_CHAR == null ? null : localctx._UNEXPECTED_CHAR.text)); 
	           
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sql_stmt_list() {
	    let localctx = new Sql_stmt_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, SQLtinyParser.RULE_sql_stmt_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 179;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1) {
	            this.state = 176;
	            this.match(SQLtinyParser.SCOL);
	            this.state = 181;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 182;
	        this.sql_stmt();
	        this.state = 191;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 184; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 183;
	                    this.match(SQLtinyParser.SCOL);
	                    this.state = 186; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===1);
	                this.state = 188;
	                this.sql_stmt(); 
	            }
	            this.state = 193;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
	        }

	        this.state = 197;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 194;
	                this.match(SQLtinyParser.SCOL); 
	            }
	            this.state = 199;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sql_stmt() {
	    let localctx = new Sql_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, SQLtinyParser.RULE_sql_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 205;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===71) {
	            this.state = 200;
	            this.match(SQLtinyParser.K_EXPLAIN);
	            this.state = 203;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===114) {
	                this.state = 201;
	                this.match(SQLtinyParser.K_QUERY);
	                this.state = 202;
	                this.match(SQLtinyParser.K_PLAN);
	            }

	        }

	        this.state = 237;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 207;
	            this.alter_table_stmt();
	            break;

	        case 2:
	            this.state = 208;
	            this.analyze_stmt();
	            break;

	        case 3:
	            this.state = 209;
	            this.attach_stmt();
	            break;

	        case 4:
	            this.state = 210;
	            this.begin_stmt();
	            break;

	        case 5:
	            this.state = 211;
	            this.commit_stmt();
	            break;

	        case 6:
	            this.state = 212;
	            this.compound_select_stmt();
	            break;

	        case 7:
	            this.state = 213;
	            this.create_index_stmt();
	            break;

	        case 8:
	            this.state = 214;
	            this.create_table_stmt();
	            break;

	        case 9:
	            this.state = 215;
	            this.create_trigger_stmt();
	            break;

	        case 10:
	            this.state = 216;
	            this.create_view_stmt();
	            break;

	        case 11:
	            this.state = 217;
	            this.create_virtual_table_stmt();
	            break;

	        case 12:
	            this.state = 218;
	            this.delete_stmt();
	            break;

	        case 13:
	            this.state = 219;
	            this.delete_stmt_limited();
	            break;

	        case 14:
	            this.state = 220;
	            this.detach_stmt();
	            break;

	        case 15:
	            this.state = 221;
	            this.drop_index_stmt();
	            break;

	        case 16:
	            this.state = 222;
	            this.drop_table_stmt();
	            break;

	        case 17:
	            this.state = 223;
	            this.drop_trigger_stmt();
	            break;

	        case 18:
	            this.state = 224;
	            this.drop_view_stmt();
	            break;

	        case 19:
	            this.state = 225;
	            this.factored_select_stmt();
	            break;

	        case 20:
	            this.state = 226;
	            this.insert_stmt();
	            break;

	        case 21:
	            this.state = 227;
	            this.pragma_stmt();
	            break;

	        case 22:
	            this.state = 228;
	            this.reindex_stmt();
	            break;

	        case 23:
	            this.state = 229;
	            this.release_stmt();
	            break;

	        case 24:
	            this.state = 230;
	            this.rollback_stmt();
	            break;

	        case 25:
	            this.state = 231;
	            this.savepoint_stmt();
	            break;

	        case 26:
	            this.state = 232;
	            this.simple_select_stmt();
	            break;

	        case 27:
	            this.state = 233;
	            this.select_stmt();
	            break;

	        case 28:
	            this.state = 234;
	            this.update_stmt();
	            break;

	        case 29:
	            this.state = 235;
	            this.update_stmt_limited();
	            break;

	        case 30:
	            this.state = 236;
	            this.vacuum_stmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_table_stmt() {
	    let localctx = new Alter_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, SQLtinyParser.RULE_alter_table_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 239;
	        this.match(SQLtinyParser.K_ALTER);
	        this.state = 240;
	        this.match(SQLtinyParser.K_TABLE);
	        this.state = 244;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        if(la_===1) {
	            this.state = 241;
	            this.database_name();
	            this.state = 242;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 246;
	        this.table_name();
	        this.state = 255;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 121:
	            this.state = 247;
	            this.match(SQLtinyParser.K_RENAME);
	            this.state = 248;
	            this.match(SQLtinyParser.K_TO);
	            this.state = 249;
	            this.new_table_name();
	            break;
	        case 27:
	            this.state = 250;
	            this.match(SQLtinyParser.K_ADD);
	            this.state = 252;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	            if(la_===1) {
	                this.state = 251;
	                this.match(SQLtinyParser.K_COLUMN);

	            }
	            this.state = 254;
	            this.column_def();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	analyze_stmt() {
	    let localctx = new Analyze_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, SQLtinyParser.RULE_analyze_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 257;
	        this.match(SQLtinyParser.K_ANALYZE);
	        this.state = 264;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        if(la_===1) {
	            this.state = 258;
	            this.database_name();

	        } else if(la_===2) {
	            this.state = 259;
	            this.table_or_index_name();

	        } else if(la_===3) {
	            this.state = 260;
	            this.database_name();
	            this.state = 261;
	            this.match(SQLtinyParser.DOT);
	            this.state = 262;
	            this.table_or_index_name();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attach_stmt() {
	    let localctx = new Attach_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, SQLtinyParser.RULE_attach_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 266;
	        this.match(SQLtinyParser.K_ATTACH);
	        this.state = 268;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        if(la_===1) {
	            this.state = 267;
	            this.match(SQLtinyParser.K_DATABASE);

	        }
	        this.state = 270;
	        this.expr(0);
	        this.state = 271;
	        this.match(SQLtinyParser.K_AS);
	        this.state = 272;
	        this.database_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	begin_stmt() {
	    let localctx = new Begin_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, SQLtinyParser.RULE_begin_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 274;
	        this.match(SQLtinyParser.K_BEGIN);
	        this.state = 276;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 58)) & ~0x1f) === 0 && ((1 << (_la - 58)) & 16779265) !== 0)) {
	            this.state = 275;
	            _la = this._input.LA(1);
	            if(!(((((_la - 58)) & ~0x1f) === 0 && ((1 << (_la - 58)) & 16779265) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 282;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===135) {
	            this.state = 278;
	            this.match(SQLtinyParser.K_TRANSACTION);
	            this.state = 280;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	            if(la_===1) {
	                this.state = 279;
	                this.transaction_name();

	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commit_stmt() {
	    let localctx = new Commit_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, SQLtinyParser.RULE_commit_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 284;
	        _la = this._input.LA(1);
	        if(!(_la===47 || _la===66)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 289;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===135) {
	            this.state = 285;
	            this.match(SQLtinyParser.K_TRANSACTION);
	            this.state = 287;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	            if(la_===1) {
	                this.state = 286;
	                this.transaction_name();

	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compound_select_stmt() {
	    let localctx = new Compound_select_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, SQLtinyParser.RULE_compound_select_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 303;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 291;
	            this.match(SQLtinyParser.K_WITH);
	            this.state = 293;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	            if(la_===1) {
	                this.state = 292;
	                this.match(SQLtinyParser.K_RECURSIVE);

	            }
	            this.state = 295;
	            this.common_table_expression();
	            this.state = 300;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 296;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 297;
	                this.common_table_expression();
	                this.state = 302;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 305;
	        this.select_core();
	        this.state = 315; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 312;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 137:
	                this.state = 306;
	                this.match(SQLtinyParser.K_UNION);
	                this.state = 308;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===29) {
	                    this.state = 307;
	                    this.match(SQLtinyParser.K_ALL);
	                }

	                break;
	            case 90:
	                this.state = 310;
	                this.match(SQLtinyParser.K_INTERSECT);
	                break;
	            case 68:
	                this.state = 311;
	                this.match(SQLtinyParser.K_EXCEPT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 314;
	            this.select_core();
	            this.state = 317; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===68 || _la===90 || _la===137);
	        this.state = 329;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===109) {
	            this.state = 319;
	            this.match(SQLtinyParser.K_ORDER);
	            this.state = 320;
	            this.match(SQLtinyParser.K_BY);
	            this.state = 321;
	            this.ordering_term();
	            this.state = 326;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 322;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 323;
	                this.ordering_term();
	                this.state = 328;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 337;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98) {
	            this.state = 331;
	            this.match(SQLtinyParser.K_LIMIT);
	            this.state = 332;
	            this.expr(0);
	            this.state = 335;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5 || _la===106) {
	                this.state = 333;
	                _la = this._input.LA(1);
	                if(!(_la===5 || _la===106)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 334;
	                this.expr(0);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_index_stmt() {
	    let localctx = new Create_index_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, SQLtinyParser.RULE_create_index_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 339;
	        this.match(SQLtinyParser.K_CREATE);
	        this.state = 341;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===138) {
	            this.state = 340;
	            this.match(SQLtinyParser.K_UNIQUE);
	        }

	        this.state = 343;
	        this.match(SQLtinyParser.K_INDEX);
	        this.state = 347;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        if(la_===1) {
	            this.state = 344;
	            this.match(SQLtinyParser.K_IF);
	            this.state = 345;
	            this.match(SQLtinyParser.K_NOT);
	            this.state = 346;
	            this.match(SQLtinyParser.K_EXISTS);

	        }
	        this.state = 352;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        if(la_===1) {
	            this.state = 349;
	            this.database_name();
	            this.state = 350;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 354;
	        this.index_name();
	        this.state = 355;
	        this.match(SQLtinyParser.K_ON);
	        this.state = 356;
	        this.table_name();
	        this.state = 357;
	        this.match(SQLtinyParser.OPEN_PAR);
	        this.state = 358;
	        this.indexed_column();
	        this.state = 363;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 359;
	            this.match(SQLtinyParser.COMMA);
	            this.state = 360;
	            this.indexed_column();
	            this.state = 365;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 366;
	        this.match(SQLtinyParser.CLOSE_PAR);
	        this.state = 369;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 367;
	            this.match(SQLtinyParser.K_WHERE);
	            this.state = 368;
	            this.expr(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_table_stmt() {
	    let localctx = new Create_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, SQLtinyParser.RULE_create_table_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 371;
	        this.match(SQLtinyParser.K_CREATE);
	        this.state = 373;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131 || _la===132) {
	            this.state = 372;
	            _la = this._input.LA(1);
	            if(!(_la===131 || _la===132)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 375;
	        this.match(SQLtinyParser.K_TABLE);
	        this.state = 379;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        if(la_===1) {
	            this.state = 376;
	            this.match(SQLtinyParser.K_IF);
	            this.state = 377;
	            this.match(SQLtinyParser.K_NOT);
	            this.state = 378;
	            this.match(SQLtinyParser.K_EXISTS);

	        }
	        this.state = 384;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        if(la_===1) {
	            this.state = 381;
	            this.database_name();
	            this.state = 382;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 386;
	        this.table_name();
	        this.state = 410;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	            this.state = 387;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 388;
	            this.column_def();
	            this.state = 393;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 389;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 390;
	                    this.column_def(); 
	                }
	                this.state = 395;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
	            }

	            this.state = 400;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 396;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 397;
	                this.table_constraint();
	                this.state = 402;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 403;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 406;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===148) {
	                this.state = 404;
	                this.match(SQLtinyParser.K_WITHOUT);
	                this.state = 405;
	                this.match(SQLtinyParser.IDENTIFIER);
	            }

	            break;
	        case 33:
	            this.state = 408;
	            this.match(SQLtinyParser.K_AS);
	            this.state = 409;
	            this.select_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_trigger_stmt() {
	    let localctx = new Create_trigger_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, SQLtinyParser.RULE_create_trigger_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 412;
	        this.match(SQLtinyParser.K_CREATE);
	        this.state = 414;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131 || _la===132) {
	            this.state = 413;
	            _la = this._input.LA(1);
	            if(!(_la===131 || _la===132)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 416;
	        this.match(SQLtinyParser.K_TRIGGER);
	        this.state = 420;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        if(la_===1) {
	            this.state = 417;
	            this.match(SQLtinyParser.K_IF);
	            this.state = 418;
	            this.match(SQLtinyParser.K_NOT);
	            this.state = 419;
	            this.match(SQLtinyParser.K_EXISTS);

	        }
	        this.state = 425;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        if(la_===1) {
	            this.state = 422;
	            this.database_name();
	            this.state = 423;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 427;
	        this.trigger_name();
	        this.state = 432;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 37:
	        	this.state = 428;
	        	this.match(SQLtinyParser.K_BEFORE);
	        	break;
	        case 28:
	        	this.state = 429;
	        	this.match(SQLtinyParser.K_AFTER);
	        	break;
	        case 89:
	        	this.state = 430;
	        	this.match(SQLtinyParser.K_INSTEAD);
	        	this.state = 431;
	        	this.match(SQLtinyParser.K_OF);
	        	break;
	        case 59:
	        case 88:
	        case 139:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 448;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 59:
	            this.state = 434;
	            this.match(SQLtinyParser.K_DELETE);
	            break;
	        case 88:
	            this.state = 435;
	            this.match(SQLtinyParser.K_INSERT);
	            break;
	        case 139:
	            this.state = 436;
	            this.match(SQLtinyParser.K_UPDATE);
	            this.state = 446;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===105) {
	                this.state = 437;
	                this.match(SQLtinyParser.K_OF);
	                this.state = 438;
	                this.column_name();
	                this.state = 443;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 439;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 440;
	                    this.column_name();
	                    this.state = 445;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 450;
	        this.match(SQLtinyParser.K_ON);
	        this.state = 454;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        if(la_===1) {
	            this.state = 451;
	            this.database_name();
	            this.state = 452;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 456;
	        this.table_name();
	        this.state = 460;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===73) {
	            this.state = 457;
	            this.match(SQLtinyParser.K_FOR);
	            this.state = 458;
	            this.match(SQLtinyParser.K_EACH);
	            this.state = 459;
	            this.match(SQLtinyParser.K_ROW);
	        }

	        this.state = 464;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===145) {
	            this.state = 462;
	            this.match(SQLtinyParser.K_WHEN);
	            this.state = 463;
	            this.expr(0);
	        }

	        this.state = 466;
	        this.match(SQLtinyParser.K_BEGIN);
	        this.state = 475; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 471;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 467;
	                this.update_stmt();
	                break;

	            case 2:
	                this.state = 468;
	                this.insert_stmt();
	                break;

	            case 3:
	                this.state = 469;
	                this.delete_stmt();
	                break;

	            case 4:
	                this.state = 470;
	                this.select_stmt();
	                break;

	            }
	            this.state = 473;
	            this.match(SQLtinyParser.SCOL);
	            this.state = 477; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===59 || _la===88 || ((((_la - 122)) & ~0x1f) === 0 && ((1 << (_la - 122)) & 34734145) !== 0));
	        this.state = 479;
	        this.match(SQLtinyParser.K_END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_view_stmt() {
	    let localctx = new Create_view_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, SQLtinyParser.RULE_create_view_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 481;
	        this.match(SQLtinyParser.K_CREATE);
	        this.state = 483;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131 || _la===132) {
	            this.state = 482;
	            _la = this._input.LA(1);
	            if(!(_la===131 || _la===132)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 485;
	        this.match(SQLtinyParser.K_VIEW);
	        this.state = 489;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        if(la_===1) {
	            this.state = 486;
	            this.match(SQLtinyParser.K_IF);
	            this.state = 487;
	            this.match(SQLtinyParser.K_NOT);
	            this.state = 488;
	            this.match(SQLtinyParser.K_EXISTS);

	        }
	        this.state = 494;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	        if(la_===1) {
	            this.state = 491;
	            this.database_name();
	            this.state = 492;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 496;
	        this.view_name();
	        this.state = 497;
	        this.match(SQLtinyParser.K_AS);
	        this.state = 498;
	        this.select_stmt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_virtual_table_stmt() {
	    let localctx = new Create_virtual_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, SQLtinyParser.RULE_create_virtual_table_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 500;
	        this.match(SQLtinyParser.K_CREATE);
	        this.state = 501;
	        this.match(SQLtinyParser.K_VIRTUAL);
	        this.state = 502;
	        this.match(SQLtinyParser.K_TABLE);
	        this.state = 506;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	        if(la_===1) {
	            this.state = 503;
	            this.match(SQLtinyParser.K_IF);
	            this.state = 504;
	            this.match(SQLtinyParser.K_NOT);
	            this.state = 505;
	            this.match(SQLtinyParser.K_EXISTS);

	        }
	        this.state = 511;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	        if(la_===1) {
	            this.state = 508;
	            this.database_name();
	            this.state = 509;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 513;
	        this.table_name();
	        this.state = 514;
	        this.match(SQLtinyParser.K_USING);
	        this.state = 515;
	        this.module_name();
	        this.state = 527;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 516;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 517;
	            this.module_argument();
	            this.state = 522;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 518;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 519;
	                this.module_argument();
	                this.state = 524;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 525;
	            this.match(SQLtinyParser.CLOSE_PAR);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delete_stmt() {
	    let localctx = new Delete_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, SQLtinyParser.RULE_delete_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 530;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 529;
	            this.with_clause();
	        }

	        this.state = 532;
	        this.match(SQLtinyParser.K_DELETE);
	        this.state = 533;
	        this.match(SQLtinyParser.K_FROM);
	        this.state = 534;
	        this.qualified_table_name();
	        this.state = 537;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 535;
	            this.match(SQLtinyParser.K_WHERE);
	            this.state = 536;
	            this.expr(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delete_stmt_limited() {
	    let localctx = new Delete_stmt_limitedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, SQLtinyParser.RULE_delete_stmt_limited);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 540;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 539;
	            this.with_clause();
	        }

	        this.state = 542;
	        this.match(SQLtinyParser.K_DELETE);
	        this.state = 543;
	        this.match(SQLtinyParser.K_FROM);
	        this.state = 544;
	        this.qualified_table_name();
	        this.state = 547;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 545;
	            this.match(SQLtinyParser.K_WHERE);
	            this.state = 546;
	            this.expr(0);
	        }

	        this.state = 567;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98 || _la===109) {
	            this.state = 559;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===109) {
	                this.state = 549;
	                this.match(SQLtinyParser.K_ORDER);
	                this.state = 550;
	                this.match(SQLtinyParser.K_BY);
	                this.state = 551;
	                this.ordering_term();
	                this.state = 556;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 552;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 553;
	                    this.ordering_term();
	                    this.state = 558;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 561;
	            this.match(SQLtinyParser.K_LIMIT);
	            this.state = 562;
	            this.expr(0);
	            this.state = 565;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5 || _la===106) {
	                this.state = 563;
	                _la = this._input.LA(1);
	                if(!(_la===5 || _la===106)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 564;
	                this.expr(0);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	detach_stmt() {
	    let localctx = new Detach_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, SQLtinyParser.RULE_detach_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 569;
	        this.match(SQLtinyParser.K_DETACH);
	        this.state = 571;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	        if(la_===1) {
	            this.state = 570;
	            this.match(SQLtinyParser.K_DATABASE);

	        }
	        this.state = 573;
	        this.database_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_index_stmt() {
	    let localctx = new Drop_index_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, SQLtinyParser.RULE_drop_index_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 575;
	        this.match(SQLtinyParser.K_DROP);
	        this.state = 576;
	        this.match(SQLtinyParser.K_INDEX);
	        this.state = 579;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        if(la_===1) {
	            this.state = 577;
	            this.match(SQLtinyParser.K_IF);
	            this.state = 578;
	            this.match(SQLtinyParser.K_EXISTS);

	        }
	        this.state = 584;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        if(la_===1) {
	            this.state = 581;
	            this.database_name();
	            this.state = 582;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 586;
	        this.index_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_table_stmt() {
	    let localctx = new Drop_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, SQLtinyParser.RULE_drop_table_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 588;
	        this.match(SQLtinyParser.K_DROP);
	        this.state = 589;
	        this.match(SQLtinyParser.K_TABLE);
	        this.state = 592;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        if(la_===1) {
	            this.state = 590;
	            this.match(SQLtinyParser.K_IF);
	            this.state = 591;
	            this.match(SQLtinyParser.K_EXISTS);

	        }
	        this.state = 597;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        if(la_===1) {
	            this.state = 594;
	            this.database_name();
	            this.state = 595;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 599;
	        this.table_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_trigger_stmt() {
	    let localctx = new Drop_trigger_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, SQLtinyParser.RULE_drop_trigger_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 601;
	        this.match(SQLtinyParser.K_DROP);
	        this.state = 602;
	        this.match(SQLtinyParser.K_TRIGGER);
	        this.state = 605;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        if(la_===1) {
	            this.state = 603;
	            this.match(SQLtinyParser.K_IF);
	            this.state = 604;
	            this.match(SQLtinyParser.K_EXISTS);

	        }
	        this.state = 610;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        if(la_===1) {
	            this.state = 607;
	            this.database_name();
	            this.state = 608;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 612;
	        this.trigger_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_view_stmt() {
	    let localctx = new Drop_view_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, SQLtinyParser.RULE_drop_view_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 614;
	        this.match(SQLtinyParser.K_DROP);
	        this.state = 615;
	        this.match(SQLtinyParser.K_VIEW);
	        this.state = 618;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        if(la_===1) {
	            this.state = 616;
	            this.match(SQLtinyParser.K_IF);
	            this.state = 617;
	            this.match(SQLtinyParser.K_EXISTS);

	        }
	        this.state = 623;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	        if(la_===1) {
	            this.state = 620;
	            this.database_name();
	            this.state = 621;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 625;
	        this.view_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	factored_select_stmt() {
	    let localctx = new Factored_select_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, SQLtinyParser.RULE_factored_select_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 639;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 627;
	            this.match(SQLtinyParser.K_WITH);
	            this.state = 629;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	            if(la_===1) {
	                this.state = 628;
	                this.match(SQLtinyParser.K_RECURSIVE);

	            }
	            this.state = 631;
	            this.common_table_expression();
	            this.state = 636;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 632;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 633;
	                this.common_table_expression();
	                this.state = 638;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 641;
	        this.select_core();
	        this.state = 647;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===68 || _la===90 || _la===137) {
	            this.state = 642;
	            this.compound_operator();
	            this.state = 643;
	            this.select_core();
	            this.state = 649;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 660;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===109) {
	            this.state = 650;
	            this.match(SQLtinyParser.K_ORDER);
	            this.state = 651;
	            this.match(SQLtinyParser.K_BY);
	            this.state = 652;
	            this.ordering_term();
	            this.state = 657;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 653;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 654;
	                this.ordering_term();
	                this.state = 659;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 668;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98) {
	            this.state = 662;
	            this.match(SQLtinyParser.K_LIMIT);
	            this.state = 663;
	            this.expr(0);
	            this.state = 666;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5 || _la===106) {
	                this.state = 664;
	                _la = this._input.LA(1);
	                if(!(_la===5 || _la===106)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 665;
	                this.expr(0);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insert_stmt() {
	    let localctx = new Insert_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, SQLtinyParser.RULE_insert_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 671;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 670;
	            this.with_clause();
	        }

	        this.state = 690;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 673;
	            this.match(SQLtinyParser.K_INSERT);
	            break;

	        case 2:
	            this.state = 674;
	            this.match(SQLtinyParser.K_REPLACE);
	            break;

	        case 3:
	            this.state = 675;
	            this.match(SQLtinyParser.K_INSERT);
	            this.state = 676;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 677;
	            this.match(SQLtinyParser.K_REPLACE);
	            break;

	        case 4:
	            this.state = 678;
	            this.match(SQLtinyParser.K_INSERT);
	            this.state = 679;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 680;
	            this.match(SQLtinyParser.K_ROLLBACK);
	            break;

	        case 5:
	            this.state = 681;
	            this.match(SQLtinyParser.K_INSERT);
	            this.state = 682;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 683;
	            this.match(SQLtinyParser.K_ABORT);
	            break;

	        case 6:
	            this.state = 684;
	            this.match(SQLtinyParser.K_INSERT);
	            this.state = 685;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 686;
	            this.match(SQLtinyParser.K_FAIL);
	            break;

	        case 7:
	            this.state = 687;
	            this.match(SQLtinyParser.K_INSERT);
	            this.state = 688;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 689;
	            this.match(SQLtinyParser.K_IGNORE);
	            break;

	        }
	        this.state = 692;
	        this.match(SQLtinyParser.K_INTO);
	        this.state = 696;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	        if(la_===1) {
	            this.state = 693;
	            this.database_name();
	            this.state = 694;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 698;
	        this.table_name();
	        this.state = 710;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 699;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 700;
	            this.column_name();
	            this.state = 705;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 701;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 702;
	                this.column_name();
	                this.state = 707;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 708;
	            this.match(SQLtinyParser.CLOSE_PAR);
	        }

	        this.state = 743;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 712;
	            this.match(SQLtinyParser.K_VALUES);
	            this.state = 713;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 714;
	            this.expr(0);
	            this.state = 719;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 715;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 716;
	                this.expr(0);
	                this.state = 721;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 722;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 737;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 723;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 724;
	                this.match(SQLtinyParser.OPEN_PAR);
	                this.state = 725;
	                this.expr(0);
	                this.state = 730;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 726;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 727;
	                    this.expr(0);
	                    this.state = 732;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 733;
	                this.match(SQLtinyParser.CLOSE_PAR);
	                this.state = 739;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.state = 740;
	            this.select_stmt();
	            break;

	        case 3:
	            this.state = 741;
	            this.match(SQLtinyParser.K_DEFAULT);
	            this.state = 742;
	            this.match(SQLtinyParser.K_VALUES);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragma_stmt() {
	    let localctx = new Pragma_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, SQLtinyParser.RULE_pragma_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 745;
	        this.match(SQLtinyParser.K_PRAGMA);
	        this.state = 749;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        if(la_===1) {
	            this.state = 746;
	            this.database_name();
	            this.state = 747;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 751;
	        this.pragma_name();
	        this.state = 758;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 6:
	        	this.state = 752;
	        	this.match(SQLtinyParser.ASSIGN);
	        	this.state = 753;
	        	this.pragma_value();
	        	break;
	        case 3:
	        	this.state = 754;
	        	this.match(SQLtinyParser.OPEN_PAR);
	        	this.state = 755;
	        	this.pragma_value();
	        	this.state = 756;
	        	this.match(SQLtinyParser.CLOSE_PAR);
	        	break;
	        case -1:
	        case 1:
	        case 30:
	        case 31:
	        case 35:
	        case 38:
	        case 47:
	        case 50:
	        case 59:
	        case 61:
	        case 63:
	        case 66:
	        case 71:
	        case 88:
	        case 112:
	        case 119:
	        case 120:
	        case 122:
	        case 125:
	        case 127:
	        case 128:
	        case 139:
	        case 141:
	        case 142:
	        case 147:
	        case 157:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reindex_stmt() {
	    let localctx = new Reindex_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, SQLtinyParser.RULE_reindex_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 760;
	        this.match(SQLtinyParser.K_REINDEX);
	        this.state = 771;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	        if(la_===1) {
	            this.state = 761;
	            this.collation_name();

	        } else if(la_===2) {
	            this.state = 765;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	            if(la_===1) {
	                this.state = 762;
	                this.database_name();
	                this.state = 763;
	                this.match(SQLtinyParser.DOT);

	            }
	            this.state = 769;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 767;
	                this.table_name();
	                break;

	            case 2:
	                this.state = 768;
	                this.index_name();
	                break;

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	release_stmt() {
	    let localctx = new Release_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, SQLtinyParser.RULE_release_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 773;
	        this.match(SQLtinyParser.K_RELEASE);
	        this.state = 775;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	        if(la_===1) {
	            this.state = 774;
	            this.match(SQLtinyParser.K_SAVEPOINT);

	        }
	        this.state = 777;
	        this.savepoint_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollback_stmt() {
	    let localctx = new Rollback_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, SQLtinyParser.RULE_rollback_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 779;
	        this.match(SQLtinyParser.K_ROLLBACK);
	        this.state = 784;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===135) {
	            this.state = 780;
	            this.match(SQLtinyParser.K_TRANSACTION);
	            this.state = 782;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	            if(la_===1) {
	                this.state = 781;
	                this.transaction_name();

	            }
	        }

	        this.state = 791;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===134) {
	            this.state = 786;
	            this.match(SQLtinyParser.K_TO);
	            this.state = 788;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	            if(la_===1) {
	                this.state = 787;
	                this.match(SQLtinyParser.K_SAVEPOINT);

	            }
	            this.state = 790;
	            this.savepoint_name();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	savepoint_stmt() {
	    let localctx = new Savepoint_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, SQLtinyParser.RULE_savepoint_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 793;
	        this.match(SQLtinyParser.K_SAVEPOINT);
	        this.state = 794;
	        this.savepoint_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_select_stmt() {
	    let localctx = new Simple_select_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, SQLtinyParser.RULE_simple_select_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 808;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 796;
	            this.match(SQLtinyParser.K_WITH);
	            this.state = 798;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	            if(la_===1) {
	                this.state = 797;
	                this.match(SQLtinyParser.K_RECURSIVE);

	            }
	            this.state = 800;
	            this.common_table_expression();
	            this.state = 805;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 801;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 802;
	                this.common_table_expression();
	                this.state = 807;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 810;
	        this.select_core();
	        this.state = 821;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===109) {
	            this.state = 811;
	            this.match(SQLtinyParser.K_ORDER);
	            this.state = 812;
	            this.match(SQLtinyParser.K_BY);
	            this.state = 813;
	            this.ordering_term();
	            this.state = 818;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 814;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 815;
	                this.ordering_term();
	                this.state = 820;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 829;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98) {
	            this.state = 823;
	            this.match(SQLtinyParser.K_LIMIT);
	            this.state = 824;
	            this.expr(0);
	            this.state = 827;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5 || _la===106) {
	                this.state = 825;
	                _la = this._input.LA(1);
	                if(!(_la===5 || _la===106)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 826;
	                this.expr(0);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_stmt() {
	    let localctx = new Select_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, SQLtinyParser.RULE_select_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 843;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 831;
	            this.match(SQLtinyParser.K_WITH);
	            this.state = 833;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	            if(la_===1) {
	                this.state = 832;
	                this.match(SQLtinyParser.K_RECURSIVE);

	            }
	            this.state = 835;
	            this.common_table_expression();
	            this.state = 840;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 836;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 837;
	                this.common_table_expression();
	                this.state = 842;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 845;
	        this.select_or_values();
	        this.state = 851;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===68 || _la===90 || _la===137) {
	            this.state = 846;
	            this.compound_operator();
	            this.state = 847;
	            this.select_or_values();
	            this.state = 853;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 864;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===109) {
	            this.state = 854;
	            this.match(SQLtinyParser.K_ORDER);
	            this.state = 855;
	            this.match(SQLtinyParser.K_BY);
	            this.state = 856;
	            this.ordering_term();
	            this.state = 861;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 857;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 858;
	                this.ordering_term();
	                this.state = 863;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 872;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98) {
	            this.state = 866;
	            this.match(SQLtinyParser.K_LIMIT);
	            this.state = 867;
	            this.expr(0);
	            this.state = 870;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5 || _la===106) {
	                this.state = 868;
	                _la = this._input.LA(1);
	                if(!(_la===5 || _la===106)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 869;
	                this.expr(0);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_or_values() {
	    let localctx = new Select_or_valuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, SQLtinyParser.RULE_select_or_values);
	    var _la = 0;
	    try {
	        this.state = 948;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 128:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 874;
	            this.match(SQLtinyParser.K_SELECT);
	            this.state = 876;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	            if(la_===1) {
	                this.state = 875;
	                _la = this._input.LA(1);
	                if(!(_la===29 || _la===62)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 878;
	            this.result_column();
	            this.state = 883;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 879;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 880;
	                this.result_column();
	                this.state = 885;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 898;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===75) {
	                this.state = 886;
	                this.match(SQLtinyParser.K_FROM);
	                this.state = 896;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 887;
	                    this.table_or_subquery();
	                    this.state = 892;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===5) {
	                        this.state = 888;
	                        this.match(SQLtinyParser.COMMA);
	                        this.state = 889;
	                        this.table_or_subquery();
	                        this.state = 894;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    break;

	                case 2:
	                    this.state = 895;
	                    this.join_clause();
	                    break;

	                }
	            }

	            this.state = 902;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===146) {
	                this.state = 900;
	                this.match(SQLtinyParser.K_WHERE);
	                this.state = 901;
	                this.expr(0);
	            }

	            this.state = 918;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===78) {
	                this.state = 904;
	                this.match(SQLtinyParser.K_GROUP);
	                this.state = 905;
	                this.match(SQLtinyParser.K_BY);
	                this.state = 906;
	                this.expr(0);
	                this.state = 911;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 907;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 908;
	                    this.expr(0);
	                    this.state = 913;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 916;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===79) {
	                    this.state = 914;
	                    this.match(SQLtinyParser.K_HAVING);
	                    this.state = 915;
	                    this.expr(0);
	                }

	            }

	            break;
	        case 142:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 920;
	            this.match(SQLtinyParser.K_VALUES);
	            this.state = 921;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 922;
	            this.expr(0);
	            this.state = 927;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 923;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 924;
	                this.expr(0);
	                this.state = 929;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 930;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 945;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 931;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 932;
	                this.match(SQLtinyParser.OPEN_PAR);
	                this.state = 933;
	                this.expr(0);
	                this.state = 938;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 934;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 935;
	                    this.expr(0);
	                    this.state = 940;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 941;
	                this.match(SQLtinyParser.CLOSE_PAR);
	                this.state = 947;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update_stmt() {
	    let localctx = new Update_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, SQLtinyParser.RULE_update_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 951;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 950;
	            this.with_clause();
	        }

	        this.state = 953;
	        this.match(SQLtinyParser.K_UPDATE);
	        this.state = 964;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
	        if(la_===1) {
	            this.state = 954;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 955;
	            this.match(SQLtinyParser.K_ROLLBACK);

	        } else if(la_===2) {
	            this.state = 956;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 957;
	            this.match(SQLtinyParser.K_ABORT);

	        } else if(la_===3) {
	            this.state = 958;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 959;
	            this.match(SQLtinyParser.K_REPLACE);

	        } else if(la_===4) {
	            this.state = 960;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 961;
	            this.match(SQLtinyParser.K_FAIL);

	        } else if(la_===5) {
	            this.state = 962;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 963;
	            this.match(SQLtinyParser.K_IGNORE);

	        }
	        this.state = 966;
	        this.qualified_table_name();
	        this.state = 967;
	        this.match(SQLtinyParser.K_SET);
	        this.state = 968;
	        this.column_name();
	        this.state = 969;
	        this.match(SQLtinyParser.ASSIGN);
	        this.state = 970;
	        this.expr(0);
	        this.state = 978;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 971;
	            this.match(SQLtinyParser.COMMA);
	            this.state = 972;
	            this.column_name();
	            this.state = 973;
	            this.match(SQLtinyParser.ASSIGN);
	            this.state = 974;
	            this.expr(0);
	            this.state = 980;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 983;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 981;
	            this.match(SQLtinyParser.K_WHERE);
	            this.state = 982;
	            this.expr(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update_stmt_limited() {
	    let localctx = new Update_stmt_limitedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, SQLtinyParser.RULE_update_stmt_limited);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 986;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 985;
	            this.with_clause();
	        }

	        this.state = 988;
	        this.match(SQLtinyParser.K_UPDATE);
	        this.state = 999;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
	        if(la_===1) {
	            this.state = 989;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 990;
	            this.match(SQLtinyParser.K_ROLLBACK);

	        } else if(la_===2) {
	            this.state = 991;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 992;
	            this.match(SQLtinyParser.K_ABORT);

	        } else if(la_===3) {
	            this.state = 993;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 994;
	            this.match(SQLtinyParser.K_REPLACE);

	        } else if(la_===4) {
	            this.state = 995;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 996;
	            this.match(SQLtinyParser.K_FAIL);

	        } else if(la_===5) {
	            this.state = 997;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 998;
	            this.match(SQLtinyParser.K_IGNORE);

	        }
	        this.state = 1001;
	        this.qualified_table_name();
	        this.state = 1002;
	        this.match(SQLtinyParser.K_SET);
	        this.state = 1003;
	        this.column_name();
	        this.state = 1004;
	        this.match(SQLtinyParser.ASSIGN);
	        this.state = 1005;
	        this.expr(0);
	        this.state = 1013;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 1006;
	            this.match(SQLtinyParser.COMMA);
	            this.state = 1007;
	            this.column_name();
	            this.state = 1008;
	            this.match(SQLtinyParser.ASSIGN);
	            this.state = 1009;
	            this.expr(0);
	            this.state = 1015;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1018;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 1016;
	            this.match(SQLtinyParser.K_WHERE);
	            this.state = 1017;
	            this.expr(0);
	        }

	        this.state = 1038;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98 || _la===109) {
	            this.state = 1030;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===109) {
	                this.state = 1020;
	                this.match(SQLtinyParser.K_ORDER);
	                this.state = 1021;
	                this.match(SQLtinyParser.K_BY);
	                this.state = 1022;
	                this.ordering_term();
	                this.state = 1027;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 1023;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 1024;
	                    this.ordering_term();
	                    this.state = 1029;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1032;
	            this.match(SQLtinyParser.K_LIMIT);
	            this.state = 1033;
	            this.expr(0);
	            this.state = 1036;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5 || _la===106) {
	                this.state = 1034;
	                _la = this._input.LA(1);
	                if(!(_la===5 || _la===106)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1035;
	                this.expr(0);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vacuum_stmt() {
	    let localctx = new Vacuum_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, SQLtinyParser.RULE_vacuum_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1040;
	        this.match(SQLtinyParser.K_VACUUM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_def() {
	    let localctx = new Column_defContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, SQLtinyParser.RULE_column_def);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1042;
	        this.column_name();
	        this.state = 1044;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
	        if(la_===1) {
	            this.state = 1043;
	            this.type_name();

	        }
	        this.state = 1049;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 4131) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 34821) !== 0) || _la===138) {
	            this.state = 1046;
	            this.column_constraint();
	            this.state = 1051;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name() {
	    let localctx = new Type_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, SQLtinyParser.RULE_type_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1053; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1052;
	        		this.name();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1055; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,146, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 1067;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
	        if(la_===1) {
	            this.state = 1057;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1058;
	            this.signed_number();
	            this.state = 1059;
	            this.match(SQLtinyParser.CLOSE_PAR);

	        } else if(la_===2) {
	            this.state = 1061;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1062;
	            this.signed_number();
	            this.state = 1063;
	            this.match(SQLtinyParser.COMMA);
	            this.state = 1064;
	            this.signed_number();
	            this.state = 1065;
	            this.match(SQLtinyParser.CLOSE_PAR);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_constraint() {
	    let localctx = new Column_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, SQLtinyParser.RULE_column_constraint);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1071;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 1069;
	            this.match(SQLtinyParser.K_CONSTRAINT);
	            this.state = 1070;
	            this.name();
	        }

	        this.state = 1106;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 113:
	            this.state = 1073;
	            this.match(SQLtinyParser.K_PRIMARY);
	            this.state = 1074;
	            this.match(SQLtinyParser.K_KEY);
	            this.state = 1076;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===34 || _la===60) {
	                this.state = 1075;
	                _la = this._input.LA(1);
	                if(!(_la===34 || _la===60)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 1078;
	            this.conflict_clause();
	            this.state = 1080;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===36) {
	                this.state = 1079;
	                this.match(SQLtinyParser.K_AUTOINCREMENT);
	            }

	            break;
	        case 102:
	        case 104:
	            this.state = 1083;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===102) {
	                this.state = 1082;
	                this.match(SQLtinyParser.K_NOT);
	            }

	            this.state = 1085;
	            this.match(SQLtinyParser.K_NULL);
	            this.state = 1086;
	            this.conflict_clause();
	            break;
	        case 138:
	            this.state = 1087;
	            this.match(SQLtinyParser.K_UNIQUE);
	            this.state = 1088;
	            this.conflict_clause();
	            break;
	        case 44:
	            this.state = 1089;
	            this.match(SQLtinyParser.K_CHECK);
	            this.state = 1090;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1091;
	            this.expr(0);
	            this.state = 1092;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            break;
	        case 56:
	            this.state = 1094;
	            this.match(SQLtinyParser.K_DEFAULT);
	            this.state = 1101;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1095;
	                this.signed_number();
	                break;

	            case 2:
	                this.state = 1096;
	                this.literal_value();
	                break;

	            case 3:
	                this.state = 1097;
	                this.match(SQLtinyParser.OPEN_PAR);
	                this.state = 1098;
	                this.expr(0);
	                this.state = 1099;
	                this.match(SQLtinyParser.CLOSE_PAR);
	                break;

	            }
	            break;
	        case 45:
	            this.state = 1103;
	            this.match(SQLtinyParser.K_COLLATE);
	            this.state = 1104;
	            this.collation_name();
	            break;
	        case 117:
	            this.state = 1105;
	            this.foreign_key_clause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conflict_clause() {
	    let localctx = new Conflict_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, SQLtinyParser.RULE_conflict_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1111;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===107) {
	            this.state = 1108;
	            this.match(SQLtinyParser.K_ON);
	            this.state = 1109;
	            this.match(SQLtinyParser.K_CONFLICT);
	            this.state = 1110;
	            _la = this._input.LA(1);
	            if(!(_la===25 || _la===72 || _la===81 || _la===122 || _la===125)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 78;
	    this.enterRecursionRule(localctx, 78, SQLtinyParser.RULE_expr, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1189;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1114;
	            this.literal_value();
	            break;

	        case 2:
	            this.state = 1115;
	            this.match(SQLtinyParser.BIND_PARAMETER);
	            break;

	        case 3:
	            this.state = 1124;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
	            if(la_===1) {
	                this.state = 1119;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
	                if(la_===1) {
	                    this.state = 1116;
	                    this.database_name();
	                    this.state = 1117;
	                    this.match(SQLtinyParser.DOT);

	                }
	                this.state = 1121;
	                this.table_name();
	                this.state = 1122;
	                this.match(SQLtinyParser.DOT);

	            }
	            this.state = 1126;
	            this.column_name();
	            break;

	        case 4:
	            this.state = 1127;
	            this.unary_operator();
	            this.state = 1128;
	            this.expr(21);
	            break;

	        case 5:
	            this.state = 1130;
	            this.function_name();
	            this.state = 1131;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1144;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 3:
	            case 8:
	            case 9:
	            case 10:
	            case 25:
	            case 26:
	            case 27:
	            case 28:
	            case 29:
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 34:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 39:
	            case 40:
	            case 41:
	            case 42:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 47:
	            case 48:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 58:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            	this.state = 1133;
	            	this._errHandler.sync(this);
	            	var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
	            	if(la_===1) {
	            	    this.state = 1132;
	            	    this.match(SQLtinyParser.K_DISTINCT);

	            	}
	            	this.state = 1135;
	            	this.expr(0);
	            	this.state = 1140;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	while(_la===5) {
	            	    this.state = 1136;
	            	    this.match(SQLtinyParser.COMMA);
	            	    this.state = 1137;
	            	    this.expr(0);
	            	    this.state = 1142;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	}
	            	break;
	            case 7:
	            	this.state = 1143;
	            	this.match(SQLtinyParser.STAR);
	            	break;
	            case 4:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 1146;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            break;

	        case 6:
	            this.state = 1148;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1149;
	            this.expr(0);
	            this.state = 1150;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            break;

	        case 7:
	            this.state = 1152;
	            this.match(SQLtinyParser.K_CAST);
	            this.state = 1153;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1154;
	            this.expr(0);
	            this.state = 1155;
	            this.match(SQLtinyParser.K_AS);
	            this.state = 1156;
	            this.type_name();
	            this.state = 1157;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            break;

	        case 8:
	            this.state = 1163;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===70 || _la===102) {
	                this.state = 1160;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===102) {
	                    this.state = 1159;
	                    this.match(SQLtinyParser.K_NOT);
	                }

	                this.state = 1162;
	                this.match(SQLtinyParser.K_EXISTS);
	            }

	            this.state = 1165;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1166;
	            this.select_stmt();
	            this.state = 1167;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            break;

	        case 9:
	            this.state = 1169;
	            this.match(SQLtinyParser.K_CASE);
	            this.state = 1171;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
	            if(la_===1) {
	                this.state = 1170;
	                this.expr(0);

	            }
	            this.state = 1178; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1173;
	                this.match(SQLtinyParser.K_WHEN);
	                this.state = 1174;
	                this.expr(0);
	                this.state = 1175;
	                this.match(SQLtinyParser.K_THEN);
	                this.state = 1176;
	                this.expr(0);
	                this.state = 1180; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===145);
	            this.state = 1184;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===65) {
	                this.state = 1182;
	                this.match(SQLtinyParser.K_ELSE);
	                this.state = 1183;
	                this.expr(0);
	            }

	            this.state = 1186;
	            this.match(SQLtinyParser.K_END);
	            break;

	        case 10:
	            this.state = 1188;
	            this.raise_function();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1291;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,178,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1289;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 1191;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 1192;
	                    this.match(SQLtinyParser.PIPE2);
	                    this.state = 1193;
	                    this.expr(21);
	                    break;

	                case 2:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 1194;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 1195;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 12416) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1196;
	                    this.expr(20);
	                    break;

	                case 3:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 1197;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 1198;
	                    _la = this._input.LA(1);
	                    if(!(_la===8 || _la===9)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1199;
	                    this.expr(19);
	                    break;

	                case 4:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 1200;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 1201;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 245760) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1202;
	                    this.expr(18);
	                    break;

	                case 5:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 1203;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 1204;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 3932160) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1205;
	                    this.expr(17);
	                    break;

	                case 6:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 1206;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 1219;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 1207;
	                        this.match(SQLtinyParser.ASSIGN);
	                        break;

	                    case 2:
	                        this.state = 1208;
	                        this.match(SQLtinyParser.EQ);
	                        break;

	                    case 3:
	                        this.state = 1209;
	                        this.match(SQLtinyParser.NOT_EQ1);
	                        break;

	                    case 4:
	                        this.state = 1210;
	                        this.match(SQLtinyParser.NOT_EQ2);
	                        break;

	                    case 5:
	                        this.state = 1211;
	                        this.match(SQLtinyParser.K_IS);
	                        break;

	                    case 6:
	                        this.state = 1212;
	                        this.match(SQLtinyParser.K_IS);
	                        this.state = 1213;
	                        this.match(SQLtinyParser.K_NOT);
	                        break;

	                    case 7:
	                        this.state = 1214;
	                        this.match(SQLtinyParser.K_IN);
	                        break;

	                    case 8:
	                        this.state = 1215;
	                        this.match(SQLtinyParser.K_LIKE);
	                        break;

	                    case 9:
	                        this.state = 1216;
	                        this.match(SQLtinyParser.K_GLOB);
	                        break;

	                    case 10:
	                        this.state = 1217;
	                        this.match(SQLtinyParser.K_MATCH);
	                        break;

	                    case 11:
	                        this.state = 1218;
	                        this.match(SQLtinyParser.K_REGEXP);
	                        break;

	                    }
	                    this.state = 1221;
	                    this.expr(16);
	                    break;

	                case 7:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 1222;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 1223;
	                    this.match(SQLtinyParser.K_AND);
	                    this.state = 1224;
	                    this.expr(15);
	                    break;

	                case 8:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 1225;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 1226;
	                    this.match(SQLtinyParser.K_OR);
	                    this.state = 1227;
	                    this.expr(14);
	                    break;

	                case 9:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 1228;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 1229;
	                    this.match(SQLtinyParser.K_IS);
	                    this.state = 1231;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
	                    if(la_===1) {
	                        this.state = 1230;
	                        this.match(SQLtinyParser.K_NOT);

	                    }
	                    this.state = 1233;
	                    this.expr(7);
	                    break;

	                case 10:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 1234;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 1236;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===102) {
	                        this.state = 1235;
	                        this.match(SQLtinyParser.K_NOT);
	                    }

	                    this.state = 1238;
	                    this.match(SQLtinyParser.K_BETWEEN);
	                    this.state = 1239;
	                    this.expr(0);
	                    this.state = 1240;
	                    this.match(SQLtinyParser.K_AND);
	                    this.state = 1241;
	                    this.expr(6);
	                    break;

	                case 11:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 1243;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 1244;
	                    this.match(SQLtinyParser.K_COLLATE);
	                    this.state = 1245;
	                    this.collation_name();
	                    break;

	                case 12:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 1246;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 1248;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===102) {
	                        this.state = 1247;
	                        this.match(SQLtinyParser.K_NOT);
	                    }

	                    this.state = 1250;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 5242881) !== 0) || _la===118)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1251;
	                    this.expr(0);
	                    this.state = 1254;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
	                    if(la_===1) {
	                        this.state = 1252;
	                        this.match(SQLtinyParser.K_ESCAPE);
	                        this.state = 1253;
	                        this.expr(0);

	                    }
	                    break;

	                case 13:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 1256;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 1261;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case 93:
	                        this.state = 1257;
	                        this.match(SQLtinyParser.K_ISNULL);
	                        break;
	                    case 103:
	                        this.state = 1258;
	                        this.match(SQLtinyParser.K_NOTNULL);
	                        break;
	                    case 102:
	                        this.state = 1259;
	                        this.match(SQLtinyParser.K_NOT);
	                        this.state = 1260;
	                        this.match(SQLtinyParser.K_NULL);
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    }
	                    break;

	                case 14:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 1263;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 1265;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===102) {
	                        this.state = 1264;
	                        this.match(SQLtinyParser.K_NOT);
	                    }

	                    this.state = 1267;
	                    this.match(SQLtinyParser.K_IN);
	                    this.state = 1287;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 1268;
	                        this.match(SQLtinyParser.OPEN_PAR);
	                        this.state = 1278;
	                        this._errHandler.sync(this);
	                        var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
	                        if(la_===1) {
	                            this.state = 1269;
	                            this.select_stmt();

	                        } else if(la_===2) {
	                            this.state = 1270;
	                            this.expr(0);
	                            this.state = 1275;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                            while(_la===5) {
	                                this.state = 1271;
	                                this.match(SQLtinyParser.COMMA);
	                                this.state = 1272;
	                                this.expr(0);
	                                this.state = 1277;
	                                this._errHandler.sync(this);
	                                _la = this._input.LA(1);
	                            }

	                        }
	                        this.state = 1280;
	                        this.match(SQLtinyParser.CLOSE_PAR);
	                        break;

	                    case 2:
	                        this.state = 1284;
	                        this._errHandler.sync(this);
	                        var la_ = this._interp.adaptivePredict(this._input,175,this._ctx);
	                        if(la_===1) {
	                            this.state = 1281;
	                            this.database_name();
	                            this.state = 1282;
	                            this.match(SQLtinyParser.DOT);

	                        }
	                        this.state = 1286;
	                        this.table_name();
	                        break;

	                    }
	                    break;

	                } 
	            }
	            this.state = 1293;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,178,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	foreign_key_clause() {
	    let localctx = new Foreign_key_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, SQLtinyParser.RULE_foreign_key_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1294;
	        this.match(SQLtinyParser.K_REFERENCES);
	        this.state = 1295;
	        this.foreign_table();
	        this.state = 1307;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 1296;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1297;
	            this.column_name();
	            this.state = 1302;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 1298;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 1299;
	                this.column_name();
	                this.state = 1304;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1305;
	            this.match(SQLtinyParser.CLOSE_PAR);
	        }

	        this.state = 1327;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===99 || _la===107) {
	            this.state = 1323;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 107:
	                this.state = 1309;
	                this.match(SQLtinyParser.K_ON);
	                this.state = 1310;
	                _la = this._input.LA(1);
	                if(!(_la===59 || _la===139)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1319;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1311;
	                    this.match(SQLtinyParser.K_SET);
	                    this.state = 1312;
	                    this.match(SQLtinyParser.K_NULL);
	                    break;

	                case 2:
	                    this.state = 1313;
	                    this.match(SQLtinyParser.K_SET);
	                    this.state = 1314;
	                    this.match(SQLtinyParser.K_DEFAULT);
	                    break;

	                case 3:
	                    this.state = 1315;
	                    this.match(SQLtinyParser.K_CASCADE);
	                    break;

	                case 4:
	                    this.state = 1316;
	                    this.match(SQLtinyParser.K_RESTRICT);
	                    break;

	                case 5:
	                    this.state = 1317;
	                    this.match(SQLtinyParser.K_NO);
	                    this.state = 1318;
	                    this.match(SQLtinyParser.K_ACTION);
	                    break;

	                }
	                break;
	            case 99:
	                this.state = 1321;
	                this.match(SQLtinyParser.K_MATCH);
	                this.state = 1322;
	                this.name();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1329;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1340;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
	        if(la_===1) {
	            this.state = 1331;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===102) {
	                this.state = 1330;
	                this.match(SQLtinyParser.K_NOT);
	            }

	            this.state = 1333;
	            this.match(SQLtinyParser.K_DEFERRABLE);
	            this.state = 1338;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
	            if(la_===1) {
	                this.state = 1334;
	                this.match(SQLtinyParser.K_INITIALLY);
	                this.state = 1335;
	                this.match(SQLtinyParser.K_DEFERRED);

	            } else if(la_===2) {
	                this.state = 1336;
	                this.match(SQLtinyParser.K_INITIALLY);
	                this.state = 1337;
	                this.match(SQLtinyParser.K_IMMEDIATE);

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	raise_function() {
	    let localctx = new Raise_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, SQLtinyParser.RULE_raise_function);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1342;
	        this.match(SQLtinyParser.K_RAISE);
	        this.state = 1343;
	        this.match(SQLtinyParser.OPEN_PAR);
	        this.state = 1348;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 81:
	            this.state = 1344;
	            this.match(SQLtinyParser.K_IGNORE);
	            break;
	        case 25:
	        case 72:
	        case 125:
	            this.state = 1345;
	            _la = this._input.LA(1);
	            if(!(_la===25 || _la===72 || _la===125)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1346;
	            this.match(SQLtinyParser.COMMA);
	            this.state = 1347;
	            this.error_message();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1350;
	        this.match(SQLtinyParser.CLOSE_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexed_column() {
	    let localctx = new Indexed_columnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, SQLtinyParser.RULE_indexed_column);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1352;
	        this.column_name();
	        this.state = 1355;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===45) {
	            this.state = 1353;
	            this.match(SQLtinyParser.K_COLLATE);
	            this.state = 1354;
	            this.collation_name();
	        }

	        this.state = 1358;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34 || _la===60) {
	            this.state = 1357;
	            _la = this._input.LA(1);
	            if(!(_la===34 || _la===60)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_constraint() {
	    let localctx = new Table_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, SQLtinyParser.RULE_table_constraint);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1362;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 1360;
	            this.match(SQLtinyParser.K_CONSTRAINT);
	            this.state = 1361;
	            this.name();
	        }

	        this.state = 1400;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 113:
	        case 138:
	            this.state = 1367;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 113:
	                this.state = 1364;
	                this.match(SQLtinyParser.K_PRIMARY);
	                this.state = 1365;
	                this.match(SQLtinyParser.K_KEY);
	                break;
	            case 138:
	                this.state = 1366;
	                this.match(SQLtinyParser.K_UNIQUE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1369;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1370;
	            this.indexed_column();
	            this.state = 1375;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 1371;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 1372;
	                this.indexed_column();
	                this.state = 1377;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1378;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 1379;
	            this.conflict_clause();
	            break;
	        case 44:
	            this.state = 1381;
	            this.match(SQLtinyParser.K_CHECK);
	            this.state = 1382;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1383;
	            this.expr(0);
	            this.state = 1384;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            break;
	        case 74:
	            this.state = 1386;
	            this.match(SQLtinyParser.K_FOREIGN);
	            this.state = 1387;
	            this.match(SQLtinyParser.K_KEY);
	            this.state = 1388;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1389;
	            this.column_name();
	            this.state = 1394;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 1390;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 1391;
	                this.column_name();
	                this.state = 1396;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1397;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 1398;
	            this.foreign_key_clause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_clause() {
	    let localctx = new With_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, SQLtinyParser.RULE_with_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1402;
	        this.match(SQLtinyParser.K_WITH);
	        this.state = 1404;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
	        if(la_===1) {
	            this.state = 1403;
	            this.match(SQLtinyParser.K_RECURSIVE);

	        }
	        this.state = 1406;
	        this.cte_table_name();
	        this.state = 1407;
	        this.match(SQLtinyParser.K_AS);
	        this.state = 1408;
	        this.match(SQLtinyParser.OPEN_PAR);
	        this.state = 1409;
	        this.select_stmt();
	        this.state = 1410;
	        this.match(SQLtinyParser.CLOSE_PAR);
	        this.state = 1420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 1411;
	            this.match(SQLtinyParser.COMMA);
	            this.state = 1412;
	            this.cte_table_name();
	            this.state = 1413;
	            this.match(SQLtinyParser.K_AS);
	            this.state = 1414;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1415;
	            this.select_stmt();
	            this.state = 1416;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 1422;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualified_table_name() {
	    let localctx = new Qualified_table_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, SQLtinyParser.RULE_qualified_table_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1426;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
	        if(la_===1) {
	            this.state = 1423;
	            this.database_name();
	            this.state = 1424;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 1428;
	        this.table_name();
	        this.state = 1434;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 85:
	        	this.state = 1429;
	        	this.match(SQLtinyParser.K_INDEXED);
	        	this.state = 1430;
	        	this.match(SQLtinyParser.K_BY);
	        	this.state = 1431;
	        	this.index_name();
	        	break;
	        case 102:
	        	this.state = 1432;
	        	this.match(SQLtinyParser.K_NOT);
	        	this.state = 1433;
	        	this.match(SQLtinyParser.K_INDEXED);
	        	break;
	        case -1:
	        case 1:
	        case 30:
	        case 31:
	        case 35:
	        case 38:
	        case 47:
	        case 50:
	        case 59:
	        case 61:
	        case 63:
	        case 66:
	        case 71:
	        case 88:
	        case 98:
	        case 109:
	        case 112:
	        case 119:
	        case 120:
	        case 122:
	        case 125:
	        case 127:
	        case 128:
	        case 129:
	        case 139:
	        case 141:
	        case 142:
	        case 146:
	        case 147:
	        case 157:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ordering_term() {
	    let localctx = new Ordering_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, SQLtinyParser.RULE_ordering_term);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1436;
	        this.expr(0);
	        this.state = 1439;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===45) {
	            this.state = 1437;
	            this.match(SQLtinyParser.K_COLLATE);
	            this.state = 1438;
	            this.collation_name();
	        }

	        this.state = 1442;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34 || _la===60) {
	            this.state = 1441;
	            _la = this._input.LA(1);
	            if(!(_la===34 || _la===60)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragma_value() {
	    let localctx = new Pragma_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, SQLtinyParser.RULE_pragma_value);
	    try {
	        this.state = 1447;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1444;
	            this.signed_number();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1445;
	            this.name();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1446;
	            this.match(SQLtinyParser.STRING_LITERAL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	common_table_expression() {
	    let localctx = new Common_table_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, SQLtinyParser.RULE_common_table_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1449;
	        this.table_name();
	        this.state = 1461;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 1450;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1451;
	            this.column_name();
	            this.state = 1456;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 1452;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 1453;
	                this.column_name();
	                this.state = 1458;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1459;
	            this.match(SQLtinyParser.CLOSE_PAR);
	        }

	        this.state = 1463;
	        this.match(SQLtinyParser.K_AS);
	        this.state = 1464;
	        this.match(SQLtinyParser.OPEN_PAR);
	        this.state = 1465;
	        this.select_stmt();
	        this.state = 1466;
	        this.match(SQLtinyParser.CLOSE_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	result_column() {
	    let localctx = new Result_columnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, SQLtinyParser.RULE_result_column);
	    var _la = 0;
	    try {
	        this.state = 1480;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1468;
	            this.match(SQLtinyParser.STAR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1469;
	            this.table_name();
	            this.state = 1470;
	            this.match(SQLtinyParser.DOT);
	            this.state = 1471;
	            this.match(SQLtinyParser.STAR);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1473;
	            this.expr(0);
	            this.state = 1478;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===33 || _la===149 || _la===152) {
	                this.state = 1475;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===33) {
	                    this.state = 1474;
	                    this.match(SQLtinyParser.K_AS);
	                }

	                this.state = 1477;
	                this.column_alias();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_or_subquery() {
	    let localctx = new Table_or_subqueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, SQLtinyParser.RULE_table_or_subquery);
	    var _la = 0;
	    try {
	        this.state = 1529;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1485;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
	            if(la_===1) {
	                this.state = 1482;
	                this.database_name();
	                this.state = 1483;
	                this.match(SQLtinyParser.DOT);

	            }
	            this.state = 1487;
	            this.table_name();
	            this.state = 1492;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
	            if(la_===1) {
	                this.state = 1489;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
	                if(la_===1) {
	                    this.state = 1488;
	                    this.match(SQLtinyParser.K_AS);

	                }
	                this.state = 1491;
	                this.table_alias();

	            }
	            this.state = 1499;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 85:
	            	this.state = 1494;
	            	this.match(SQLtinyParser.K_INDEXED);
	            	this.state = 1495;
	            	this.match(SQLtinyParser.K_BY);
	            	this.state = 1496;
	            	this.index_name();
	            	break;
	            case 102:
	            	this.state = 1497;
	            	this.match(SQLtinyParser.K_NOT);
	            	this.state = 1498;
	            	this.match(SQLtinyParser.K_INDEXED);
	            	break;
	            case -1:
	            case 1:
	            case 4:
	            case 5:
	            case 30:
	            case 31:
	            case 35:
	            case 38:
	            case 47:
	            case 50:
	            case 51:
	            case 59:
	            case 61:
	            case 63:
	            case 66:
	            case 68:
	            case 71:
	            case 78:
	            case 87:
	            case 88:
	            case 90:
	            case 94:
	            case 96:
	            case 98:
	            case 100:
	            case 107:
	            case 109:
	            case 112:
	            case 119:
	            case 120:
	            case 122:
	            case 125:
	            case 127:
	            case 128:
	            case 137:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 146:
	            case 147:
	            case 157:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1501;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1511;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1502;
	                this.table_or_subquery();
	                this.state = 1507;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 1503;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 1504;
	                    this.table_or_subquery();
	                    this.state = 1509;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;

	            case 2:
	                this.state = 1510;
	                this.join_clause();
	                break;

	            }
	            this.state = 1513;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 1518;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
	            if(la_===1) {
	                this.state = 1515;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
	                if(la_===1) {
	                    this.state = 1514;
	                    this.match(SQLtinyParser.K_AS);

	                }
	                this.state = 1517;
	                this.table_alias();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1520;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1521;
	            this.select_stmt();
	            this.state = 1522;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 1527;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
	            if(la_===1) {
	                this.state = 1524;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
	                if(la_===1) {
	                    this.state = 1523;
	                    this.match(SQLtinyParser.K_AS);

	                }
	                this.state = 1526;
	                this.table_alias();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_clause() {
	    let localctx = new Join_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, SQLtinyParser.RULE_join_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1531;
	        this.table_or_subquery();
	        this.state = 1538;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5 || _la===51 || ((((_la - 87)) & ~0x1f) === 0 && ((1 << (_la - 87)) & 8833) !== 0)) {
	            this.state = 1532;
	            this.join_operator();
	            this.state = 1533;
	            this.table_or_subquery();
	            this.state = 1534;
	            this.join_constraint();
	            this.state = 1540;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_operator() {
	    let localctx = new Join_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, SQLtinyParser.RULE_join_operator);
	    var _la = 0;
	    try {
	        this.state = 1554;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1541;
	            this.match(SQLtinyParser.COMMA);
	            break;
	        case 51:
	        case 87:
	        case 94:
	        case 96:
	        case 100:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1543;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===100) {
	                this.state = 1542;
	                this.match(SQLtinyParser.K_NATURAL);
	            }

	            this.state = 1551;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 96:
	            	this.state = 1545;
	            	this.match(SQLtinyParser.K_LEFT);
	            	this.state = 1547;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===110) {
	            	    this.state = 1546;
	            	    this.match(SQLtinyParser.K_OUTER);
	            	}

	            	break;
	            case 87:
	            	this.state = 1549;
	            	this.match(SQLtinyParser.K_INNER);
	            	break;
	            case 51:
	            	this.state = 1550;
	            	this.match(SQLtinyParser.K_CROSS);
	            	break;
	            case 94:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 1553;
	            this.match(SQLtinyParser.K_JOIN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_constraint() {
	    let localctx = new Join_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, SQLtinyParser.RULE_join_constraint);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1570;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 107:
	        	this.state = 1556;
	        	this.match(SQLtinyParser.K_ON);
	        	this.state = 1557;
	        	this.expr(0);
	        	break;
	        case 140:
	        	this.state = 1558;
	        	this.match(SQLtinyParser.K_USING);
	        	this.state = 1559;
	        	this.match(SQLtinyParser.OPEN_PAR);
	        	this.state = 1560;
	        	this.column_name();
	        	this.state = 1565;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	while(_la===5) {
	        	    this.state = 1561;
	        	    this.match(SQLtinyParser.COMMA);
	        	    this.state = 1562;
	        	    this.column_name();
	        	    this.state = 1567;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	}
	        	this.state = 1568;
	        	this.match(SQLtinyParser.CLOSE_PAR);
	        	break;
	        case -1:
	        case 1:
	        case 4:
	        case 5:
	        case 30:
	        case 31:
	        case 35:
	        case 38:
	        case 47:
	        case 50:
	        case 51:
	        case 59:
	        case 61:
	        case 63:
	        case 66:
	        case 68:
	        case 71:
	        case 78:
	        case 87:
	        case 88:
	        case 90:
	        case 94:
	        case 96:
	        case 98:
	        case 100:
	        case 109:
	        case 112:
	        case 119:
	        case 120:
	        case 122:
	        case 125:
	        case 127:
	        case 128:
	        case 137:
	        case 139:
	        case 141:
	        case 142:
	        case 146:
	        case 147:
	        case 157:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_core() {
	    let localctx = new Select_coreContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, SQLtinyParser.RULE_select_core);
	    var _la = 0;
	    try {
	        this.state = 1646;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 128:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1572;
	            this.match(SQLtinyParser.K_SELECT);
	            this.state = 1574;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
	            if(la_===1) {
	                this.state = 1573;
	                _la = this._input.LA(1);
	                if(!(_la===29 || _la===62)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 1576;
	            this.result_column();
	            this.state = 1581;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 1577;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 1578;
	                this.result_column();
	                this.state = 1583;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1596;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===75) {
	                this.state = 1584;
	                this.match(SQLtinyParser.K_FROM);
	                this.state = 1594;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,228,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1585;
	                    this.table_or_subquery();
	                    this.state = 1590;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===5) {
	                        this.state = 1586;
	                        this.match(SQLtinyParser.COMMA);
	                        this.state = 1587;
	                        this.table_or_subquery();
	                        this.state = 1592;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    break;

	                case 2:
	                    this.state = 1593;
	                    this.join_clause();
	                    break;

	                }
	            }

	            this.state = 1600;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===146) {
	                this.state = 1598;
	                this.match(SQLtinyParser.K_WHERE);
	                this.state = 1599;
	                this.expr(0);
	            }

	            this.state = 1616;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===78) {
	                this.state = 1602;
	                this.match(SQLtinyParser.K_GROUP);
	                this.state = 1603;
	                this.match(SQLtinyParser.K_BY);
	                this.state = 1604;
	                this.expr(0);
	                this.state = 1609;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 1605;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 1606;
	                    this.expr(0);
	                    this.state = 1611;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1614;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===79) {
	                    this.state = 1612;
	                    this.match(SQLtinyParser.K_HAVING);
	                    this.state = 1613;
	                    this.expr(0);
	                }

	            }

	            break;
	        case 142:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1618;
	            this.match(SQLtinyParser.K_VALUES);
	            this.state = 1619;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1620;
	            this.expr(0);
	            this.state = 1625;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 1621;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 1622;
	                this.expr(0);
	                this.state = 1627;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1628;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 1643;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 1629;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 1630;
	                this.match(SQLtinyParser.OPEN_PAR);
	                this.state = 1631;
	                this.expr(0);
	                this.state = 1636;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 1632;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 1633;
	                    this.expr(0);
	                    this.state = 1638;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1639;
	                this.match(SQLtinyParser.CLOSE_PAR);
	                this.state = 1645;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compound_operator() {
	    let localctx = new Compound_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, SQLtinyParser.RULE_compound_operator);
	    try {
	        this.state = 1653;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,238,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1648;
	            this.match(SQLtinyParser.K_UNION);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1649;
	            this.match(SQLtinyParser.K_UNION);
	            this.state = 1650;
	            this.match(SQLtinyParser.K_ALL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1651;
	            this.match(SQLtinyParser.K_INTERSECT);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1652;
	            this.match(SQLtinyParser.K_EXCEPT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cte_table_name() {
	    let localctx = new Cte_table_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, SQLtinyParser.RULE_cte_table_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1655;
	        this.table_name();
	        this.state = 1667;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 1656;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1657;
	            this.column_name();
	            this.state = 1662;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 1658;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 1659;
	                this.column_name();
	                this.state = 1664;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1665;
	            this.match(SQLtinyParser.CLOSE_PAR);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signed_number() {
	    let localctx = new Signed_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, SQLtinyParser.RULE_signed_number);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1670;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===8 || _la===9) {
	            this.state = 1669;
	            _la = this._input.LA(1);
	            if(!(_la===8 || _la===9)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1672;
	        this.match(SQLtinyParser.NUMERIC_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal_value() {
	    let localctx = new Literal_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, SQLtinyParser.RULE_literal_value);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1674;
	        _la = this._input.LA(1);
	        if(!(((((_la - 52)) & ~0x1f) === 0 && ((1 << (_la - 52)) & 7) !== 0) || _la===104 || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 13) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unary_operator() {
	    let localctx = new Unary_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, SQLtinyParser.RULE_unary_operator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1676;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 1792) !== 0) || _la===102)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	error_message() {
	    let localctx = new Error_messageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, SQLtinyParser.RULE_error_message);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1678;
	        this.match(SQLtinyParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module_argument() {
	    let localctx = new Module_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, SQLtinyParser.RULE_module_argument);
	    try {
	        this.state = 1682;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,242,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1680;
	            this.expr(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1681;
	            this.column_def();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_alias() {
	    let localctx = new Column_aliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, SQLtinyParser.RULE_column_alias);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1684;
	        _la = this._input.LA(1);
	        if(!(_la===149 || _la===152)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, SQLtinyParser.RULE_keyword);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1686;
	        _la = this._input.LA(1);
	        if(!(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 4294967295) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 4294967295) !== 0) || ((((_la - 121)) & ~0x1f) === 0 && ((1 << (_la - 121)) & 268435455) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name() {
	    let localctx = new NameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, SQLtinyParser.RULE_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1688;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_name() {
	    let localctx = new Function_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, SQLtinyParser.RULE_function_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1690;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	database_name() {
	    let localctx = new Database_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, SQLtinyParser.RULE_database_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1692;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_name() {
	    let localctx = new Table_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, SQLtinyParser.RULE_table_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1694;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_or_index_name() {
	    let localctx = new Table_or_index_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, SQLtinyParser.RULE_table_or_index_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1696;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	new_table_name() {
	    let localctx = new New_table_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, SQLtinyParser.RULE_new_table_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1698;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_name() {
	    let localctx = new Column_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, SQLtinyParser.RULE_column_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1700;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collation_name() {
	    let localctx = new Collation_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, SQLtinyParser.RULE_collation_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1702;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foreign_table() {
	    let localctx = new Foreign_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, SQLtinyParser.RULE_foreign_table);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1704;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_name() {
	    let localctx = new Index_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, SQLtinyParser.RULE_index_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1706;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trigger_name() {
	    let localctx = new Trigger_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, SQLtinyParser.RULE_trigger_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1708;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	view_name() {
	    let localctx = new View_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, SQLtinyParser.RULE_view_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1710;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module_name() {
	    let localctx = new Module_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, SQLtinyParser.RULE_module_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1712;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragma_name() {
	    let localctx = new Pragma_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, SQLtinyParser.RULE_pragma_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1714;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	savepoint_name() {
	    let localctx = new Savepoint_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, SQLtinyParser.RULE_savepoint_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1716;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_alias() {
	    let localctx = new Table_aliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, SQLtinyParser.RULE_table_alias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1718;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transaction_name() {
	    let localctx = new Transaction_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, SQLtinyParser.RULE_transaction_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1720;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	any_name() {
	    let localctx = new Any_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, SQLtinyParser.RULE_any_name);
	    try {
	        this.state = 1729;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 149:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1722;
	            this.match(SQLtinyParser.IDENTIFIER);
	            break;
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1723;
	            this.keyword();
	            break;
	        case 152:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1724;
	            this.match(SQLtinyParser.STRING_LITERAL);
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1725;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1726;
	            this.any_name();
	            this.state = 1727;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

SQLtinyParser.EOF = antlr4.Token.EOF;
SQLtinyParser.SCOL = 1;
SQLtinyParser.DOT = 2;
SQLtinyParser.OPEN_PAR = 3;
SQLtinyParser.CLOSE_PAR = 4;
SQLtinyParser.COMMA = 5;
SQLtinyParser.ASSIGN = 6;
SQLtinyParser.STAR = 7;
SQLtinyParser.PLUS = 8;
SQLtinyParser.MINUS = 9;
SQLtinyParser.TILDE = 10;
SQLtinyParser.PIPE2 = 11;
SQLtinyParser.DIV = 12;
SQLtinyParser.MOD = 13;
SQLtinyParser.LT2 = 14;
SQLtinyParser.GT2 = 15;
SQLtinyParser.AMP = 16;
SQLtinyParser.PIPE = 17;
SQLtinyParser.LT = 18;
SQLtinyParser.LT_EQ = 19;
SQLtinyParser.GT = 20;
SQLtinyParser.GT_EQ = 21;
SQLtinyParser.EQ = 22;
SQLtinyParser.NOT_EQ1 = 23;
SQLtinyParser.NOT_EQ2 = 24;
SQLtinyParser.K_ABORT = 25;
SQLtinyParser.K_ACTION = 26;
SQLtinyParser.K_ADD = 27;
SQLtinyParser.K_AFTER = 28;
SQLtinyParser.K_ALL = 29;
SQLtinyParser.K_ALTER = 30;
SQLtinyParser.K_ANALYZE = 31;
SQLtinyParser.K_AND = 32;
SQLtinyParser.K_AS = 33;
SQLtinyParser.K_ASC = 34;
SQLtinyParser.K_ATTACH = 35;
SQLtinyParser.K_AUTOINCREMENT = 36;
SQLtinyParser.K_BEFORE = 37;
SQLtinyParser.K_BEGIN = 38;
SQLtinyParser.K_BETWEEN = 39;
SQLtinyParser.K_BY = 40;
SQLtinyParser.K_CASCADE = 41;
SQLtinyParser.K_CASE = 42;
SQLtinyParser.K_CAST = 43;
SQLtinyParser.K_CHECK = 44;
SQLtinyParser.K_COLLATE = 45;
SQLtinyParser.K_COLUMN = 46;
SQLtinyParser.K_COMMIT = 47;
SQLtinyParser.K_CONFLICT = 48;
SQLtinyParser.K_CONSTRAINT = 49;
SQLtinyParser.K_CREATE = 50;
SQLtinyParser.K_CROSS = 51;
SQLtinyParser.K_CURRENT_DATE = 52;
SQLtinyParser.K_CURRENT_TIME = 53;
SQLtinyParser.K_CURRENT_TIMESTAMP = 54;
SQLtinyParser.K_DATABASE = 55;
SQLtinyParser.K_DEFAULT = 56;
SQLtinyParser.K_DEFERRABLE = 57;
SQLtinyParser.K_DEFERRED = 58;
SQLtinyParser.K_DELETE = 59;
SQLtinyParser.K_DESC = 60;
SQLtinyParser.K_DETACH = 61;
SQLtinyParser.K_DISTINCT = 62;
SQLtinyParser.K_DROP = 63;
SQLtinyParser.K_EACH = 64;
SQLtinyParser.K_ELSE = 65;
SQLtinyParser.K_END = 66;
SQLtinyParser.K_ESCAPE = 67;
SQLtinyParser.K_EXCEPT = 68;
SQLtinyParser.K_EXCLUSIVE = 69;
SQLtinyParser.K_EXISTS = 70;
SQLtinyParser.K_EXPLAIN = 71;
SQLtinyParser.K_FAIL = 72;
SQLtinyParser.K_FOR = 73;
SQLtinyParser.K_FOREIGN = 74;
SQLtinyParser.K_FROM = 75;
SQLtinyParser.K_FULL = 76;
SQLtinyParser.K_GLOB = 77;
SQLtinyParser.K_GROUP = 78;
SQLtinyParser.K_HAVING = 79;
SQLtinyParser.K_IF = 80;
SQLtinyParser.K_IGNORE = 81;
SQLtinyParser.K_IMMEDIATE = 82;
SQLtinyParser.K_IN = 83;
SQLtinyParser.K_INDEX = 84;
SQLtinyParser.K_INDEXED = 85;
SQLtinyParser.K_INITIALLY = 86;
SQLtinyParser.K_INNER = 87;
SQLtinyParser.K_INSERT = 88;
SQLtinyParser.K_INSTEAD = 89;
SQLtinyParser.K_INTERSECT = 90;
SQLtinyParser.K_INTO = 91;
SQLtinyParser.K_IS = 92;
SQLtinyParser.K_ISNULL = 93;
SQLtinyParser.K_JOIN = 94;
SQLtinyParser.K_KEY = 95;
SQLtinyParser.K_LEFT = 96;
SQLtinyParser.K_LIKE = 97;
SQLtinyParser.K_LIMIT = 98;
SQLtinyParser.K_MATCH = 99;
SQLtinyParser.K_NATURAL = 100;
SQLtinyParser.K_NO = 101;
SQLtinyParser.K_NOT = 102;
SQLtinyParser.K_NOTNULL = 103;
SQLtinyParser.K_NULL = 104;
SQLtinyParser.K_OF = 105;
SQLtinyParser.K_OFFSET = 106;
SQLtinyParser.K_ON = 107;
SQLtinyParser.K_OR = 108;
SQLtinyParser.K_ORDER = 109;
SQLtinyParser.K_OUTER = 110;
SQLtinyParser.K_PLAN = 111;
SQLtinyParser.K_PRAGMA = 112;
SQLtinyParser.K_PRIMARY = 113;
SQLtinyParser.K_QUERY = 114;
SQLtinyParser.K_RAISE = 115;
SQLtinyParser.K_RECURSIVE = 116;
SQLtinyParser.K_REFERENCES = 117;
SQLtinyParser.K_REGEXP = 118;
SQLtinyParser.K_REINDEX = 119;
SQLtinyParser.K_RELEASE = 120;
SQLtinyParser.K_RENAME = 121;
SQLtinyParser.K_REPLACE = 122;
SQLtinyParser.K_RESTRICT = 123;
SQLtinyParser.K_RIGHT = 124;
SQLtinyParser.K_ROLLBACK = 125;
SQLtinyParser.K_ROW = 126;
SQLtinyParser.K_SAVEPOINT = 127;
SQLtinyParser.K_SELECT = 128;
SQLtinyParser.K_SET = 129;
SQLtinyParser.K_TABLE = 130;
SQLtinyParser.K_TEMP = 131;
SQLtinyParser.K_TEMPORARY = 132;
SQLtinyParser.K_THEN = 133;
SQLtinyParser.K_TO = 134;
SQLtinyParser.K_TRANSACTION = 135;
SQLtinyParser.K_TRIGGER = 136;
SQLtinyParser.K_UNION = 137;
SQLtinyParser.K_UNIQUE = 138;
SQLtinyParser.K_UPDATE = 139;
SQLtinyParser.K_USING = 140;
SQLtinyParser.K_VACUUM = 141;
SQLtinyParser.K_VALUES = 142;
SQLtinyParser.K_VIEW = 143;
SQLtinyParser.K_VIRTUAL = 144;
SQLtinyParser.K_WHEN = 145;
SQLtinyParser.K_WHERE = 146;
SQLtinyParser.K_WITH = 147;
SQLtinyParser.K_WITHOUT = 148;
SQLtinyParser.IDENTIFIER = 149;
SQLtinyParser.NUMERIC_LITERAL = 150;
SQLtinyParser.BIND_PARAMETER = 151;
SQLtinyParser.STRING_LITERAL = 152;
SQLtinyParser.BLOB_LITERAL = 153;
SQLtinyParser.SINGLE_LINE_COMMENT = 154;
SQLtinyParser.MULTILINE_COMMENT = 155;
SQLtinyParser.SPACES = 156;
SQLtinyParser.UNEXPECTED_CHAR = 157;

SQLtinyParser.RULE_parse = 0;
SQLtinyParser.RULE_error = 1;
SQLtinyParser.RULE_sql_stmt_list = 2;
SQLtinyParser.RULE_sql_stmt = 3;
SQLtinyParser.RULE_alter_table_stmt = 4;
SQLtinyParser.RULE_analyze_stmt = 5;
SQLtinyParser.RULE_attach_stmt = 6;
SQLtinyParser.RULE_begin_stmt = 7;
SQLtinyParser.RULE_commit_stmt = 8;
SQLtinyParser.RULE_compound_select_stmt = 9;
SQLtinyParser.RULE_create_index_stmt = 10;
SQLtinyParser.RULE_create_table_stmt = 11;
SQLtinyParser.RULE_create_trigger_stmt = 12;
SQLtinyParser.RULE_create_view_stmt = 13;
SQLtinyParser.RULE_create_virtual_table_stmt = 14;
SQLtinyParser.RULE_delete_stmt = 15;
SQLtinyParser.RULE_delete_stmt_limited = 16;
SQLtinyParser.RULE_detach_stmt = 17;
SQLtinyParser.RULE_drop_index_stmt = 18;
SQLtinyParser.RULE_drop_table_stmt = 19;
SQLtinyParser.RULE_drop_trigger_stmt = 20;
SQLtinyParser.RULE_drop_view_stmt = 21;
SQLtinyParser.RULE_factored_select_stmt = 22;
SQLtinyParser.RULE_insert_stmt = 23;
SQLtinyParser.RULE_pragma_stmt = 24;
SQLtinyParser.RULE_reindex_stmt = 25;
SQLtinyParser.RULE_release_stmt = 26;
SQLtinyParser.RULE_rollback_stmt = 27;
SQLtinyParser.RULE_savepoint_stmt = 28;
SQLtinyParser.RULE_simple_select_stmt = 29;
SQLtinyParser.RULE_select_stmt = 30;
SQLtinyParser.RULE_select_or_values = 31;
SQLtinyParser.RULE_update_stmt = 32;
SQLtinyParser.RULE_update_stmt_limited = 33;
SQLtinyParser.RULE_vacuum_stmt = 34;
SQLtinyParser.RULE_column_def = 35;
SQLtinyParser.RULE_type_name = 36;
SQLtinyParser.RULE_column_constraint = 37;
SQLtinyParser.RULE_conflict_clause = 38;
SQLtinyParser.RULE_expr = 39;
SQLtinyParser.RULE_foreign_key_clause = 40;
SQLtinyParser.RULE_raise_function = 41;
SQLtinyParser.RULE_indexed_column = 42;
SQLtinyParser.RULE_table_constraint = 43;
SQLtinyParser.RULE_with_clause = 44;
SQLtinyParser.RULE_qualified_table_name = 45;
SQLtinyParser.RULE_ordering_term = 46;
SQLtinyParser.RULE_pragma_value = 47;
SQLtinyParser.RULE_common_table_expression = 48;
SQLtinyParser.RULE_result_column = 49;
SQLtinyParser.RULE_table_or_subquery = 50;
SQLtinyParser.RULE_join_clause = 51;
SQLtinyParser.RULE_join_operator = 52;
SQLtinyParser.RULE_join_constraint = 53;
SQLtinyParser.RULE_select_core = 54;
SQLtinyParser.RULE_compound_operator = 55;
SQLtinyParser.RULE_cte_table_name = 56;
SQLtinyParser.RULE_signed_number = 57;
SQLtinyParser.RULE_literal_value = 58;
SQLtinyParser.RULE_unary_operator = 59;
SQLtinyParser.RULE_error_message = 60;
SQLtinyParser.RULE_module_argument = 61;
SQLtinyParser.RULE_column_alias = 62;
SQLtinyParser.RULE_keyword = 63;
SQLtinyParser.RULE_name = 64;
SQLtinyParser.RULE_function_name = 65;
SQLtinyParser.RULE_database_name = 66;
SQLtinyParser.RULE_table_name = 67;
SQLtinyParser.RULE_table_or_index_name = 68;
SQLtinyParser.RULE_new_table_name = 69;
SQLtinyParser.RULE_column_name = 70;
SQLtinyParser.RULE_collation_name = 71;
SQLtinyParser.RULE_foreign_table = 72;
SQLtinyParser.RULE_index_name = 73;
SQLtinyParser.RULE_trigger_name = 74;
SQLtinyParser.RULE_view_name = 75;
SQLtinyParser.RULE_module_name = 76;
SQLtinyParser.RULE_pragma_name = 77;
SQLtinyParser.RULE_savepoint_name = 78;
SQLtinyParser.RULE_table_alias = 79;
SQLtinyParser.RULE_transaction_name = 80;
SQLtinyParser.RULE_any_name = 81;

class ParseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_parse;
    }

	EOF() {
	    return this.getToken(SQLtinyParser.EOF, 0);
	};

	sql_stmt_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sql_stmt_listContext);
	    } else {
	        return this.getTypedRuleContext(Sql_stmt_listContext,i);
	    }
	};

	error = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ErrorContext);
	    } else {
	        return this.getTypedRuleContext(ErrorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterParse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitParse(this);
		}
	}


}



class ErrorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_error;
        this._UNEXPECTED_CHAR = null;
    }

	UNEXPECTED_CHAR() {
	    return this.getToken(SQLtinyParser.UNEXPECTED_CHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterError(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitError(this);
		}
	}


}



class Sql_stmt_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_sql_stmt_list;
    }

	sql_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sql_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Sql_stmtContext,i);
	    }
	};

	SCOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.SCOL);
	    } else {
	        return this.getToken(SQLtinyParser.SCOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSql_stmt_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSql_stmt_list(this);
		}
	}


}



class Sql_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_sql_stmt;
    }

	alter_table_stmt() {
	    return this.getTypedRuleContext(Alter_table_stmtContext,0);
	};

	analyze_stmt() {
	    return this.getTypedRuleContext(Analyze_stmtContext,0);
	};

	attach_stmt() {
	    return this.getTypedRuleContext(Attach_stmtContext,0);
	};

	begin_stmt() {
	    return this.getTypedRuleContext(Begin_stmtContext,0);
	};

	commit_stmt() {
	    return this.getTypedRuleContext(Commit_stmtContext,0);
	};

	compound_select_stmt() {
	    return this.getTypedRuleContext(Compound_select_stmtContext,0);
	};

	create_index_stmt() {
	    return this.getTypedRuleContext(Create_index_stmtContext,0);
	};

	create_table_stmt() {
	    return this.getTypedRuleContext(Create_table_stmtContext,0);
	};

	create_trigger_stmt() {
	    return this.getTypedRuleContext(Create_trigger_stmtContext,0);
	};

	create_view_stmt() {
	    return this.getTypedRuleContext(Create_view_stmtContext,0);
	};

	create_virtual_table_stmt() {
	    return this.getTypedRuleContext(Create_virtual_table_stmtContext,0);
	};

	delete_stmt() {
	    return this.getTypedRuleContext(Delete_stmtContext,0);
	};

	delete_stmt_limited() {
	    return this.getTypedRuleContext(Delete_stmt_limitedContext,0);
	};

	detach_stmt() {
	    return this.getTypedRuleContext(Detach_stmtContext,0);
	};

	drop_index_stmt() {
	    return this.getTypedRuleContext(Drop_index_stmtContext,0);
	};

	drop_table_stmt() {
	    return this.getTypedRuleContext(Drop_table_stmtContext,0);
	};

	drop_trigger_stmt() {
	    return this.getTypedRuleContext(Drop_trigger_stmtContext,0);
	};

	drop_view_stmt() {
	    return this.getTypedRuleContext(Drop_view_stmtContext,0);
	};

	factored_select_stmt() {
	    return this.getTypedRuleContext(Factored_select_stmtContext,0);
	};

	insert_stmt() {
	    return this.getTypedRuleContext(Insert_stmtContext,0);
	};

	pragma_stmt() {
	    return this.getTypedRuleContext(Pragma_stmtContext,0);
	};

	reindex_stmt() {
	    return this.getTypedRuleContext(Reindex_stmtContext,0);
	};

	release_stmt() {
	    return this.getTypedRuleContext(Release_stmtContext,0);
	};

	rollback_stmt() {
	    return this.getTypedRuleContext(Rollback_stmtContext,0);
	};

	savepoint_stmt() {
	    return this.getTypedRuleContext(Savepoint_stmtContext,0);
	};

	simple_select_stmt() {
	    return this.getTypedRuleContext(Simple_select_stmtContext,0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	update_stmt() {
	    return this.getTypedRuleContext(Update_stmtContext,0);
	};

	update_stmt_limited() {
	    return this.getTypedRuleContext(Update_stmt_limitedContext,0);
	};

	vacuum_stmt() {
	    return this.getTypedRuleContext(Vacuum_stmtContext,0);
	};

	K_EXPLAIN() {
	    return this.getToken(SQLtinyParser.K_EXPLAIN, 0);
	};

	K_QUERY() {
	    return this.getToken(SQLtinyParser.K_QUERY, 0);
	};

	K_PLAN() {
	    return this.getToken(SQLtinyParser.K_PLAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSql_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSql_stmt(this);
		}
	}


}



class Alter_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_alter_table_stmt;
    }

	K_ALTER() {
	    return this.getToken(SQLtinyParser.K_ALTER, 0);
	};

	K_TABLE() {
	    return this.getToken(SQLtinyParser.K_TABLE, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	K_RENAME() {
	    return this.getToken(SQLtinyParser.K_RENAME, 0);
	};

	K_TO() {
	    return this.getToken(SQLtinyParser.K_TO, 0);
	};

	new_table_name() {
	    return this.getTypedRuleContext(New_table_nameContext,0);
	};

	K_ADD() {
	    return this.getToken(SQLtinyParser.K_ADD, 0);
	};

	column_def() {
	    return this.getTypedRuleContext(Column_defContext,0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	K_COLUMN() {
	    return this.getToken(SQLtinyParser.K_COLUMN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterAlter_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitAlter_table_stmt(this);
		}
	}


}



class Analyze_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_analyze_stmt;
    }

	K_ANALYZE() {
	    return this.getToken(SQLtinyParser.K_ANALYZE, 0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	table_or_index_name() {
	    return this.getTypedRuleContext(Table_or_index_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterAnalyze_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitAnalyze_stmt(this);
		}
	}


}



class Attach_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_attach_stmt;
    }

	K_ATTACH() {
	    return this.getToken(SQLtinyParser.K_ATTACH, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	K_AS() {
	    return this.getToken(SQLtinyParser.K_AS, 0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	K_DATABASE() {
	    return this.getToken(SQLtinyParser.K_DATABASE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterAttach_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitAttach_stmt(this);
		}
	}


}



class Begin_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_begin_stmt;
    }

	K_BEGIN() {
	    return this.getToken(SQLtinyParser.K_BEGIN, 0);
	};

	K_TRANSACTION() {
	    return this.getToken(SQLtinyParser.K_TRANSACTION, 0);
	};

	K_DEFERRED() {
	    return this.getToken(SQLtinyParser.K_DEFERRED, 0);
	};

	K_IMMEDIATE() {
	    return this.getToken(SQLtinyParser.K_IMMEDIATE, 0);
	};

	K_EXCLUSIVE() {
	    return this.getToken(SQLtinyParser.K_EXCLUSIVE, 0);
	};

	transaction_name() {
	    return this.getTypedRuleContext(Transaction_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterBegin_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitBegin_stmt(this);
		}
	}


}



class Commit_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_commit_stmt;
    }

	K_COMMIT() {
	    return this.getToken(SQLtinyParser.K_COMMIT, 0);
	};

	K_END() {
	    return this.getToken(SQLtinyParser.K_END, 0);
	};

	K_TRANSACTION() {
	    return this.getToken(SQLtinyParser.K_TRANSACTION, 0);
	};

	transaction_name() {
	    return this.getTypedRuleContext(Transaction_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCommit_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCommit_stmt(this);
		}
	}


}



class Compound_select_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_compound_select_stmt;
    }

	select_core = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Select_coreContext);
	    } else {
	        return this.getTypedRuleContext(Select_coreContext,i);
	    }
	};

	K_WITH() {
	    return this.getToken(SQLtinyParser.K_WITH, 0);
	};

	common_table_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Common_table_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Common_table_expressionContext,i);
	    }
	};

	K_ORDER() {
	    return this.getToken(SQLtinyParser.K_ORDER, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	ordering_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ordering_termContext);
	    } else {
	        return this.getTypedRuleContext(Ordering_termContext,i);
	    }
	};

	K_LIMIT() {
	    return this.getToken(SQLtinyParser.K_LIMIT, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	K_UNION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_UNION);
	    } else {
	        return this.getToken(SQLtinyParser.K_UNION, i);
	    }
	};


	K_INTERSECT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_INTERSECT);
	    } else {
	        return this.getToken(SQLtinyParser.K_INTERSECT, i);
	    }
	};


	K_EXCEPT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_EXCEPT);
	    } else {
	        return this.getToken(SQLtinyParser.K_EXCEPT, i);
	    }
	};


	K_RECURSIVE() {
	    return this.getToken(SQLtinyParser.K_RECURSIVE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_OFFSET() {
	    return this.getToken(SQLtinyParser.K_OFFSET, 0);
	};

	K_ALL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_ALL);
	    } else {
	        return this.getToken(SQLtinyParser.K_ALL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCompound_select_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCompound_select_stmt(this);
		}
	}


}



class Create_index_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_create_index_stmt;
    }

	K_CREATE() {
	    return this.getToken(SQLtinyParser.K_CREATE, 0);
	};

	K_INDEX() {
	    return this.getToken(SQLtinyParser.K_INDEX, 0);
	};

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	K_ON() {
	    return this.getToken(SQLtinyParser.K_ON, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	indexed_column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Indexed_columnContext);
	    } else {
	        return this.getTypedRuleContext(Indexed_columnContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	K_UNIQUE() {
	    return this.getToken(SQLtinyParser.K_UNIQUE, 0);
	};

	K_IF() {
	    return this.getToken(SQLtinyParser.K_IF, 0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCreate_index_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCreate_index_stmt(this);
		}
	}


}



class Create_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_create_table_stmt;
    }

	K_CREATE() {
	    return this.getToken(SQLtinyParser.K_CREATE, 0);
	};

	K_TABLE() {
	    return this.getToken(SQLtinyParser.K_TABLE, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	column_def = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_defContext);
	    } else {
	        return this.getTypedRuleContext(Column_defContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	K_AS() {
	    return this.getToken(SQLtinyParser.K_AS, 0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	K_IF() {
	    return this.getToken(SQLtinyParser.K_IF, 0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	K_TEMP() {
	    return this.getToken(SQLtinyParser.K_TEMP, 0);
	};

	K_TEMPORARY() {
	    return this.getToken(SQLtinyParser.K_TEMPORARY, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	table_constraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_constraintContext);
	    } else {
	        return this.getTypedRuleContext(Table_constraintContext,i);
	    }
	};

	K_WITHOUT() {
	    return this.getToken(SQLtinyParser.K_WITHOUT, 0);
	};

	IDENTIFIER() {
	    return this.getToken(SQLtinyParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCreate_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCreate_table_stmt(this);
		}
	}


}



class Create_trigger_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_create_trigger_stmt;
    }

	K_CREATE() {
	    return this.getToken(SQLtinyParser.K_CREATE, 0);
	};

	K_TRIGGER() {
	    return this.getToken(SQLtinyParser.K_TRIGGER, 0);
	};

	trigger_name() {
	    return this.getTypedRuleContext(Trigger_nameContext,0);
	};

	K_ON() {
	    return this.getToken(SQLtinyParser.K_ON, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	K_BEGIN() {
	    return this.getToken(SQLtinyParser.K_BEGIN, 0);
	};

	K_END() {
	    return this.getToken(SQLtinyParser.K_END, 0);
	};

	K_DELETE() {
	    return this.getToken(SQLtinyParser.K_DELETE, 0);
	};

	K_INSERT() {
	    return this.getToken(SQLtinyParser.K_INSERT, 0);
	};

	K_UPDATE() {
	    return this.getToken(SQLtinyParser.K_UPDATE, 0);
	};

	K_IF() {
	    return this.getToken(SQLtinyParser.K_IF, 0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	database_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Database_nameContext);
	    } else {
	        return this.getTypedRuleContext(Database_nameContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.DOT);
	    } else {
	        return this.getToken(SQLtinyParser.DOT, i);
	    }
	};


	K_BEFORE() {
	    return this.getToken(SQLtinyParser.K_BEFORE, 0);
	};

	K_AFTER() {
	    return this.getToken(SQLtinyParser.K_AFTER, 0);
	};

	K_INSTEAD() {
	    return this.getToken(SQLtinyParser.K_INSTEAD, 0);
	};

	K_OF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_OF);
	    } else {
	        return this.getToken(SQLtinyParser.K_OF, i);
	    }
	};


	K_FOR() {
	    return this.getToken(SQLtinyParser.K_FOR, 0);
	};

	K_EACH() {
	    return this.getToken(SQLtinyParser.K_EACH, 0);
	};

	K_ROW() {
	    return this.getToken(SQLtinyParser.K_ROW, 0);
	};

	K_WHEN() {
	    return this.getToken(SQLtinyParser.K_WHEN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	SCOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.SCOL);
	    } else {
	        return this.getToken(SQLtinyParser.SCOL, i);
	    }
	};


	K_TEMP() {
	    return this.getToken(SQLtinyParser.K_TEMP, 0);
	};

	K_TEMPORARY() {
	    return this.getToken(SQLtinyParser.K_TEMPORARY, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	update_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Update_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Update_stmtContext,i);
	    }
	};

	insert_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Insert_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Insert_stmtContext,i);
	    }
	};

	delete_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Delete_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Delete_stmtContext,i);
	    }
	};

	select_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Select_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Select_stmtContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCreate_trigger_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCreate_trigger_stmt(this);
		}
	}


}



class Create_view_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_create_view_stmt;
    }

	K_CREATE() {
	    return this.getToken(SQLtinyParser.K_CREATE, 0);
	};

	K_VIEW() {
	    return this.getToken(SQLtinyParser.K_VIEW, 0);
	};

	view_name() {
	    return this.getTypedRuleContext(View_nameContext,0);
	};

	K_AS() {
	    return this.getToken(SQLtinyParser.K_AS, 0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	K_IF() {
	    return this.getToken(SQLtinyParser.K_IF, 0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	K_TEMP() {
	    return this.getToken(SQLtinyParser.K_TEMP, 0);
	};

	K_TEMPORARY() {
	    return this.getToken(SQLtinyParser.K_TEMPORARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCreate_view_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCreate_view_stmt(this);
		}
	}


}



class Create_virtual_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_create_virtual_table_stmt;
    }

	K_CREATE() {
	    return this.getToken(SQLtinyParser.K_CREATE, 0);
	};

	K_VIRTUAL() {
	    return this.getToken(SQLtinyParser.K_VIRTUAL, 0);
	};

	K_TABLE() {
	    return this.getToken(SQLtinyParser.K_TABLE, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	K_USING() {
	    return this.getToken(SQLtinyParser.K_USING, 0);
	};

	module_name() {
	    return this.getTypedRuleContext(Module_nameContext,0);
	};

	K_IF() {
	    return this.getToken(SQLtinyParser.K_IF, 0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	module_argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Module_argumentContext);
	    } else {
	        return this.getTypedRuleContext(Module_argumentContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCreate_virtual_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCreate_virtual_table_stmt(this);
		}
	}


}



class Delete_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_delete_stmt;
    }

	K_DELETE() {
	    return this.getToken(SQLtinyParser.K_DELETE, 0);
	};

	K_FROM() {
	    return this.getToken(SQLtinyParser.K_FROM, 0);
	};

	qualified_table_name() {
	    return this.getTypedRuleContext(Qualified_table_nameContext,0);
	};

	with_clause() {
	    return this.getTypedRuleContext(With_clauseContext,0);
	};

	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterDelete_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitDelete_stmt(this);
		}
	}


}



class Delete_stmt_limitedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_delete_stmt_limited;
    }

	K_DELETE() {
	    return this.getToken(SQLtinyParser.K_DELETE, 0);
	};

	K_FROM() {
	    return this.getToken(SQLtinyParser.K_FROM, 0);
	};

	qualified_table_name() {
	    return this.getTypedRuleContext(Qualified_table_nameContext,0);
	};

	with_clause() {
	    return this.getTypedRuleContext(With_clauseContext,0);
	};

	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	K_LIMIT() {
	    return this.getToken(SQLtinyParser.K_LIMIT, 0);
	};

	K_ORDER() {
	    return this.getToken(SQLtinyParser.K_ORDER, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	ordering_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ordering_termContext);
	    } else {
	        return this.getTypedRuleContext(Ordering_termContext,i);
	    }
	};

	K_OFFSET() {
	    return this.getToken(SQLtinyParser.K_OFFSET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterDelete_stmt_limited(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitDelete_stmt_limited(this);
		}
	}


}



class Detach_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_detach_stmt;
    }

	K_DETACH() {
	    return this.getToken(SQLtinyParser.K_DETACH, 0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	K_DATABASE() {
	    return this.getToken(SQLtinyParser.K_DATABASE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterDetach_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitDetach_stmt(this);
		}
	}


}



class Drop_index_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_drop_index_stmt;
    }

	K_DROP() {
	    return this.getToken(SQLtinyParser.K_DROP, 0);
	};

	K_INDEX() {
	    return this.getToken(SQLtinyParser.K_INDEX, 0);
	};

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	K_IF() {
	    return this.getToken(SQLtinyParser.K_IF, 0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterDrop_index_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitDrop_index_stmt(this);
		}
	}


}



class Drop_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_drop_table_stmt;
    }

	K_DROP() {
	    return this.getToken(SQLtinyParser.K_DROP, 0);
	};

	K_TABLE() {
	    return this.getToken(SQLtinyParser.K_TABLE, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	K_IF() {
	    return this.getToken(SQLtinyParser.K_IF, 0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterDrop_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitDrop_table_stmt(this);
		}
	}


}



class Drop_trigger_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_drop_trigger_stmt;
    }

	K_DROP() {
	    return this.getToken(SQLtinyParser.K_DROP, 0);
	};

	K_TRIGGER() {
	    return this.getToken(SQLtinyParser.K_TRIGGER, 0);
	};

	trigger_name() {
	    return this.getTypedRuleContext(Trigger_nameContext,0);
	};

	K_IF() {
	    return this.getToken(SQLtinyParser.K_IF, 0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterDrop_trigger_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitDrop_trigger_stmt(this);
		}
	}


}



class Drop_view_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_drop_view_stmt;
    }

	K_DROP() {
	    return this.getToken(SQLtinyParser.K_DROP, 0);
	};

	K_VIEW() {
	    return this.getToken(SQLtinyParser.K_VIEW, 0);
	};

	view_name() {
	    return this.getTypedRuleContext(View_nameContext,0);
	};

	K_IF() {
	    return this.getToken(SQLtinyParser.K_IF, 0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterDrop_view_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitDrop_view_stmt(this);
		}
	}


}



class Factored_select_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_factored_select_stmt;
    }

	select_core = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Select_coreContext);
	    } else {
	        return this.getTypedRuleContext(Select_coreContext,i);
	    }
	};

	K_WITH() {
	    return this.getToken(SQLtinyParser.K_WITH, 0);
	};

	common_table_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Common_table_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Common_table_expressionContext,i);
	    }
	};

	compound_operator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Compound_operatorContext);
	    } else {
	        return this.getTypedRuleContext(Compound_operatorContext,i);
	    }
	};

	K_ORDER() {
	    return this.getToken(SQLtinyParser.K_ORDER, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	ordering_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ordering_termContext);
	    } else {
	        return this.getTypedRuleContext(Ordering_termContext,i);
	    }
	};

	K_LIMIT() {
	    return this.getToken(SQLtinyParser.K_LIMIT, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	K_RECURSIVE() {
	    return this.getToken(SQLtinyParser.K_RECURSIVE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_OFFSET() {
	    return this.getToken(SQLtinyParser.K_OFFSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterFactored_select_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitFactored_select_stmt(this);
		}
	}


}



class Insert_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_insert_stmt;
    }

	K_INTO() {
	    return this.getToken(SQLtinyParser.K_INTO, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	K_INSERT() {
	    return this.getToken(SQLtinyParser.K_INSERT, 0);
	};

	K_REPLACE() {
	    return this.getToken(SQLtinyParser.K_REPLACE, 0);
	};

	K_OR() {
	    return this.getToken(SQLtinyParser.K_OR, 0);
	};

	K_ROLLBACK() {
	    return this.getToken(SQLtinyParser.K_ROLLBACK, 0);
	};

	K_ABORT() {
	    return this.getToken(SQLtinyParser.K_ABORT, 0);
	};

	K_FAIL() {
	    return this.getToken(SQLtinyParser.K_FAIL, 0);
	};

	K_IGNORE() {
	    return this.getToken(SQLtinyParser.K_IGNORE, 0);
	};

	K_VALUES() {
	    return this.getToken(SQLtinyParser.K_VALUES, 0);
	};

	OPEN_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.OPEN_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.OPEN_PAR, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	CLOSE_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.CLOSE_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.CLOSE_PAR, i);
	    }
	};


	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	K_DEFAULT() {
	    return this.getToken(SQLtinyParser.K_DEFAULT, 0);
	};

	with_clause() {
	    return this.getTypedRuleContext(With_clauseContext,0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterInsert_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitInsert_stmt(this);
		}
	}


}



class Pragma_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_pragma_stmt;
    }

	K_PRAGMA() {
	    return this.getToken(SQLtinyParser.K_PRAGMA, 0);
	};

	pragma_name() {
	    return this.getTypedRuleContext(Pragma_nameContext,0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	ASSIGN() {
	    return this.getToken(SQLtinyParser.ASSIGN, 0);
	};

	pragma_value() {
	    return this.getTypedRuleContext(Pragma_valueContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterPragma_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitPragma_stmt(this);
		}
	}


}



class Reindex_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_reindex_stmt;
    }

	K_REINDEX() {
	    return this.getToken(SQLtinyParser.K_REINDEX, 0);
	};

	collation_name() {
	    return this.getTypedRuleContext(Collation_nameContext,0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterReindex_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitReindex_stmt(this);
		}
	}


}



class Release_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_release_stmt;
    }

	K_RELEASE() {
	    return this.getToken(SQLtinyParser.K_RELEASE, 0);
	};

	savepoint_name() {
	    return this.getTypedRuleContext(Savepoint_nameContext,0);
	};

	K_SAVEPOINT() {
	    return this.getToken(SQLtinyParser.K_SAVEPOINT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterRelease_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitRelease_stmt(this);
		}
	}


}



class Rollback_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_rollback_stmt;
    }

	K_ROLLBACK() {
	    return this.getToken(SQLtinyParser.K_ROLLBACK, 0);
	};

	K_TRANSACTION() {
	    return this.getToken(SQLtinyParser.K_TRANSACTION, 0);
	};

	K_TO() {
	    return this.getToken(SQLtinyParser.K_TO, 0);
	};

	savepoint_name() {
	    return this.getTypedRuleContext(Savepoint_nameContext,0);
	};

	transaction_name() {
	    return this.getTypedRuleContext(Transaction_nameContext,0);
	};

	K_SAVEPOINT() {
	    return this.getToken(SQLtinyParser.K_SAVEPOINT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterRollback_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitRollback_stmt(this);
		}
	}


}



class Savepoint_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_savepoint_stmt;
    }

	K_SAVEPOINT() {
	    return this.getToken(SQLtinyParser.K_SAVEPOINT, 0);
	};

	savepoint_name() {
	    return this.getTypedRuleContext(Savepoint_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSavepoint_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSavepoint_stmt(this);
		}
	}


}



class Simple_select_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_simple_select_stmt;
    }

	select_core() {
	    return this.getTypedRuleContext(Select_coreContext,0);
	};

	K_WITH() {
	    return this.getToken(SQLtinyParser.K_WITH, 0);
	};

	common_table_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Common_table_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Common_table_expressionContext,i);
	    }
	};

	K_ORDER() {
	    return this.getToken(SQLtinyParser.K_ORDER, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	ordering_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ordering_termContext);
	    } else {
	        return this.getTypedRuleContext(Ordering_termContext,i);
	    }
	};

	K_LIMIT() {
	    return this.getToken(SQLtinyParser.K_LIMIT, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	K_RECURSIVE() {
	    return this.getToken(SQLtinyParser.K_RECURSIVE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_OFFSET() {
	    return this.getToken(SQLtinyParser.K_OFFSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSimple_select_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSimple_select_stmt(this);
		}
	}


}



class Select_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_select_stmt;
    }

	select_or_values = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Select_or_valuesContext);
	    } else {
	        return this.getTypedRuleContext(Select_or_valuesContext,i);
	    }
	};

	K_WITH() {
	    return this.getToken(SQLtinyParser.K_WITH, 0);
	};

	common_table_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Common_table_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Common_table_expressionContext,i);
	    }
	};

	compound_operator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Compound_operatorContext);
	    } else {
	        return this.getTypedRuleContext(Compound_operatorContext,i);
	    }
	};

	K_ORDER() {
	    return this.getToken(SQLtinyParser.K_ORDER, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	ordering_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ordering_termContext);
	    } else {
	        return this.getTypedRuleContext(Ordering_termContext,i);
	    }
	};

	K_LIMIT() {
	    return this.getToken(SQLtinyParser.K_LIMIT, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	K_RECURSIVE() {
	    return this.getToken(SQLtinyParser.K_RECURSIVE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_OFFSET() {
	    return this.getToken(SQLtinyParser.K_OFFSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSelect_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSelect_stmt(this);
		}
	}


}



class Select_or_valuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_select_or_values;
    }

	K_SELECT() {
	    return this.getToken(SQLtinyParser.K_SELECT, 0);
	};

	result_column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Result_columnContext);
	    } else {
	        return this.getTypedRuleContext(Result_columnContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_FROM() {
	    return this.getToken(SQLtinyParser.K_FROM, 0);
	};

	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	K_GROUP() {
	    return this.getToken(SQLtinyParser.K_GROUP, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	K_DISTINCT() {
	    return this.getToken(SQLtinyParser.K_DISTINCT, 0);
	};

	K_ALL() {
	    return this.getToken(SQLtinyParser.K_ALL, 0);
	};

	table_or_subquery = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_or_subqueryContext);
	    } else {
	        return this.getTypedRuleContext(Table_or_subqueryContext,i);
	    }
	};

	join_clause() {
	    return this.getTypedRuleContext(Join_clauseContext,0);
	};

	K_HAVING() {
	    return this.getToken(SQLtinyParser.K_HAVING, 0);
	};

	K_VALUES() {
	    return this.getToken(SQLtinyParser.K_VALUES, 0);
	};

	OPEN_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.OPEN_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.OPEN_PAR, i);
	    }
	};


	CLOSE_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.CLOSE_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.CLOSE_PAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSelect_or_values(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSelect_or_values(this);
		}
	}


}



class Update_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_update_stmt;
    }

	K_UPDATE() {
	    return this.getToken(SQLtinyParser.K_UPDATE, 0);
	};

	qualified_table_name() {
	    return this.getTypedRuleContext(Qualified_table_nameContext,0);
	};

	K_SET() {
	    return this.getToken(SQLtinyParser.K_SET, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	ASSIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.ASSIGN);
	    } else {
	        return this.getToken(SQLtinyParser.ASSIGN, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	with_clause() {
	    return this.getTypedRuleContext(With_clauseContext,0);
	};

	K_OR() {
	    return this.getToken(SQLtinyParser.K_OR, 0);
	};

	K_ROLLBACK() {
	    return this.getToken(SQLtinyParser.K_ROLLBACK, 0);
	};

	K_ABORT() {
	    return this.getToken(SQLtinyParser.K_ABORT, 0);
	};

	K_REPLACE() {
	    return this.getToken(SQLtinyParser.K_REPLACE, 0);
	};

	K_FAIL() {
	    return this.getToken(SQLtinyParser.K_FAIL, 0);
	};

	K_IGNORE() {
	    return this.getToken(SQLtinyParser.K_IGNORE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterUpdate_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitUpdate_stmt(this);
		}
	}


}



class Update_stmt_limitedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_update_stmt_limited;
    }

	K_UPDATE() {
	    return this.getToken(SQLtinyParser.K_UPDATE, 0);
	};

	qualified_table_name() {
	    return this.getTypedRuleContext(Qualified_table_nameContext,0);
	};

	K_SET() {
	    return this.getToken(SQLtinyParser.K_SET, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	ASSIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.ASSIGN);
	    } else {
	        return this.getToken(SQLtinyParser.ASSIGN, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	with_clause() {
	    return this.getTypedRuleContext(With_clauseContext,0);
	};

	K_OR() {
	    return this.getToken(SQLtinyParser.K_OR, 0);
	};

	K_ROLLBACK() {
	    return this.getToken(SQLtinyParser.K_ROLLBACK, 0);
	};

	K_ABORT() {
	    return this.getToken(SQLtinyParser.K_ABORT, 0);
	};

	K_REPLACE() {
	    return this.getToken(SQLtinyParser.K_REPLACE, 0);
	};

	K_FAIL() {
	    return this.getToken(SQLtinyParser.K_FAIL, 0);
	};

	K_IGNORE() {
	    return this.getToken(SQLtinyParser.K_IGNORE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	K_LIMIT() {
	    return this.getToken(SQLtinyParser.K_LIMIT, 0);
	};

	K_ORDER() {
	    return this.getToken(SQLtinyParser.K_ORDER, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	ordering_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ordering_termContext);
	    } else {
	        return this.getTypedRuleContext(Ordering_termContext,i);
	    }
	};

	K_OFFSET() {
	    return this.getToken(SQLtinyParser.K_OFFSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterUpdate_stmt_limited(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitUpdate_stmt_limited(this);
		}
	}


}



class Vacuum_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_vacuum_stmt;
    }

	K_VACUUM() {
	    return this.getToken(SQLtinyParser.K_VACUUM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterVacuum_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitVacuum_stmt(this);
		}
	}


}



class Column_defContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_column_def;
    }

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	type_name() {
	    return this.getTypedRuleContext(Type_nameContext,0);
	};

	column_constraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_constraintContext);
	    } else {
	        return this.getTypedRuleContext(Column_constraintContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterColumn_def(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitColumn_def(this);
		}
	}


}



class Type_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_type_name;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	signed_number = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Signed_numberContext);
	    } else {
	        return this.getTypedRuleContext(Signed_numberContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	COMMA() {
	    return this.getToken(SQLtinyParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterType_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitType_name(this);
		}
	}


}



class Column_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_column_constraint;
    }

	K_PRIMARY() {
	    return this.getToken(SQLtinyParser.K_PRIMARY, 0);
	};

	K_KEY() {
	    return this.getToken(SQLtinyParser.K_KEY, 0);
	};

	conflict_clause() {
	    return this.getTypedRuleContext(Conflict_clauseContext,0);
	};

	K_NULL() {
	    return this.getToken(SQLtinyParser.K_NULL, 0);
	};

	K_UNIQUE() {
	    return this.getToken(SQLtinyParser.K_UNIQUE, 0);
	};

	K_CHECK() {
	    return this.getToken(SQLtinyParser.K_CHECK, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	K_DEFAULT() {
	    return this.getToken(SQLtinyParser.K_DEFAULT, 0);
	};

	K_COLLATE() {
	    return this.getToken(SQLtinyParser.K_COLLATE, 0);
	};

	collation_name() {
	    return this.getTypedRuleContext(Collation_nameContext,0);
	};

	foreign_key_clause() {
	    return this.getTypedRuleContext(Foreign_key_clauseContext,0);
	};

	K_CONSTRAINT() {
	    return this.getToken(SQLtinyParser.K_CONSTRAINT, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	signed_number() {
	    return this.getTypedRuleContext(Signed_numberContext,0);
	};

	literal_value() {
	    return this.getTypedRuleContext(Literal_valueContext,0);
	};

	K_AUTOINCREMENT() {
	    return this.getToken(SQLtinyParser.K_AUTOINCREMENT, 0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_ASC() {
	    return this.getToken(SQLtinyParser.K_ASC, 0);
	};

	K_DESC() {
	    return this.getToken(SQLtinyParser.K_DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterColumn_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitColumn_constraint(this);
		}
	}


}



class Conflict_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_conflict_clause;
    }

	K_ON() {
	    return this.getToken(SQLtinyParser.K_ON, 0);
	};

	K_CONFLICT() {
	    return this.getToken(SQLtinyParser.K_CONFLICT, 0);
	};

	K_ROLLBACK() {
	    return this.getToken(SQLtinyParser.K_ROLLBACK, 0);
	};

	K_ABORT() {
	    return this.getToken(SQLtinyParser.K_ABORT, 0);
	};

	K_FAIL() {
	    return this.getToken(SQLtinyParser.K_FAIL, 0);
	};

	K_IGNORE() {
	    return this.getToken(SQLtinyParser.K_IGNORE, 0);
	};

	K_REPLACE() {
	    return this.getToken(SQLtinyParser.K_REPLACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterConflict_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitConflict_clause(this);
		}
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_expr;
    }

	literal_value() {
	    return this.getTypedRuleContext(Literal_valueContext,0);
	};

	BIND_PARAMETER() {
	    return this.getToken(SQLtinyParser.BIND_PARAMETER, 0);
	};

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.DOT);
	    } else {
	        return this.getToken(SQLtinyParser.DOT, i);
	    }
	};


	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	unary_operator() {
	    return this.getTypedRuleContext(Unary_operatorContext,0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	function_name() {
	    return this.getTypedRuleContext(Function_nameContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	STAR() {
	    return this.getToken(SQLtinyParser.STAR, 0);
	};

	K_DISTINCT() {
	    return this.getToken(SQLtinyParser.K_DISTINCT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_CAST() {
	    return this.getToken(SQLtinyParser.K_CAST, 0);
	};

	K_AS() {
	    return this.getToken(SQLtinyParser.K_AS, 0);
	};

	type_name() {
	    return this.getTypedRuleContext(Type_nameContext,0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_CASE() {
	    return this.getToken(SQLtinyParser.K_CASE, 0);
	};

	K_END() {
	    return this.getToken(SQLtinyParser.K_END, 0);
	};

	K_WHEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_WHEN);
	    } else {
	        return this.getToken(SQLtinyParser.K_WHEN, i);
	    }
	};


	K_THEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_THEN);
	    } else {
	        return this.getToken(SQLtinyParser.K_THEN, i);
	    }
	};


	K_ELSE() {
	    return this.getToken(SQLtinyParser.K_ELSE, 0);
	};

	raise_function() {
	    return this.getTypedRuleContext(Raise_functionContext,0);
	};

	PIPE2() {
	    return this.getToken(SQLtinyParser.PIPE2, 0);
	};

	DIV() {
	    return this.getToken(SQLtinyParser.DIV, 0);
	};

	MOD() {
	    return this.getToken(SQLtinyParser.MOD, 0);
	};

	PLUS() {
	    return this.getToken(SQLtinyParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(SQLtinyParser.MINUS, 0);
	};

	LT2() {
	    return this.getToken(SQLtinyParser.LT2, 0);
	};

	GT2() {
	    return this.getToken(SQLtinyParser.GT2, 0);
	};

	AMP() {
	    return this.getToken(SQLtinyParser.AMP, 0);
	};

	PIPE() {
	    return this.getToken(SQLtinyParser.PIPE, 0);
	};

	LT() {
	    return this.getToken(SQLtinyParser.LT, 0);
	};

	LT_EQ() {
	    return this.getToken(SQLtinyParser.LT_EQ, 0);
	};

	GT() {
	    return this.getToken(SQLtinyParser.GT, 0);
	};

	GT_EQ() {
	    return this.getToken(SQLtinyParser.GT_EQ, 0);
	};

	ASSIGN() {
	    return this.getToken(SQLtinyParser.ASSIGN, 0);
	};

	EQ() {
	    return this.getToken(SQLtinyParser.EQ, 0);
	};

	NOT_EQ1() {
	    return this.getToken(SQLtinyParser.NOT_EQ1, 0);
	};

	NOT_EQ2() {
	    return this.getToken(SQLtinyParser.NOT_EQ2, 0);
	};

	K_IS() {
	    return this.getToken(SQLtinyParser.K_IS, 0);
	};

	K_IN() {
	    return this.getToken(SQLtinyParser.K_IN, 0);
	};

	K_LIKE() {
	    return this.getToken(SQLtinyParser.K_LIKE, 0);
	};

	K_GLOB() {
	    return this.getToken(SQLtinyParser.K_GLOB, 0);
	};

	K_MATCH() {
	    return this.getToken(SQLtinyParser.K_MATCH, 0);
	};

	K_REGEXP() {
	    return this.getToken(SQLtinyParser.K_REGEXP, 0);
	};

	K_AND() {
	    return this.getToken(SQLtinyParser.K_AND, 0);
	};

	K_OR() {
	    return this.getToken(SQLtinyParser.K_OR, 0);
	};

	K_BETWEEN() {
	    return this.getToken(SQLtinyParser.K_BETWEEN, 0);
	};

	K_COLLATE() {
	    return this.getToken(SQLtinyParser.K_COLLATE, 0);
	};

	collation_name() {
	    return this.getTypedRuleContext(Collation_nameContext,0);
	};

	K_ESCAPE() {
	    return this.getToken(SQLtinyParser.K_ESCAPE, 0);
	};

	K_ISNULL() {
	    return this.getToken(SQLtinyParser.K_ISNULL, 0);
	};

	K_NOTNULL() {
	    return this.getToken(SQLtinyParser.K_NOTNULL, 0);
	};

	K_NULL() {
	    return this.getToken(SQLtinyParser.K_NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitExpr(this);
		}
	}


}



class Foreign_key_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_foreign_key_clause;
    }

	K_REFERENCES() {
	    return this.getToken(SQLtinyParser.K_REFERENCES, 0);
	};

	foreign_table() {
	    return this.getTypedRuleContext(Foreign_tableContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	K_DEFERRABLE() {
	    return this.getToken(SQLtinyParser.K_DEFERRABLE, 0);
	};

	K_ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_ON);
	    } else {
	        return this.getToken(SQLtinyParser.K_ON, i);
	    }
	};


	K_MATCH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_MATCH);
	    } else {
	        return this.getToken(SQLtinyParser.K_MATCH, i);
	    }
	};


	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_DELETE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_DELETE);
	    } else {
	        return this.getToken(SQLtinyParser.K_DELETE, i);
	    }
	};


	K_UPDATE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_UPDATE);
	    } else {
	        return this.getToken(SQLtinyParser.K_UPDATE, i);
	    }
	};


	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_INITIALLY() {
	    return this.getToken(SQLtinyParser.K_INITIALLY, 0);
	};

	K_DEFERRED() {
	    return this.getToken(SQLtinyParser.K_DEFERRED, 0);
	};

	K_IMMEDIATE() {
	    return this.getToken(SQLtinyParser.K_IMMEDIATE, 0);
	};

	K_SET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_SET);
	    } else {
	        return this.getToken(SQLtinyParser.K_SET, i);
	    }
	};


	K_NULL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_NULL);
	    } else {
	        return this.getToken(SQLtinyParser.K_NULL, i);
	    }
	};


	K_DEFAULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_DEFAULT);
	    } else {
	        return this.getToken(SQLtinyParser.K_DEFAULT, i);
	    }
	};


	K_CASCADE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_CASCADE);
	    } else {
	        return this.getToken(SQLtinyParser.K_CASCADE, i);
	    }
	};


	K_RESTRICT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_RESTRICT);
	    } else {
	        return this.getToken(SQLtinyParser.K_RESTRICT, i);
	    }
	};


	K_NO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_NO);
	    } else {
	        return this.getToken(SQLtinyParser.K_NO, i);
	    }
	};


	K_ACTION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_ACTION);
	    } else {
	        return this.getToken(SQLtinyParser.K_ACTION, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterForeign_key_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitForeign_key_clause(this);
		}
	}


}



class Raise_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_raise_function;
    }

	K_RAISE() {
	    return this.getToken(SQLtinyParser.K_RAISE, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	K_IGNORE() {
	    return this.getToken(SQLtinyParser.K_IGNORE, 0);
	};

	COMMA() {
	    return this.getToken(SQLtinyParser.COMMA, 0);
	};

	error_message() {
	    return this.getTypedRuleContext(Error_messageContext,0);
	};

	K_ROLLBACK() {
	    return this.getToken(SQLtinyParser.K_ROLLBACK, 0);
	};

	K_ABORT() {
	    return this.getToken(SQLtinyParser.K_ABORT, 0);
	};

	K_FAIL() {
	    return this.getToken(SQLtinyParser.K_FAIL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterRaise_function(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitRaise_function(this);
		}
	}


}



class Indexed_columnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_indexed_column;
    }

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	K_COLLATE() {
	    return this.getToken(SQLtinyParser.K_COLLATE, 0);
	};

	collation_name() {
	    return this.getTypedRuleContext(Collation_nameContext,0);
	};

	K_ASC() {
	    return this.getToken(SQLtinyParser.K_ASC, 0);
	};

	K_DESC() {
	    return this.getToken(SQLtinyParser.K_DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterIndexed_column(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitIndexed_column(this);
		}
	}


}



class Table_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_table_constraint;
    }

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	indexed_column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Indexed_columnContext);
	    } else {
	        return this.getTypedRuleContext(Indexed_columnContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	conflict_clause() {
	    return this.getTypedRuleContext(Conflict_clauseContext,0);
	};

	K_CHECK() {
	    return this.getToken(SQLtinyParser.K_CHECK, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	K_FOREIGN() {
	    return this.getToken(SQLtinyParser.K_FOREIGN, 0);
	};

	K_KEY() {
	    return this.getToken(SQLtinyParser.K_KEY, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	foreign_key_clause() {
	    return this.getTypedRuleContext(Foreign_key_clauseContext,0);
	};

	K_CONSTRAINT() {
	    return this.getToken(SQLtinyParser.K_CONSTRAINT, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	K_PRIMARY() {
	    return this.getToken(SQLtinyParser.K_PRIMARY, 0);
	};

	K_UNIQUE() {
	    return this.getToken(SQLtinyParser.K_UNIQUE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterTable_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitTable_constraint(this);
		}
	}


}



class With_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_with_clause;
    }

	K_WITH() {
	    return this.getToken(SQLtinyParser.K_WITH, 0);
	};

	cte_table_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Cte_table_nameContext);
	    } else {
	        return this.getTypedRuleContext(Cte_table_nameContext,i);
	    }
	};

	K_AS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_AS);
	    } else {
	        return this.getToken(SQLtinyParser.K_AS, i);
	    }
	};


	OPEN_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.OPEN_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.OPEN_PAR, i);
	    }
	};


	select_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Select_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Select_stmtContext,i);
	    }
	};

	CLOSE_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.CLOSE_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.CLOSE_PAR, i);
	    }
	};


	K_RECURSIVE() {
	    return this.getToken(SQLtinyParser.K_RECURSIVE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterWith_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitWith_clause(this);
		}
	}


}



class Qualified_table_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_qualified_table_name;
    }

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	K_INDEXED() {
	    return this.getToken(SQLtinyParser.K_INDEXED, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterQualified_table_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitQualified_table_name(this);
		}
	}


}



class Ordering_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_ordering_term;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	K_COLLATE() {
	    return this.getToken(SQLtinyParser.K_COLLATE, 0);
	};

	collation_name() {
	    return this.getTypedRuleContext(Collation_nameContext,0);
	};

	K_ASC() {
	    return this.getToken(SQLtinyParser.K_ASC, 0);
	};

	K_DESC() {
	    return this.getToken(SQLtinyParser.K_DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterOrdering_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitOrdering_term(this);
		}
	}


}



class Pragma_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_pragma_value;
    }

	signed_number() {
	    return this.getTypedRuleContext(Signed_numberContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(SQLtinyParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterPragma_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitPragma_value(this);
		}
	}


}



class Common_table_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_common_table_expression;
    }

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	K_AS() {
	    return this.getToken(SQLtinyParser.K_AS, 0);
	};

	OPEN_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.OPEN_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.OPEN_PAR, i);
	    }
	};


	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	CLOSE_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.CLOSE_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.CLOSE_PAR, i);
	    }
	};


	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCommon_table_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCommon_table_expression(this);
		}
	}


}



class Result_columnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_result_column;
    }

	STAR() {
	    return this.getToken(SQLtinyParser.STAR, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	column_alias() {
	    return this.getTypedRuleContext(Column_aliasContext,0);
	};

	K_AS() {
	    return this.getToken(SQLtinyParser.K_AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterResult_column(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitResult_column(this);
		}
	}


}



class Table_or_subqueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_table_or_subquery;
    }

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	table_alias() {
	    return this.getTypedRuleContext(Table_aliasContext,0);
	};

	K_INDEXED() {
	    return this.getToken(SQLtinyParser.K_INDEXED, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_AS() {
	    return this.getToken(SQLtinyParser.K_AS, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	table_or_subquery = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_or_subqueryContext);
	    } else {
	        return this.getTypedRuleContext(Table_or_subqueryContext,i);
	    }
	};

	join_clause() {
	    return this.getTypedRuleContext(Join_clauseContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterTable_or_subquery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitTable_or_subquery(this);
		}
	}


}



class Join_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_join_clause;
    }

	table_or_subquery = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_or_subqueryContext);
	    } else {
	        return this.getTypedRuleContext(Table_or_subqueryContext,i);
	    }
	};

	join_operator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Join_operatorContext);
	    } else {
	        return this.getTypedRuleContext(Join_operatorContext,i);
	    }
	};

	join_constraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Join_constraintContext);
	    } else {
	        return this.getTypedRuleContext(Join_constraintContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterJoin_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitJoin_clause(this);
		}
	}


}



class Join_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_join_operator;
    }

	COMMA() {
	    return this.getToken(SQLtinyParser.COMMA, 0);
	};

	K_JOIN() {
	    return this.getToken(SQLtinyParser.K_JOIN, 0);
	};

	K_NATURAL() {
	    return this.getToken(SQLtinyParser.K_NATURAL, 0);
	};

	K_LEFT() {
	    return this.getToken(SQLtinyParser.K_LEFT, 0);
	};

	K_INNER() {
	    return this.getToken(SQLtinyParser.K_INNER, 0);
	};

	K_CROSS() {
	    return this.getToken(SQLtinyParser.K_CROSS, 0);
	};

	K_OUTER() {
	    return this.getToken(SQLtinyParser.K_OUTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterJoin_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitJoin_operator(this);
		}
	}


}



class Join_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_join_constraint;
    }

	K_ON() {
	    return this.getToken(SQLtinyParser.K_ON, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	K_USING() {
	    return this.getToken(SQLtinyParser.K_USING, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterJoin_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitJoin_constraint(this);
		}
	}


}



class Select_coreContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_select_core;
    }

	K_SELECT() {
	    return this.getToken(SQLtinyParser.K_SELECT, 0);
	};

	result_column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Result_columnContext);
	    } else {
	        return this.getTypedRuleContext(Result_columnContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_FROM() {
	    return this.getToken(SQLtinyParser.K_FROM, 0);
	};

	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	K_GROUP() {
	    return this.getToken(SQLtinyParser.K_GROUP, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	K_DISTINCT() {
	    return this.getToken(SQLtinyParser.K_DISTINCT, 0);
	};

	K_ALL() {
	    return this.getToken(SQLtinyParser.K_ALL, 0);
	};

	table_or_subquery = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_or_subqueryContext);
	    } else {
	        return this.getTypedRuleContext(Table_or_subqueryContext,i);
	    }
	};

	join_clause() {
	    return this.getTypedRuleContext(Join_clauseContext,0);
	};

	K_HAVING() {
	    return this.getToken(SQLtinyParser.K_HAVING, 0);
	};

	K_VALUES() {
	    return this.getToken(SQLtinyParser.K_VALUES, 0);
	};

	OPEN_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.OPEN_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.OPEN_PAR, i);
	    }
	};


	CLOSE_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.CLOSE_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.CLOSE_PAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSelect_core(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSelect_core(this);
		}
	}


}



class Compound_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_compound_operator;
    }

	K_UNION() {
	    return this.getToken(SQLtinyParser.K_UNION, 0);
	};

	K_ALL() {
	    return this.getToken(SQLtinyParser.K_ALL, 0);
	};

	K_INTERSECT() {
	    return this.getToken(SQLtinyParser.K_INTERSECT, 0);
	};

	K_EXCEPT() {
	    return this.getToken(SQLtinyParser.K_EXCEPT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCompound_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCompound_operator(this);
		}
	}


}



class Cte_table_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_cte_table_name;
    }

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCte_table_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCte_table_name(this);
		}
	}


}



class Signed_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_signed_number;
    }

	NUMERIC_LITERAL() {
	    return this.getToken(SQLtinyParser.NUMERIC_LITERAL, 0);
	};

	PLUS() {
	    return this.getToken(SQLtinyParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(SQLtinyParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSigned_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSigned_number(this);
		}
	}


}



class Literal_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_literal_value;
    }

	NUMERIC_LITERAL() {
	    return this.getToken(SQLtinyParser.NUMERIC_LITERAL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(SQLtinyParser.STRING_LITERAL, 0);
	};

	BLOB_LITERAL() {
	    return this.getToken(SQLtinyParser.BLOB_LITERAL, 0);
	};

	K_NULL() {
	    return this.getToken(SQLtinyParser.K_NULL, 0);
	};

	K_CURRENT_TIME() {
	    return this.getToken(SQLtinyParser.K_CURRENT_TIME, 0);
	};

	K_CURRENT_DATE() {
	    return this.getToken(SQLtinyParser.K_CURRENT_DATE, 0);
	};

	K_CURRENT_TIMESTAMP() {
	    return this.getToken(SQLtinyParser.K_CURRENT_TIMESTAMP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterLiteral_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitLiteral_value(this);
		}
	}


}



class Unary_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_unary_operator;
    }

	MINUS() {
	    return this.getToken(SQLtinyParser.MINUS, 0);
	};

	PLUS() {
	    return this.getToken(SQLtinyParser.PLUS, 0);
	};

	TILDE() {
	    return this.getToken(SQLtinyParser.TILDE, 0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterUnary_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitUnary_operator(this);
		}
	}


}



class Error_messageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_error_message;
    }

	STRING_LITERAL() {
	    return this.getToken(SQLtinyParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterError_message(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitError_message(this);
		}
	}


}



class Module_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_module_argument;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	column_def() {
	    return this.getTypedRuleContext(Column_defContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterModule_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitModule_argument(this);
		}
	}


}



class Column_aliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_column_alias;
    }

	IDENTIFIER() {
	    return this.getToken(SQLtinyParser.IDENTIFIER, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(SQLtinyParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterColumn_alias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitColumn_alias(this);
		}
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_keyword;
    }

	K_ABORT() {
	    return this.getToken(SQLtinyParser.K_ABORT, 0);
	};

	K_ACTION() {
	    return this.getToken(SQLtinyParser.K_ACTION, 0);
	};

	K_ADD() {
	    return this.getToken(SQLtinyParser.K_ADD, 0);
	};

	K_AFTER() {
	    return this.getToken(SQLtinyParser.K_AFTER, 0);
	};

	K_ALL() {
	    return this.getToken(SQLtinyParser.K_ALL, 0);
	};

	K_ALTER() {
	    return this.getToken(SQLtinyParser.K_ALTER, 0);
	};

	K_ANALYZE() {
	    return this.getToken(SQLtinyParser.K_ANALYZE, 0);
	};

	K_AND() {
	    return this.getToken(SQLtinyParser.K_AND, 0);
	};

	K_AS() {
	    return this.getToken(SQLtinyParser.K_AS, 0);
	};

	K_ASC() {
	    return this.getToken(SQLtinyParser.K_ASC, 0);
	};

	K_ATTACH() {
	    return this.getToken(SQLtinyParser.K_ATTACH, 0);
	};

	K_AUTOINCREMENT() {
	    return this.getToken(SQLtinyParser.K_AUTOINCREMENT, 0);
	};

	K_BEFORE() {
	    return this.getToken(SQLtinyParser.K_BEFORE, 0);
	};

	K_BEGIN() {
	    return this.getToken(SQLtinyParser.K_BEGIN, 0);
	};

	K_BETWEEN() {
	    return this.getToken(SQLtinyParser.K_BETWEEN, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	K_CASCADE() {
	    return this.getToken(SQLtinyParser.K_CASCADE, 0);
	};

	K_CASE() {
	    return this.getToken(SQLtinyParser.K_CASE, 0);
	};

	K_CAST() {
	    return this.getToken(SQLtinyParser.K_CAST, 0);
	};

	K_CHECK() {
	    return this.getToken(SQLtinyParser.K_CHECK, 0);
	};

	K_COLLATE() {
	    return this.getToken(SQLtinyParser.K_COLLATE, 0);
	};

	K_COLUMN() {
	    return this.getToken(SQLtinyParser.K_COLUMN, 0);
	};

	K_COMMIT() {
	    return this.getToken(SQLtinyParser.K_COMMIT, 0);
	};

	K_CONFLICT() {
	    return this.getToken(SQLtinyParser.K_CONFLICT, 0);
	};

	K_CONSTRAINT() {
	    return this.getToken(SQLtinyParser.K_CONSTRAINT, 0);
	};

	K_CREATE() {
	    return this.getToken(SQLtinyParser.K_CREATE, 0);
	};

	K_CROSS() {
	    return this.getToken(SQLtinyParser.K_CROSS, 0);
	};

	K_CURRENT_DATE() {
	    return this.getToken(SQLtinyParser.K_CURRENT_DATE, 0);
	};

	K_CURRENT_TIME() {
	    return this.getToken(SQLtinyParser.K_CURRENT_TIME, 0);
	};

	K_CURRENT_TIMESTAMP() {
	    return this.getToken(SQLtinyParser.K_CURRENT_TIMESTAMP, 0);
	};

	K_DATABASE() {
	    return this.getToken(SQLtinyParser.K_DATABASE, 0);
	};

	K_DEFAULT() {
	    return this.getToken(SQLtinyParser.K_DEFAULT, 0);
	};

	K_DEFERRABLE() {
	    return this.getToken(SQLtinyParser.K_DEFERRABLE, 0);
	};

	K_DEFERRED() {
	    return this.getToken(SQLtinyParser.K_DEFERRED, 0);
	};

	K_DELETE() {
	    return this.getToken(SQLtinyParser.K_DELETE, 0);
	};

	K_DESC() {
	    return this.getToken(SQLtinyParser.K_DESC, 0);
	};

	K_DETACH() {
	    return this.getToken(SQLtinyParser.K_DETACH, 0);
	};

	K_DISTINCT() {
	    return this.getToken(SQLtinyParser.K_DISTINCT, 0);
	};

	K_DROP() {
	    return this.getToken(SQLtinyParser.K_DROP, 0);
	};

	K_EACH() {
	    return this.getToken(SQLtinyParser.K_EACH, 0);
	};

	K_ELSE() {
	    return this.getToken(SQLtinyParser.K_ELSE, 0);
	};

	K_END() {
	    return this.getToken(SQLtinyParser.K_END, 0);
	};

	K_ESCAPE() {
	    return this.getToken(SQLtinyParser.K_ESCAPE, 0);
	};

	K_EXCEPT() {
	    return this.getToken(SQLtinyParser.K_EXCEPT, 0);
	};

	K_EXCLUSIVE() {
	    return this.getToken(SQLtinyParser.K_EXCLUSIVE, 0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	K_EXPLAIN() {
	    return this.getToken(SQLtinyParser.K_EXPLAIN, 0);
	};

	K_FAIL() {
	    return this.getToken(SQLtinyParser.K_FAIL, 0);
	};

	K_FOR() {
	    return this.getToken(SQLtinyParser.K_FOR, 0);
	};

	K_FOREIGN() {
	    return this.getToken(SQLtinyParser.K_FOREIGN, 0);
	};

	K_FROM() {
	    return this.getToken(SQLtinyParser.K_FROM, 0);
	};

	K_FULL() {
	    return this.getToken(SQLtinyParser.K_FULL, 0);
	};

	K_GLOB() {
	    return this.getToken(SQLtinyParser.K_GLOB, 0);
	};

	K_GROUP() {
	    return this.getToken(SQLtinyParser.K_GROUP, 0);
	};

	K_HAVING() {
	    return this.getToken(SQLtinyParser.K_HAVING, 0);
	};

	K_IF() {
	    return this.getToken(SQLtinyParser.K_IF, 0);
	};

	K_IGNORE() {
	    return this.getToken(SQLtinyParser.K_IGNORE, 0);
	};

	K_IMMEDIATE() {
	    return this.getToken(SQLtinyParser.K_IMMEDIATE, 0);
	};

	K_IN() {
	    return this.getToken(SQLtinyParser.K_IN, 0);
	};

	K_INDEX() {
	    return this.getToken(SQLtinyParser.K_INDEX, 0);
	};

	K_INDEXED() {
	    return this.getToken(SQLtinyParser.K_INDEXED, 0);
	};

	K_INITIALLY() {
	    return this.getToken(SQLtinyParser.K_INITIALLY, 0);
	};

	K_INNER() {
	    return this.getToken(SQLtinyParser.K_INNER, 0);
	};

	K_INSERT() {
	    return this.getToken(SQLtinyParser.K_INSERT, 0);
	};

	K_INSTEAD() {
	    return this.getToken(SQLtinyParser.K_INSTEAD, 0);
	};

	K_INTERSECT() {
	    return this.getToken(SQLtinyParser.K_INTERSECT, 0);
	};

	K_INTO() {
	    return this.getToken(SQLtinyParser.K_INTO, 0);
	};

	K_IS() {
	    return this.getToken(SQLtinyParser.K_IS, 0);
	};

	K_ISNULL() {
	    return this.getToken(SQLtinyParser.K_ISNULL, 0);
	};

	K_JOIN() {
	    return this.getToken(SQLtinyParser.K_JOIN, 0);
	};

	K_KEY() {
	    return this.getToken(SQLtinyParser.K_KEY, 0);
	};

	K_LEFT() {
	    return this.getToken(SQLtinyParser.K_LEFT, 0);
	};

	K_LIKE() {
	    return this.getToken(SQLtinyParser.K_LIKE, 0);
	};

	K_LIMIT() {
	    return this.getToken(SQLtinyParser.K_LIMIT, 0);
	};

	K_MATCH() {
	    return this.getToken(SQLtinyParser.K_MATCH, 0);
	};

	K_NATURAL() {
	    return this.getToken(SQLtinyParser.K_NATURAL, 0);
	};

	K_NO() {
	    return this.getToken(SQLtinyParser.K_NO, 0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_NOTNULL() {
	    return this.getToken(SQLtinyParser.K_NOTNULL, 0);
	};

	K_NULL() {
	    return this.getToken(SQLtinyParser.K_NULL, 0);
	};

	K_OF() {
	    return this.getToken(SQLtinyParser.K_OF, 0);
	};

	K_OFFSET() {
	    return this.getToken(SQLtinyParser.K_OFFSET, 0);
	};

	K_ON() {
	    return this.getToken(SQLtinyParser.K_ON, 0);
	};

	K_OR() {
	    return this.getToken(SQLtinyParser.K_OR, 0);
	};

	K_ORDER() {
	    return this.getToken(SQLtinyParser.K_ORDER, 0);
	};

	K_OUTER() {
	    return this.getToken(SQLtinyParser.K_OUTER, 0);
	};

	K_PLAN() {
	    return this.getToken(SQLtinyParser.K_PLAN, 0);
	};

	K_PRAGMA() {
	    return this.getToken(SQLtinyParser.K_PRAGMA, 0);
	};

	K_PRIMARY() {
	    return this.getToken(SQLtinyParser.K_PRIMARY, 0);
	};

	K_QUERY() {
	    return this.getToken(SQLtinyParser.K_QUERY, 0);
	};

	K_RAISE() {
	    return this.getToken(SQLtinyParser.K_RAISE, 0);
	};

	K_RECURSIVE() {
	    return this.getToken(SQLtinyParser.K_RECURSIVE, 0);
	};

	K_REFERENCES() {
	    return this.getToken(SQLtinyParser.K_REFERENCES, 0);
	};

	K_REGEXP() {
	    return this.getToken(SQLtinyParser.K_REGEXP, 0);
	};

	K_REINDEX() {
	    return this.getToken(SQLtinyParser.K_REINDEX, 0);
	};

	K_RELEASE() {
	    return this.getToken(SQLtinyParser.K_RELEASE, 0);
	};

	K_RENAME() {
	    return this.getToken(SQLtinyParser.K_RENAME, 0);
	};

	K_REPLACE() {
	    return this.getToken(SQLtinyParser.K_REPLACE, 0);
	};

	K_RESTRICT() {
	    return this.getToken(SQLtinyParser.K_RESTRICT, 0);
	};

	K_RIGHT() {
	    return this.getToken(SQLtinyParser.K_RIGHT, 0);
	};

	K_ROLLBACK() {
	    return this.getToken(SQLtinyParser.K_ROLLBACK, 0);
	};

	K_ROW() {
	    return this.getToken(SQLtinyParser.K_ROW, 0);
	};

	K_SAVEPOINT() {
	    return this.getToken(SQLtinyParser.K_SAVEPOINT, 0);
	};

	K_SELECT() {
	    return this.getToken(SQLtinyParser.K_SELECT, 0);
	};

	K_SET() {
	    return this.getToken(SQLtinyParser.K_SET, 0);
	};

	K_TABLE() {
	    return this.getToken(SQLtinyParser.K_TABLE, 0);
	};

	K_TEMP() {
	    return this.getToken(SQLtinyParser.K_TEMP, 0);
	};

	K_TEMPORARY() {
	    return this.getToken(SQLtinyParser.K_TEMPORARY, 0);
	};

	K_THEN() {
	    return this.getToken(SQLtinyParser.K_THEN, 0);
	};

	K_TO() {
	    return this.getToken(SQLtinyParser.K_TO, 0);
	};

	K_TRANSACTION() {
	    return this.getToken(SQLtinyParser.K_TRANSACTION, 0);
	};

	K_TRIGGER() {
	    return this.getToken(SQLtinyParser.K_TRIGGER, 0);
	};

	K_UNION() {
	    return this.getToken(SQLtinyParser.K_UNION, 0);
	};

	K_UNIQUE() {
	    return this.getToken(SQLtinyParser.K_UNIQUE, 0);
	};

	K_UPDATE() {
	    return this.getToken(SQLtinyParser.K_UPDATE, 0);
	};

	K_USING() {
	    return this.getToken(SQLtinyParser.K_USING, 0);
	};

	K_VACUUM() {
	    return this.getToken(SQLtinyParser.K_VACUUM, 0);
	};

	K_VALUES() {
	    return this.getToken(SQLtinyParser.K_VALUES, 0);
	};

	K_VIEW() {
	    return this.getToken(SQLtinyParser.K_VIEW, 0);
	};

	K_VIRTUAL() {
	    return this.getToken(SQLtinyParser.K_VIRTUAL, 0);
	};

	K_WHEN() {
	    return this.getToken(SQLtinyParser.K_WHEN, 0);
	};

	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	K_WITH() {
	    return this.getToken(SQLtinyParser.K_WITH, 0);
	};

	K_WITHOUT() {
	    return this.getToken(SQLtinyParser.K_WITHOUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitKeyword(this);
		}
	}


}



class NameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitName(this);
		}
	}


}



class Function_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_function_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterFunction_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitFunction_name(this);
		}
	}


}



class Database_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_database_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterDatabase_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitDatabase_name(this);
		}
	}


}



class Table_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_table_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterTable_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitTable_name(this);
		}
	}


}



class Table_or_index_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_table_or_index_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterTable_or_index_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitTable_or_index_name(this);
		}
	}


}



class New_table_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_new_table_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterNew_table_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitNew_table_name(this);
		}
	}


}



class Column_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_column_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterColumn_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitColumn_name(this);
		}
	}


}



class Collation_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_collation_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCollation_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCollation_name(this);
		}
	}


}



class Foreign_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_foreign_table;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterForeign_table(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitForeign_table(this);
		}
	}


}



class Index_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_index_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterIndex_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitIndex_name(this);
		}
	}


}



class Trigger_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_trigger_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterTrigger_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitTrigger_name(this);
		}
	}


}



class View_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_view_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterView_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitView_name(this);
		}
	}


}



class Module_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_module_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterModule_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitModule_name(this);
		}
	}


}



class Pragma_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_pragma_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterPragma_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitPragma_name(this);
		}
	}


}



class Savepoint_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_savepoint_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSavepoint_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSavepoint_name(this);
		}
	}


}



class Table_aliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_table_alias;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterTable_alias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitTable_alias(this);
		}
	}


}



class Transaction_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_transaction_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterTransaction_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitTransaction_name(this);
		}
	}


}



class Any_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_any_name;
    }

	IDENTIFIER() {
	    return this.getToken(SQLtinyParser.IDENTIFIER, 0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(SQLtinyParser.STRING_LITERAL, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterAny_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitAny_name(this);
		}
	}


}




SQLtinyParser.ParseContext = ParseContext; 
SQLtinyParser.ErrorContext = ErrorContext; 
SQLtinyParser.Sql_stmt_listContext = Sql_stmt_listContext; 
SQLtinyParser.Sql_stmtContext = Sql_stmtContext; 
SQLtinyParser.Alter_table_stmtContext = Alter_table_stmtContext; 
SQLtinyParser.Analyze_stmtContext = Analyze_stmtContext; 
SQLtinyParser.Attach_stmtContext = Attach_stmtContext; 
SQLtinyParser.Begin_stmtContext = Begin_stmtContext; 
SQLtinyParser.Commit_stmtContext = Commit_stmtContext; 
SQLtinyParser.Compound_select_stmtContext = Compound_select_stmtContext; 
SQLtinyParser.Create_index_stmtContext = Create_index_stmtContext; 
SQLtinyParser.Create_table_stmtContext = Create_table_stmtContext; 
SQLtinyParser.Create_trigger_stmtContext = Create_trigger_stmtContext; 
SQLtinyParser.Create_view_stmtContext = Create_view_stmtContext; 
SQLtinyParser.Create_virtual_table_stmtContext = Create_virtual_table_stmtContext; 
SQLtinyParser.Delete_stmtContext = Delete_stmtContext; 
SQLtinyParser.Delete_stmt_limitedContext = Delete_stmt_limitedContext; 
SQLtinyParser.Detach_stmtContext = Detach_stmtContext; 
SQLtinyParser.Drop_index_stmtContext = Drop_index_stmtContext; 
SQLtinyParser.Drop_table_stmtContext = Drop_table_stmtContext; 
SQLtinyParser.Drop_trigger_stmtContext = Drop_trigger_stmtContext; 
SQLtinyParser.Drop_view_stmtContext = Drop_view_stmtContext; 
SQLtinyParser.Factored_select_stmtContext = Factored_select_stmtContext; 
SQLtinyParser.Insert_stmtContext = Insert_stmtContext; 
SQLtinyParser.Pragma_stmtContext = Pragma_stmtContext; 
SQLtinyParser.Reindex_stmtContext = Reindex_stmtContext; 
SQLtinyParser.Release_stmtContext = Release_stmtContext; 
SQLtinyParser.Rollback_stmtContext = Rollback_stmtContext; 
SQLtinyParser.Savepoint_stmtContext = Savepoint_stmtContext; 
SQLtinyParser.Simple_select_stmtContext = Simple_select_stmtContext; 
SQLtinyParser.Select_stmtContext = Select_stmtContext; 
SQLtinyParser.Select_or_valuesContext = Select_or_valuesContext; 
SQLtinyParser.Update_stmtContext = Update_stmtContext; 
SQLtinyParser.Update_stmt_limitedContext = Update_stmt_limitedContext; 
SQLtinyParser.Vacuum_stmtContext = Vacuum_stmtContext; 
SQLtinyParser.Column_defContext = Column_defContext; 
SQLtinyParser.Type_nameContext = Type_nameContext; 
SQLtinyParser.Column_constraintContext = Column_constraintContext; 
SQLtinyParser.Conflict_clauseContext = Conflict_clauseContext; 
SQLtinyParser.ExprContext = ExprContext; 
SQLtinyParser.Foreign_key_clauseContext = Foreign_key_clauseContext; 
SQLtinyParser.Raise_functionContext = Raise_functionContext; 
SQLtinyParser.Indexed_columnContext = Indexed_columnContext; 
SQLtinyParser.Table_constraintContext = Table_constraintContext; 
SQLtinyParser.With_clauseContext = With_clauseContext; 
SQLtinyParser.Qualified_table_nameContext = Qualified_table_nameContext; 
SQLtinyParser.Ordering_termContext = Ordering_termContext; 
SQLtinyParser.Pragma_valueContext = Pragma_valueContext; 
SQLtinyParser.Common_table_expressionContext = Common_table_expressionContext; 
SQLtinyParser.Result_columnContext = Result_columnContext; 
SQLtinyParser.Table_or_subqueryContext = Table_or_subqueryContext; 
SQLtinyParser.Join_clauseContext = Join_clauseContext; 
SQLtinyParser.Join_operatorContext = Join_operatorContext; 
SQLtinyParser.Join_constraintContext = Join_constraintContext; 
SQLtinyParser.Select_coreContext = Select_coreContext; 
SQLtinyParser.Compound_operatorContext = Compound_operatorContext; 
SQLtinyParser.Cte_table_nameContext = Cte_table_nameContext; 
SQLtinyParser.Signed_numberContext = Signed_numberContext; 
SQLtinyParser.Literal_valueContext = Literal_valueContext; 
SQLtinyParser.Unary_operatorContext = Unary_operatorContext; 
SQLtinyParser.Error_messageContext = Error_messageContext; 
SQLtinyParser.Module_argumentContext = Module_argumentContext; 
SQLtinyParser.Column_aliasContext = Column_aliasContext; 
SQLtinyParser.KeywordContext = KeywordContext; 
SQLtinyParser.NameContext = NameContext; 
SQLtinyParser.Function_nameContext = Function_nameContext; 
SQLtinyParser.Database_nameContext = Database_nameContext; 
SQLtinyParser.Table_nameContext = Table_nameContext; 
SQLtinyParser.Table_or_index_nameContext = Table_or_index_nameContext; 
SQLtinyParser.New_table_nameContext = New_table_nameContext; 
SQLtinyParser.Column_nameContext = Column_nameContext; 
SQLtinyParser.Collation_nameContext = Collation_nameContext; 
SQLtinyParser.Foreign_tableContext = Foreign_tableContext; 
SQLtinyParser.Index_nameContext = Index_nameContext; 
SQLtinyParser.Trigger_nameContext = Trigger_nameContext; 
SQLtinyParser.View_nameContext = View_nameContext; 
SQLtinyParser.Module_nameContext = Module_nameContext; 
SQLtinyParser.Pragma_nameContext = Pragma_nameContext; 
SQLtinyParser.Savepoint_nameContext = Savepoint_nameContext; 
SQLtinyParser.Table_aliasContext = Table_aliasContext; 
SQLtinyParser.Transaction_nameContext = Transaction_nameContext; 
SQLtinyParser.Any_nameContext = Any_nameContext; 
