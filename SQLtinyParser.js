// Generated from SQLtiny.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';
import SQLtinyListener from './SQLtinyListener.js';
import SQLtinyVisitor from './SQLtinyVisitor.js';

const serializedATN = [4,1,157,1323,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,1,0,1,0,
5,0,129,8,0,10,0,12,0,132,9,0,1,0,1,0,1,1,1,1,1,1,1,2,5,2,140,8,2,10,2,12,
2,143,9,2,1,2,1,2,4,2,147,8,2,11,2,12,2,148,1,2,5,2,152,8,2,10,2,12,2,155,
9,2,1,2,5,2,158,8,2,10,2,12,2,161,9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
3,1,3,1,3,3,3,174,8,3,1,4,1,4,3,4,178,8,4,1,4,1,4,1,4,1,4,3,4,184,8,4,1,
4,1,4,1,4,3,4,189,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,198,8,4,10,4,12,4,
201,9,4,1,4,1,4,1,4,3,4,206,8,4,1,5,1,5,3,5,210,8,5,1,5,1,5,1,5,1,5,3,5,
216,8,5,1,5,1,5,1,5,3,5,221,8,5,1,5,1,5,1,5,1,5,1,5,5,5,228,8,5,10,5,12,
5,231,9,5,1,5,1,5,5,5,235,8,5,10,5,12,5,238,9,5,1,5,1,5,1,5,3,5,243,8,5,
1,5,1,5,3,5,247,8,5,1,6,3,6,250,8,6,1,6,1,6,1,6,1,6,1,6,3,6,257,8,6,1,7,
3,7,260,8,7,1,7,1,7,1,7,1,7,1,7,3,7,267,8,7,1,7,1,7,1,7,1,7,1,7,5,7,274,
8,7,10,7,12,7,277,9,7,3,7,279,8,7,1,7,1,7,1,7,1,7,3,7,285,8,7,3,7,287,8,
7,1,8,1,8,1,8,1,8,3,8,293,8,8,1,8,1,8,1,8,3,8,298,8,8,1,8,1,8,1,9,1,9,1,
9,1,9,3,9,306,8,9,1,9,1,9,1,9,3,9,311,8,9,1,9,1,9,1,10,3,10,316,8,10,1,10,
1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
10,1,10,3,10,335,8,10,1,10,1,10,1,10,1,10,3,10,341,8,10,1,10,1,10,1,10,1,
10,1,10,5,10,348,8,10,10,10,12,10,351,9,10,1,10,1,10,3,10,355,8,10,1,10,
1,10,1,10,1,10,1,10,5,10,362,8,10,10,10,12,10,365,9,10,1,10,1,10,1,10,1,
10,1,10,1,10,5,10,373,8,10,10,10,12,10,376,9,10,1,10,1,10,5,10,380,8,10,
10,10,12,10,383,9,10,1,10,1,10,1,10,3,10,388,8,10,1,11,1,11,3,11,392,8,11,
1,11,1,11,1,11,5,11,397,8,11,10,11,12,11,400,9,11,3,11,402,8,11,1,11,1,11,
1,11,1,11,1,11,1,11,5,11,410,8,11,10,11,12,11,413,9,11,3,11,415,8,11,1,11,
1,11,1,11,1,11,3,11,421,8,11,3,11,423,8,11,1,12,1,12,3,12,427,8,12,1,12,
1,12,1,12,5,12,432,8,12,10,12,12,12,435,9,12,3,12,437,8,12,1,12,1,12,1,12,
1,12,5,12,443,8,12,10,12,12,12,446,9,12,1,12,1,12,1,12,1,12,1,12,5,12,453,
8,12,10,12,12,12,456,9,12,3,12,458,8,12,1,12,1,12,1,12,1,12,3,12,464,8,12,
3,12,466,8,12,1,13,1,13,3,13,470,8,13,1,13,1,13,1,13,5,13,475,8,13,10,13,
12,13,478,9,13,1,13,1,13,1,13,1,13,5,13,484,8,13,10,13,12,13,487,9,13,1,
13,3,13,490,8,13,3,13,492,8,13,1,13,1,13,3,13,496,8,13,1,13,1,13,1,13,1,
13,1,13,5,13,503,8,13,10,13,12,13,506,9,13,1,13,1,13,3,13,510,8,13,3,13,
512,8,13,1,13,1,13,1,13,1,13,1,13,5,13,519,8,13,10,13,12,13,522,9,13,1,13,
1,13,1,13,1,13,1,13,1,13,5,13,530,8,13,10,13,12,13,533,9,13,1,13,1,13,5,
13,537,8,13,10,13,12,13,540,9,13,3,13,542,8,13,1,14,3,14,545,8,14,1,14,1,
14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,558,8,14,1,14,1,14,
1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,5,14,570,8,14,10,14,12,14,573,9,
14,1,14,1,14,3,14,577,8,14,1,15,3,15,580,8,15,1,15,1,15,1,15,1,15,1,15,1,
15,1,15,1,15,1,15,1,15,1,15,3,15,593,8,15,1,15,1,15,1,15,1,15,1,15,1,15,
1,15,1,15,1,15,1,15,5,15,605,8,15,10,15,12,15,608,9,15,1,15,1,15,3,15,612,
8,15,1,15,1,15,1,15,1,15,1,15,5,15,619,8,15,10,15,12,15,622,9,15,3,15,624,
8,15,1,15,1,15,1,15,1,15,3,15,630,8,15,3,15,632,8,15,1,16,1,16,3,16,636,
8,16,1,16,5,16,639,8,16,10,16,12,16,642,9,16,1,17,4,17,645,8,17,11,17,12,
17,646,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,659,8,17,1,
18,1,18,3,18,663,8,18,1,18,1,18,1,18,3,18,668,8,18,1,18,1,18,3,18,672,8,
18,1,18,3,18,675,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
1,18,1,18,1,18,1,18,1,18,1,18,3,18,693,8,18,1,18,1,18,1,18,3,18,698,8,18,
1,19,1,19,1,19,3,19,703,8,19,1,20,1,20,1,20,1,20,1,20,1,20,3,20,711,8,20,
1,20,1,20,1,20,3,20,716,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,725,
8,20,1,20,1,20,1,20,5,20,730,8,20,10,20,12,20,733,9,20,1,20,3,20,736,8,20,
1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,
20,752,8,20,1,20,3,20,755,8,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,763,8,
20,1,20,1,20,1,20,1,20,1,20,4,20,770,8,20,11,20,12,20,771,1,20,1,20,3,20,
776,8,20,1,20,1,20,1,20,3,20,781,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,811,8,20,1,20,1,20,1,20,1,20,1,20,
1,20,1,20,1,20,1,20,1,20,3,20,823,8,20,1,20,1,20,1,20,3,20,828,8,20,1,20,
1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,840,8,20,1,20,1,20,1,20,
1,20,3,20,846,8,20,1,20,1,20,1,20,1,20,1,20,3,20,853,8,20,1,20,1,20,3,20,
857,8,20,1,20,1,20,1,20,1,20,1,20,1,20,5,20,865,8,20,10,20,12,20,868,9,20,
3,20,870,8,20,1,20,1,20,1,20,1,20,3,20,876,8,20,1,20,3,20,879,8,20,5,20,
881,8,20,10,20,12,20,884,9,20,1,21,1,21,1,21,1,21,1,21,1,21,5,21,892,8,21,
10,21,12,21,895,9,21,1,21,1,21,3,21,899,8,21,1,21,1,21,1,21,1,21,1,21,1,
21,1,21,1,21,1,21,1,21,3,21,911,8,21,1,21,1,21,3,21,915,8,21,5,21,917,8,
21,10,21,12,21,920,9,21,1,21,3,21,923,8,21,1,21,1,21,1,21,1,21,1,21,3,21,
930,8,21,3,21,932,8,21,1,22,1,22,1,22,1,22,1,22,1,22,3,22,940,8,22,1,22,
1,22,1,23,1,23,1,23,3,23,947,8,23,1,23,3,23,950,8,23,1,24,1,24,3,24,954,
8,24,1,24,1,24,1,24,3,24,959,8,24,1,24,1,24,1,24,1,24,5,24,965,8,24,10,24,
12,24,968,9,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
24,1,24,1,24,5,24,984,8,24,10,24,12,24,987,9,24,1,24,1,24,1,24,3,24,992,
8,24,1,25,1,25,3,25,996,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
1,25,1,25,1,25,5,25,1010,8,25,10,25,12,25,1013,9,25,1,26,1,26,1,26,3,26,
1018,8,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,1026,8,26,1,27,1,27,1,27,3,
27,1031,8,27,1,27,3,27,1034,8,27,1,28,1,28,1,28,3,28,1039,8,28,1,29,1,29,
1,29,1,29,1,29,5,29,1046,8,29,10,29,12,29,1049,9,29,1,29,1,29,3,29,1053,
8,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,1067,
8,30,1,30,3,30,1070,8,30,3,30,1072,8,30,1,31,1,31,1,31,3,31,1077,8,31,1,
31,1,31,3,31,1081,8,31,1,31,3,31,1084,8,31,1,31,1,31,1,31,1,31,1,31,3,31,
1091,8,31,1,31,1,31,1,31,1,31,5,31,1097,8,31,10,31,12,31,1100,9,31,1,31,
3,31,1103,8,31,1,31,1,31,3,31,1107,8,31,1,31,3,31,1110,8,31,1,31,1,31,1,
31,1,31,3,31,1116,8,31,1,31,3,31,1119,8,31,3,31,1121,8,31,1,32,1,32,1,32,
1,32,1,32,5,32,1128,8,32,10,32,12,32,1131,9,32,1,33,1,33,3,33,1135,8,33,
1,33,1,33,3,33,1139,8,33,1,33,1,33,3,33,1143,8,33,1,33,3,33,1146,8,33,1,
34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,1155,8,34,10,34,12,34,1158,9,34,1,
34,1,34,3,34,1162,8,34,1,35,1,35,3,35,1166,8,35,1,35,1,35,1,35,5,35,1171,
8,35,10,35,12,35,1174,9,35,1,35,1,35,1,35,1,35,5,35,1180,8,35,10,35,12,35,
1183,9,35,1,35,3,35,1186,8,35,3,35,1188,8,35,1,35,1,35,3,35,1192,8,35,1,
35,1,35,1,35,1,35,1,35,5,35,1199,8,35,10,35,12,35,1202,9,35,1,35,1,35,3,
35,1206,8,35,3,35,1208,8,35,1,35,1,35,1,35,1,35,1,35,5,35,1215,8,35,10,35,
12,35,1218,9,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,1226,8,35,10,35,12,35,
1229,9,35,1,35,1,35,5,35,1233,8,35,10,35,12,35,1236,9,35,3,35,1238,8,35,
1,36,1,36,1,36,1,36,1,36,3,36,1245,8,36,1,37,1,37,1,37,1,37,1,37,5,37,1252,
8,37,10,37,12,37,1255,9,37,1,37,1,37,3,37,1259,8,37,1,38,3,38,1262,8,38,
1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,3,42,1274,8,42,1,43,1,
43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,
1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,
58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
3,62,1321,8,62,1,62,0,1,40,63,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
122,124,0,16,1,0,131,132,2,0,5,5,106,106,2,0,29,29,62,62,2,0,34,34,60,60,
5,0,25,25,72,72,81,81,122,122,125,125,2,0,7,7,12,13,1,0,8,9,1,0,14,17,1,
0,18,21,4,0,77,77,97,97,99,99,118,118,2,0,59,59,139,139,3,0,25,25,72,72,
125,125,4,0,52,54,104,104,150,150,152,153,2,0,8,10,102,102,2,0,149,149,152,
152,1,0,25,148,1518,0,130,1,0,0,0,2,135,1,0,0,0,4,141,1,0,0,0,6,173,1,0,
0,0,8,175,1,0,0,0,10,207,1,0,0,0,12,249,1,0,0,0,14,259,1,0,0,0,16,288,1,
0,0,0,18,301,1,0,0,0,20,315,1,0,0,0,22,401,1,0,0,0,24,436,1,0,0,0,26,541,
1,0,0,0,28,544,1,0,0,0,30,579,1,0,0,0,32,633,1,0,0,0,34,644,1,0,0,0,36,662,
1,0,0,0,38,702,1,0,0,0,40,780,1,0,0,0,42,885,1,0,0,0,44,933,1,0,0,0,46,943,
1,0,0,0,48,953,1,0,0,0,50,993,1,0,0,0,52,1017,1,0,0,0,54,1027,1,0,0,0,56,
1038,1,0,0,0,58,1040,1,0,0,0,60,1071,1,0,0,0,62,1120,1,0,0,0,64,1122,1,0,
0,0,66,1145,1,0,0,0,68,1161,1,0,0,0,70,1237,1,0,0,0,72,1244,1,0,0,0,74,1246,
1,0,0,0,76,1261,1,0,0,0,78,1265,1,0,0,0,80,1267,1,0,0,0,82,1269,1,0,0,0,
84,1273,1,0,0,0,86,1275,1,0,0,0,88,1277,1,0,0,0,90,1279,1,0,0,0,92,1281,
1,0,0,0,94,1283,1,0,0,0,96,1285,1,0,0,0,98,1287,1,0,0,0,100,1289,1,0,0,0,
102,1291,1,0,0,0,104,1293,1,0,0,0,106,1295,1,0,0,0,108,1297,1,0,0,0,110,
1299,1,0,0,0,112,1301,1,0,0,0,114,1303,1,0,0,0,116,1305,1,0,0,0,118,1307,
1,0,0,0,120,1309,1,0,0,0,122,1311,1,0,0,0,124,1320,1,0,0,0,126,129,3,4,2,
0,127,129,3,2,1,0,128,126,1,0,0,0,128,127,1,0,0,0,129,132,1,0,0,0,130,128,
1,0,0,0,130,131,1,0,0,0,131,133,1,0,0,0,132,130,1,0,0,0,133,134,5,0,0,1,
134,1,1,0,0,0,135,136,5,157,0,0,136,137,6,1,-1,0,137,3,1,0,0,0,138,140,5,
1,0,0,139,138,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,
144,1,0,0,0,143,141,1,0,0,0,144,153,3,6,3,0,145,147,5,1,0,0,146,145,1,0,
0,0,147,148,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,150,1,0,0,0,150,
152,3,6,3,0,151,146,1,0,0,0,152,155,1,0,0,0,153,151,1,0,0,0,153,154,1,0,
0,0,154,159,1,0,0,0,155,153,1,0,0,0,156,158,5,1,0,0,157,156,1,0,0,0,158,
161,1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,0,160,5,1,0,0,0,161,159,1,0,0,
0,162,174,3,8,4,0,163,174,3,10,5,0,164,174,3,12,6,0,165,174,3,14,7,0,166,
174,3,16,8,0,167,174,3,18,9,0,168,174,3,20,10,0,169,174,3,22,11,0,170,174,
3,24,12,0,171,174,3,28,14,0,172,174,3,30,15,0,173,162,1,0,0,0,173,163,1,
0,0,0,173,164,1,0,0,0,173,165,1,0,0,0,173,166,1,0,0,0,173,167,1,0,0,0,173,
168,1,0,0,0,173,169,1,0,0,0,173,170,1,0,0,0,173,171,1,0,0,0,173,172,1,0,
0,0,174,7,1,0,0,0,175,177,5,50,0,0,176,178,5,138,0,0,177,176,1,0,0,0,177,
178,1,0,0,0,178,179,1,0,0,0,179,183,5,84,0,0,180,181,5,80,0,0,181,182,5,
102,0,0,182,184,5,70,0,0,183,180,1,0,0,0,183,184,1,0,0,0,184,188,1,0,0,0,
185,186,3,94,47,0,186,187,5,2,0,0,187,189,1,0,0,0,188,185,1,0,0,0,188,189,
1,0,0,0,189,190,1,0,0,0,190,191,3,108,54,0,191,192,5,107,0,0,192,193,3,96,
48,0,193,194,5,3,0,0,194,199,3,46,23,0,195,196,5,5,0,0,196,198,3,46,23,0,
197,195,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,202,
1,0,0,0,201,199,1,0,0,0,202,205,5,4,0,0,203,204,5,146,0,0,204,206,3,40,20,
0,205,203,1,0,0,0,205,206,1,0,0,0,206,9,1,0,0,0,207,209,5,50,0,0,208,210,
7,0,0,0,209,208,1,0,0,0,209,210,1,0,0,0,210,211,1,0,0,0,211,215,5,130,0,
0,212,213,5,80,0,0,213,214,5,102,0,0,214,216,5,70,0,0,215,212,1,0,0,0,215,
216,1,0,0,0,216,220,1,0,0,0,217,218,3,94,47,0,218,219,5,2,0,0,219,221,1,
0,0,0,220,217,1,0,0,0,220,221,1,0,0,0,221,222,1,0,0,0,222,246,3,96,48,0,
223,224,5,3,0,0,224,229,3,32,16,0,225,226,5,5,0,0,226,228,3,32,16,0,227,
225,1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,236,1,0,
0,0,231,229,1,0,0,0,232,233,5,5,0,0,233,235,3,48,24,0,234,232,1,0,0,0,235,
238,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,239,1,0,0,0,238,236,1,0,
0,0,239,242,5,4,0,0,240,241,5,148,0,0,241,243,5,149,0,0,242,240,1,0,0,0,
242,243,1,0,0,0,243,247,1,0,0,0,244,245,5,33,0,0,245,247,3,24,12,0,246,223,
1,0,0,0,246,244,1,0,0,0,247,11,1,0,0,0,248,250,3,50,25,0,249,248,1,0,0,0,
249,250,1,0,0,0,250,251,1,0,0,0,251,252,5,59,0,0,252,253,5,75,0,0,253,256,
3,52,26,0,254,255,5,146,0,0,255,257,3,40,20,0,256,254,1,0,0,0,256,257,1,
0,0,0,257,13,1,0,0,0,258,260,3,50,25,0,259,258,1,0,0,0,259,260,1,0,0,0,260,
261,1,0,0,0,261,262,5,59,0,0,262,263,5,75,0,0,263,266,3,52,26,0,264,265,
5,146,0,0,265,267,3,40,20,0,266,264,1,0,0,0,266,267,1,0,0,0,267,286,1,0,
0,0,268,269,5,109,0,0,269,270,5,40,0,0,270,275,3,54,27,0,271,272,5,5,0,0,
272,274,3,54,27,0,273,271,1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,275,276,
1,0,0,0,276,279,1,0,0,0,277,275,1,0,0,0,278,268,1,0,0,0,278,279,1,0,0,0,
279,280,1,0,0,0,280,281,5,98,0,0,281,284,3,40,20,0,282,283,7,1,0,0,283,285,
3,40,20,0,284,282,1,0,0,0,284,285,1,0,0,0,285,287,1,0,0,0,286,278,1,0,0,
0,286,287,1,0,0,0,287,15,1,0,0,0,288,289,5,63,0,0,289,292,5,84,0,0,290,291,
5,80,0,0,291,293,5,70,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,297,1,0,0,
0,294,295,3,94,47,0,295,296,5,2,0,0,296,298,1,0,0,0,297,294,1,0,0,0,297,
298,1,0,0,0,298,299,1,0,0,0,299,300,3,108,54,0,300,17,1,0,0,0,301,302,5,
63,0,0,302,305,5,130,0,0,303,304,5,80,0,0,304,306,5,70,0,0,305,303,1,0,0,
0,305,306,1,0,0,0,306,310,1,0,0,0,307,308,3,94,47,0,308,309,5,2,0,0,309,
311,1,0,0,0,310,307,1,0,0,0,310,311,1,0,0,0,311,312,1,0,0,0,312,313,3,96,
48,0,313,19,1,0,0,0,314,316,3,50,25,0,315,314,1,0,0,0,315,316,1,0,0,0,316,
334,1,0,0,0,317,335,5,88,0,0,318,335,5,122,0,0,319,320,5,88,0,0,320,321,
5,108,0,0,321,335,5,122,0,0,322,323,5,88,0,0,323,324,5,108,0,0,324,335,5,
125,0,0,325,326,5,88,0,0,326,327,5,108,0,0,327,335,5,25,0,0,328,329,5,88,
0,0,329,330,5,108,0,0,330,335,5,72,0,0,331,332,5,88,0,0,332,333,5,108,0,
0,333,335,5,81,0,0,334,317,1,0,0,0,334,318,1,0,0,0,334,319,1,0,0,0,334,322,
1,0,0,0,334,325,1,0,0,0,334,328,1,0,0,0,334,331,1,0,0,0,335,336,1,0,0,0,
336,340,5,91,0,0,337,338,3,94,47,0,338,339,5,2,0,0,339,341,1,0,0,0,340,337,
1,0,0,0,340,341,1,0,0,0,341,342,1,0,0,0,342,354,3,96,48,0,343,344,5,3,0,
0,344,349,3,102,51,0,345,346,5,5,0,0,346,348,3,102,51,0,347,345,1,0,0,0,
348,351,1,0,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,352,1,0,0,0,351,349,
1,0,0,0,352,353,5,4,0,0,353,355,1,0,0,0,354,343,1,0,0,0,354,355,1,0,0,0,
355,387,1,0,0,0,356,357,5,142,0,0,357,358,5,3,0,0,358,363,3,40,20,0,359,
360,5,5,0,0,360,362,3,40,20,0,361,359,1,0,0,0,362,365,1,0,0,0,363,361,1,
0,0,0,363,364,1,0,0,0,364,366,1,0,0,0,365,363,1,0,0,0,366,381,5,4,0,0,367,
368,5,5,0,0,368,369,5,3,0,0,369,374,3,40,20,0,370,371,5,5,0,0,371,373,3,
40,20,0,372,370,1,0,0,0,373,376,1,0,0,0,374,372,1,0,0,0,374,375,1,0,0,0,
375,377,1,0,0,0,376,374,1,0,0,0,377,378,5,4,0,0,378,380,1,0,0,0,379,367,
1,0,0,0,380,383,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,388,1,0,0,0,
383,381,1,0,0,0,384,388,3,24,12,0,385,386,5,56,0,0,386,388,5,142,0,0,387,
356,1,0,0,0,387,384,1,0,0,0,387,385,1,0,0,0,388,21,1,0,0,0,389,391,5,147,
0,0,390,392,5,116,0,0,391,390,1,0,0,0,391,392,1,0,0,0,392,393,1,0,0,0,393,
398,3,58,29,0,394,395,5,5,0,0,395,397,3,58,29,0,396,394,1,0,0,0,397,400,
1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,402,1,0,0,0,400,398,1,0,0,0,
401,389,1,0,0,0,401,402,1,0,0,0,402,403,1,0,0,0,403,414,3,70,35,0,404,405,
5,109,0,0,405,406,5,40,0,0,406,411,3,54,27,0,407,408,5,5,0,0,408,410,3,54,
27,0,409,407,1,0,0,0,410,413,1,0,0,0,411,409,1,0,0,0,411,412,1,0,0,0,412,
415,1,0,0,0,413,411,1,0,0,0,414,404,1,0,0,0,414,415,1,0,0,0,415,422,1,0,
0,0,416,417,5,98,0,0,417,420,3,40,20,0,418,419,7,1,0,0,419,421,3,40,20,0,
420,418,1,0,0,0,420,421,1,0,0,0,421,423,1,0,0,0,422,416,1,0,0,0,422,423,
1,0,0,0,423,23,1,0,0,0,424,426,5,147,0,0,425,427,5,116,0,0,426,425,1,0,0,
0,426,427,1,0,0,0,427,428,1,0,0,0,428,433,3,58,29,0,429,430,5,5,0,0,430,
432,3,58,29,0,431,429,1,0,0,0,432,435,1,0,0,0,433,431,1,0,0,0,433,434,1,
0,0,0,434,437,1,0,0,0,435,433,1,0,0,0,436,424,1,0,0,0,436,437,1,0,0,0,437,
438,1,0,0,0,438,444,3,26,13,0,439,440,3,72,36,0,440,441,3,26,13,0,441,443,
1,0,0,0,442,439,1,0,0,0,443,446,1,0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,
445,457,1,0,0,0,446,444,1,0,0,0,447,448,5,109,0,0,448,449,5,40,0,0,449,454,
3,54,27,0,450,451,5,5,0,0,451,453,3,54,27,0,452,450,1,0,0,0,453,456,1,0,
0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,458,1,0,0,0,456,454,1,0,0,0,457,
447,1,0,0,0,457,458,1,0,0,0,458,465,1,0,0,0,459,460,5,98,0,0,460,463,3,40,
20,0,461,462,7,1,0,0,462,464,3,40,20,0,463,461,1,0,0,0,463,464,1,0,0,0,464,
466,1,0,0,0,465,459,1,0,0,0,465,466,1,0,0,0,466,25,1,0,0,0,467,469,5,128,
0,0,468,470,7,2,0,0,469,468,1,0,0,0,469,470,1,0,0,0,470,471,1,0,0,0,471,
476,3,60,30,0,472,473,5,5,0,0,473,475,3,60,30,0,474,472,1,0,0,0,475,478,
1,0,0,0,476,474,1,0,0,0,476,477,1,0,0,0,477,491,1,0,0,0,478,476,1,0,0,0,
479,489,5,75,0,0,480,485,3,62,31,0,481,482,5,5,0,0,482,484,3,62,31,0,483,
481,1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,485,486,1,0,0,0,486,490,1,0,
0,0,487,485,1,0,0,0,488,490,3,64,32,0,489,480,1,0,0,0,489,488,1,0,0,0,490,
492,1,0,0,0,491,479,1,0,0,0,491,492,1,0,0,0,492,495,1,0,0,0,493,494,5,146,
0,0,494,496,3,40,20,0,495,493,1,0,0,0,495,496,1,0,0,0,496,511,1,0,0,0,497,
498,5,78,0,0,498,499,5,40,0,0,499,504,3,40,20,0,500,501,5,5,0,0,501,503,
3,40,20,0,502,500,1,0,0,0,503,506,1,0,0,0,504,502,1,0,0,0,504,505,1,0,0,
0,505,509,1,0,0,0,506,504,1,0,0,0,507,508,5,79,0,0,508,510,3,40,20,0,509,
507,1,0,0,0,509,510,1,0,0,0,510,512,1,0,0,0,511,497,1,0,0,0,511,512,1,0,
0,0,512,542,1,0,0,0,513,514,5,142,0,0,514,515,5,3,0,0,515,520,3,40,20,0,
516,517,5,5,0,0,517,519,3,40,20,0,518,516,1,0,0,0,519,522,1,0,0,0,520,518,
1,0,0,0,520,521,1,0,0,0,521,523,1,0,0,0,522,520,1,0,0,0,523,538,5,4,0,0,
524,525,5,5,0,0,525,526,5,3,0,0,526,531,3,40,20,0,527,528,5,5,0,0,528,530,
3,40,20,0,529,527,1,0,0,0,530,533,1,0,0,0,531,529,1,0,0,0,531,532,1,0,0,
0,532,534,1,0,0,0,533,531,1,0,0,0,534,535,5,4,0,0,535,537,1,0,0,0,536,524,
1,0,0,0,537,540,1,0,0,0,538,536,1,0,0,0,538,539,1,0,0,0,539,542,1,0,0,0,
540,538,1,0,0,0,541,467,1,0,0,0,541,513,1,0,0,0,542,27,1,0,0,0,543,545,3,
50,25,0,544,543,1,0,0,0,544,545,1,0,0,0,545,546,1,0,0,0,546,557,5,139,0,
0,547,548,5,108,0,0,548,558,5,125,0,0,549,550,5,108,0,0,550,558,5,25,0,0,
551,552,5,108,0,0,552,558,5,122,0,0,553,554,5,108,0,0,554,558,5,72,0,0,555,
556,5,108,0,0,556,558,5,81,0,0,557,547,1,0,0,0,557,549,1,0,0,0,557,551,1,
0,0,0,557,553,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,559,1,0,0,0,559,
560,3,52,26,0,560,561,5,129,0,0,561,562,3,102,51,0,562,563,5,6,0,0,563,571,
3,40,20,0,564,565,5,5,0,0,565,566,3,102,51,0,566,567,5,6,0,0,567,568,3,40,
20,0,568,570,1,0,0,0,569,564,1,0,0,0,570,573,1,0,0,0,571,569,1,0,0,0,571,
572,1,0,0,0,572,576,1,0,0,0,573,571,1,0,0,0,574,575,5,146,0,0,575,577,3,
40,20,0,576,574,1,0,0,0,576,577,1,0,0,0,577,29,1,0,0,0,578,580,3,50,25,0,
579,578,1,0,0,0,579,580,1,0,0,0,580,581,1,0,0,0,581,592,5,139,0,0,582,583,
5,108,0,0,583,593,5,125,0,0,584,585,5,108,0,0,585,593,5,25,0,0,586,587,5,
108,0,0,587,593,5,122,0,0,588,589,5,108,0,0,589,593,5,72,0,0,590,591,5,108,
0,0,591,593,5,81,0,0,592,582,1,0,0,0,592,584,1,0,0,0,592,586,1,0,0,0,592,
588,1,0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,593,594,1,0,0,0,594,595,3,52,
26,0,595,596,5,129,0,0,596,597,3,102,51,0,597,598,5,6,0,0,598,606,3,40,20,
0,599,600,5,5,0,0,600,601,3,102,51,0,601,602,5,6,0,0,602,603,3,40,20,0,603,
605,1,0,0,0,604,599,1,0,0,0,605,608,1,0,0,0,606,604,1,0,0,0,606,607,1,0,
0,0,607,611,1,0,0,0,608,606,1,0,0,0,609,610,5,146,0,0,610,612,3,40,20,0,
611,609,1,0,0,0,611,612,1,0,0,0,612,631,1,0,0,0,613,614,5,109,0,0,614,615,
5,40,0,0,615,620,3,54,27,0,616,617,5,5,0,0,617,619,3,54,27,0,618,616,1,0,
0,0,619,622,1,0,0,0,620,618,1,0,0,0,620,621,1,0,0,0,621,624,1,0,0,0,622,
620,1,0,0,0,623,613,1,0,0,0,623,624,1,0,0,0,624,625,1,0,0,0,625,626,5,98,
0,0,626,629,3,40,20,0,627,628,7,1,0,0,628,630,3,40,20,0,629,627,1,0,0,0,
629,630,1,0,0,0,630,632,1,0,0,0,631,623,1,0,0,0,631,632,1,0,0,0,632,31,1,
0,0,0,633,635,3,102,51,0,634,636,3,34,17,0,635,634,1,0,0,0,635,636,1,0,0,
0,636,640,1,0,0,0,637,639,3,36,18,0,638,637,1,0,0,0,639,642,1,0,0,0,640,
638,1,0,0,0,640,641,1,0,0,0,641,33,1,0,0,0,642,640,1,0,0,0,643,645,3,90,
45,0,644,643,1,0,0,0,645,646,1,0,0,0,646,644,1,0,0,0,646,647,1,0,0,0,647,
658,1,0,0,0,648,649,5,3,0,0,649,650,3,76,38,0,650,651,5,4,0,0,651,659,1,
0,0,0,652,653,5,3,0,0,653,654,3,76,38,0,654,655,5,5,0,0,655,656,3,76,38,
0,656,657,5,4,0,0,657,659,1,0,0,0,658,648,1,0,0,0,658,652,1,0,0,0,658,659,
1,0,0,0,659,35,1,0,0,0,660,661,5,49,0,0,661,663,3,90,45,0,662,660,1,0,0,
0,662,663,1,0,0,0,663,697,1,0,0,0,664,665,5,113,0,0,665,667,5,95,0,0,666,
668,7,3,0,0,667,666,1,0,0,0,667,668,1,0,0,0,668,669,1,0,0,0,669,671,3,38,
19,0,670,672,5,36,0,0,671,670,1,0,0,0,671,672,1,0,0,0,672,698,1,0,0,0,673,
675,5,102,0,0,674,673,1,0,0,0,674,675,1,0,0,0,675,676,1,0,0,0,676,677,5,
104,0,0,677,698,3,38,19,0,678,679,5,138,0,0,679,698,3,38,19,0,680,681,5,
44,0,0,681,682,5,3,0,0,682,683,3,40,20,0,683,684,5,4,0,0,684,698,1,0,0,0,
685,692,5,56,0,0,686,693,3,76,38,0,687,693,3,78,39,0,688,689,5,3,0,0,689,
690,3,40,20,0,690,691,5,4,0,0,691,693,1,0,0,0,692,686,1,0,0,0,692,687,1,
0,0,0,692,688,1,0,0,0,693,698,1,0,0,0,694,695,5,45,0,0,695,698,3,104,52,
0,696,698,3,42,21,0,697,664,1,0,0,0,697,674,1,0,0,0,697,678,1,0,0,0,697,
680,1,0,0,0,697,685,1,0,0,0,697,694,1,0,0,0,697,696,1,0,0,0,698,37,1,0,0,
0,699,700,5,107,0,0,700,701,5,48,0,0,701,703,7,4,0,0,702,699,1,0,0,0,702,
703,1,0,0,0,703,39,1,0,0,0,704,705,6,20,-1,0,705,781,3,78,39,0,706,781,5,
151,0,0,707,708,3,94,47,0,708,709,5,2,0,0,709,711,1,0,0,0,710,707,1,0,0,
0,710,711,1,0,0,0,711,712,1,0,0,0,712,713,3,96,48,0,713,714,5,2,0,0,714,
716,1,0,0,0,715,710,1,0,0,0,715,716,1,0,0,0,716,717,1,0,0,0,717,781,3,102,
51,0,718,719,3,80,40,0,719,720,3,40,20,21,720,781,1,0,0,0,721,722,3,92,46,
0,722,735,5,3,0,0,723,725,5,62,0,0,724,723,1,0,0,0,724,725,1,0,0,0,725,726,
1,0,0,0,726,731,3,40,20,0,727,728,5,5,0,0,728,730,3,40,20,0,729,727,1,0,
0,0,730,733,1,0,0,0,731,729,1,0,0,0,731,732,1,0,0,0,732,736,1,0,0,0,733,
731,1,0,0,0,734,736,5,7,0,0,735,724,1,0,0,0,735,734,1,0,0,0,735,736,1,0,
0,0,736,737,1,0,0,0,737,738,5,4,0,0,738,781,1,0,0,0,739,740,5,3,0,0,740,
741,3,40,20,0,741,742,5,4,0,0,742,781,1,0,0,0,743,744,5,43,0,0,744,745,5,
3,0,0,745,746,3,40,20,0,746,747,5,33,0,0,747,748,3,34,17,0,748,749,5,4,0,
0,749,781,1,0,0,0,750,752,5,102,0,0,751,750,1,0,0,0,751,752,1,0,0,0,752,
753,1,0,0,0,753,755,5,70,0,0,754,751,1,0,0,0,754,755,1,0,0,0,755,756,1,0,
0,0,756,757,5,3,0,0,757,758,3,24,12,0,758,759,5,4,0,0,759,781,1,0,0,0,760,
762,5,42,0,0,761,763,3,40,20,0,762,761,1,0,0,0,762,763,1,0,0,0,763,769,1,
0,0,0,764,765,5,145,0,0,765,766,3,40,20,0,766,767,5,133,0,0,767,768,3,40,
20,0,768,770,1,0,0,0,769,764,1,0,0,0,770,771,1,0,0,0,771,769,1,0,0,0,771,
772,1,0,0,0,772,775,1,0,0,0,773,774,5,65,0,0,774,776,3,40,20,0,775,773,1,
0,0,0,775,776,1,0,0,0,776,777,1,0,0,0,777,778,5,66,0,0,778,781,1,0,0,0,779,
781,3,44,22,0,780,704,1,0,0,0,780,706,1,0,0,0,780,715,1,0,0,0,780,718,1,
0,0,0,780,721,1,0,0,0,780,739,1,0,0,0,780,743,1,0,0,0,780,754,1,0,0,0,780,
760,1,0,0,0,780,779,1,0,0,0,781,882,1,0,0,0,782,783,10,20,0,0,783,784,5,
11,0,0,784,881,3,40,20,21,785,786,10,19,0,0,786,787,7,5,0,0,787,881,3,40,
20,20,788,789,10,18,0,0,789,790,7,6,0,0,790,881,3,40,20,19,791,792,10,17,
0,0,792,793,7,7,0,0,793,881,3,40,20,18,794,795,10,16,0,0,795,796,7,8,0,0,
796,881,3,40,20,17,797,810,10,15,0,0,798,811,5,6,0,0,799,811,5,22,0,0,800,
811,5,23,0,0,801,811,5,24,0,0,802,811,5,92,0,0,803,804,5,92,0,0,804,811,
5,102,0,0,805,811,5,83,0,0,806,811,5,97,0,0,807,811,5,77,0,0,808,811,5,99,
0,0,809,811,5,118,0,0,810,798,1,0,0,0,810,799,1,0,0,0,810,800,1,0,0,0,810,
801,1,0,0,0,810,802,1,0,0,0,810,803,1,0,0,0,810,805,1,0,0,0,810,806,1,0,
0,0,810,807,1,0,0,0,810,808,1,0,0,0,810,809,1,0,0,0,811,812,1,0,0,0,812,
881,3,40,20,16,813,814,10,14,0,0,814,815,5,32,0,0,815,881,3,40,20,15,816,
817,10,13,0,0,817,818,5,108,0,0,818,881,3,40,20,14,819,820,10,6,0,0,820,
822,5,92,0,0,821,823,5,102,0,0,822,821,1,0,0,0,822,823,1,0,0,0,823,824,1,
0,0,0,824,881,3,40,20,7,825,827,10,5,0,0,826,828,5,102,0,0,827,826,1,0,0,
0,827,828,1,0,0,0,828,829,1,0,0,0,829,830,5,39,0,0,830,831,3,40,20,0,831,
832,5,32,0,0,832,833,3,40,20,6,833,881,1,0,0,0,834,835,10,9,0,0,835,836,
5,45,0,0,836,881,3,104,52,0,837,839,10,8,0,0,838,840,5,102,0,0,839,838,1,
0,0,0,839,840,1,0,0,0,840,841,1,0,0,0,841,842,7,9,0,0,842,845,3,40,20,0,
843,844,5,67,0,0,844,846,3,40,20,0,845,843,1,0,0,0,845,846,1,0,0,0,846,881,
1,0,0,0,847,852,10,7,0,0,848,853,5,93,0,0,849,853,5,103,0,0,850,851,5,102,
0,0,851,853,5,104,0,0,852,848,1,0,0,0,852,849,1,0,0,0,852,850,1,0,0,0,853,
881,1,0,0,0,854,856,10,4,0,0,855,857,5,102,0,0,856,855,1,0,0,0,856,857,1,
0,0,0,857,858,1,0,0,0,858,878,5,83,0,0,859,869,5,3,0,0,860,870,3,24,12,0,
861,866,3,40,20,0,862,863,5,5,0,0,863,865,3,40,20,0,864,862,1,0,0,0,865,
868,1,0,0,0,866,864,1,0,0,0,866,867,1,0,0,0,867,870,1,0,0,0,868,866,1,0,
0,0,869,860,1,0,0,0,869,861,1,0,0,0,869,870,1,0,0,0,870,871,1,0,0,0,871,
879,5,4,0,0,872,873,3,94,47,0,873,874,5,2,0,0,874,876,1,0,0,0,875,872,1,
0,0,0,875,876,1,0,0,0,876,877,1,0,0,0,877,879,3,96,48,0,878,859,1,0,0,0,
878,875,1,0,0,0,879,881,1,0,0,0,880,782,1,0,0,0,880,785,1,0,0,0,880,788,
1,0,0,0,880,791,1,0,0,0,880,794,1,0,0,0,880,797,1,0,0,0,880,813,1,0,0,0,
880,816,1,0,0,0,880,819,1,0,0,0,880,825,1,0,0,0,880,834,1,0,0,0,880,837,
1,0,0,0,880,847,1,0,0,0,880,854,1,0,0,0,881,884,1,0,0,0,882,880,1,0,0,0,
882,883,1,0,0,0,883,41,1,0,0,0,884,882,1,0,0,0,885,886,5,117,0,0,886,898,
3,106,53,0,887,888,5,3,0,0,888,893,3,102,51,0,889,890,5,5,0,0,890,892,3,
102,51,0,891,889,1,0,0,0,892,895,1,0,0,0,893,891,1,0,0,0,893,894,1,0,0,0,
894,896,1,0,0,0,895,893,1,0,0,0,896,897,5,4,0,0,897,899,1,0,0,0,898,887,
1,0,0,0,898,899,1,0,0,0,899,918,1,0,0,0,900,901,5,107,0,0,901,910,7,10,0,
0,902,903,5,129,0,0,903,911,5,104,0,0,904,905,5,129,0,0,905,911,5,56,0,0,
906,911,5,41,0,0,907,911,5,123,0,0,908,909,5,101,0,0,909,911,5,26,0,0,910,
902,1,0,0,0,910,904,1,0,0,0,910,906,1,0,0,0,910,907,1,0,0,0,910,908,1,0,
0,0,911,915,1,0,0,0,912,913,5,99,0,0,913,915,3,90,45,0,914,900,1,0,0,0,914,
912,1,0,0,0,915,917,1,0,0,0,916,914,1,0,0,0,917,920,1,0,0,0,918,916,1,0,
0,0,918,919,1,0,0,0,919,931,1,0,0,0,920,918,1,0,0,0,921,923,5,102,0,0,922,
921,1,0,0,0,922,923,1,0,0,0,923,924,1,0,0,0,924,929,5,57,0,0,925,926,5,86,
0,0,926,930,5,58,0,0,927,928,5,86,0,0,928,930,5,82,0,0,929,925,1,0,0,0,929,
927,1,0,0,0,929,930,1,0,0,0,930,932,1,0,0,0,931,922,1,0,0,0,931,932,1,0,
0,0,932,43,1,0,0,0,933,934,5,115,0,0,934,939,5,3,0,0,935,940,5,81,0,0,936,
937,7,11,0,0,937,938,5,5,0,0,938,940,3,82,41,0,939,935,1,0,0,0,939,936,1,
0,0,0,940,941,1,0,0,0,941,942,5,4,0,0,942,45,1,0,0,0,943,946,3,102,51,0,
944,945,5,45,0,0,945,947,3,104,52,0,946,944,1,0,0,0,946,947,1,0,0,0,947,
949,1,0,0,0,948,950,7,3,0,0,949,948,1,0,0,0,949,950,1,0,0,0,950,47,1,0,0,
0,951,952,5,49,0,0,952,954,3,90,45,0,953,951,1,0,0,0,953,954,1,0,0,0,954,
991,1,0,0,0,955,956,5,113,0,0,956,959,5,95,0,0,957,959,5,138,0,0,958,955,
1,0,0,0,958,957,1,0,0,0,959,960,1,0,0,0,960,961,5,3,0,0,961,966,3,46,23,
0,962,963,5,5,0,0,963,965,3,46,23,0,964,962,1,0,0,0,965,968,1,0,0,0,966,
964,1,0,0,0,966,967,1,0,0,0,967,969,1,0,0,0,968,966,1,0,0,0,969,970,5,4,
0,0,970,971,3,38,19,0,971,992,1,0,0,0,972,973,5,44,0,0,973,974,5,3,0,0,974,
975,3,40,20,0,975,976,5,4,0,0,976,992,1,0,0,0,977,978,5,74,0,0,978,979,5,
95,0,0,979,980,5,3,0,0,980,985,3,102,51,0,981,982,5,5,0,0,982,984,3,102,
51,0,983,981,1,0,0,0,984,987,1,0,0,0,985,983,1,0,0,0,985,986,1,0,0,0,986,
988,1,0,0,0,987,985,1,0,0,0,988,989,5,4,0,0,989,990,3,42,21,0,990,992,1,
0,0,0,991,958,1,0,0,0,991,972,1,0,0,0,991,977,1,0,0,0,992,49,1,0,0,0,993,
995,5,147,0,0,994,996,5,116,0,0,995,994,1,0,0,0,995,996,1,0,0,0,996,997,
1,0,0,0,997,998,3,74,37,0,998,999,5,33,0,0,999,1000,5,3,0,0,1000,1001,3,
24,12,0,1001,1011,5,4,0,0,1002,1003,5,5,0,0,1003,1004,3,74,37,0,1004,1005,
5,33,0,0,1005,1006,5,3,0,0,1006,1007,3,24,12,0,1007,1008,5,4,0,0,1008,1010,
1,0,0,0,1009,1002,1,0,0,0,1010,1013,1,0,0,0,1011,1009,1,0,0,0,1011,1012,
1,0,0,0,1012,51,1,0,0,0,1013,1011,1,0,0,0,1014,1015,3,94,47,0,1015,1016,
5,2,0,0,1016,1018,1,0,0,0,1017,1014,1,0,0,0,1017,1018,1,0,0,0,1018,1019,
1,0,0,0,1019,1025,3,96,48,0,1020,1021,5,85,0,0,1021,1022,5,40,0,0,1022,1026,
3,108,54,0,1023,1024,5,102,0,0,1024,1026,5,85,0,0,1025,1020,1,0,0,0,1025,
1023,1,0,0,0,1025,1026,1,0,0,0,1026,53,1,0,0,0,1027,1030,3,40,20,0,1028,
1029,5,45,0,0,1029,1031,3,104,52,0,1030,1028,1,0,0,0,1030,1031,1,0,0,0,1031,
1033,1,0,0,0,1032,1034,7,3,0,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,
55,1,0,0,0,1035,1039,3,76,38,0,1036,1039,3,90,45,0,1037,1039,5,152,0,0,1038,
1035,1,0,0,0,1038,1036,1,0,0,0,1038,1037,1,0,0,0,1039,57,1,0,0,0,1040,1052,
3,96,48,0,1041,1042,5,3,0,0,1042,1047,3,102,51,0,1043,1044,5,5,0,0,1044,
1046,3,102,51,0,1045,1043,1,0,0,0,1046,1049,1,0,0,0,1047,1045,1,0,0,0,1047,
1048,1,0,0,0,1048,1050,1,0,0,0,1049,1047,1,0,0,0,1050,1051,5,4,0,0,1051,
1053,1,0,0,0,1052,1041,1,0,0,0,1052,1053,1,0,0,0,1053,1054,1,0,0,0,1054,
1055,5,33,0,0,1055,1056,5,3,0,0,1056,1057,3,24,12,0,1057,1058,5,4,0,0,1058,
59,1,0,0,0,1059,1072,5,7,0,0,1060,1061,3,96,48,0,1061,1062,5,2,0,0,1062,
1063,5,7,0,0,1063,1072,1,0,0,0,1064,1069,3,40,20,0,1065,1067,5,33,0,0,1066,
1065,1,0,0,0,1066,1067,1,0,0,0,1067,1068,1,0,0,0,1068,1070,3,86,43,0,1069,
1066,1,0,0,0,1069,1070,1,0,0,0,1070,1072,1,0,0,0,1071,1059,1,0,0,0,1071,
1060,1,0,0,0,1071,1064,1,0,0,0,1072,61,1,0,0,0,1073,1074,3,94,47,0,1074,
1075,5,2,0,0,1075,1077,1,0,0,0,1076,1073,1,0,0,0,1076,1077,1,0,0,0,1077,
1078,1,0,0,0,1078,1083,3,96,48,0,1079,1081,5,33,0,0,1080,1079,1,0,0,0,1080,
1081,1,0,0,0,1081,1082,1,0,0,0,1082,1084,3,120,60,0,1083,1080,1,0,0,0,1083,
1084,1,0,0,0,1084,1090,1,0,0,0,1085,1086,5,85,0,0,1086,1087,5,40,0,0,1087,
1091,3,108,54,0,1088,1089,5,102,0,0,1089,1091,5,85,0,0,1090,1085,1,0,0,0,
1090,1088,1,0,0,0,1090,1091,1,0,0,0,1091,1121,1,0,0,0,1092,1102,5,3,0,0,
1093,1098,3,62,31,0,1094,1095,5,5,0,0,1095,1097,3,62,31,0,1096,1094,1,0,
0,0,1097,1100,1,0,0,0,1098,1096,1,0,0,0,1098,1099,1,0,0,0,1099,1103,1,0,
0,0,1100,1098,1,0,0,0,1101,1103,3,64,32,0,1102,1093,1,0,0,0,1102,1101,1,
0,0,0,1103,1104,1,0,0,0,1104,1109,5,4,0,0,1105,1107,5,33,0,0,1106,1105,1,
0,0,0,1106,1107,1,0,0,0,1107,1108,1,0,0,0,1108,1110,3,120,60,0,1109,1106,
1,0,0,0,1109,1110,1,0,0,0,1110,1121,1,0,0,0,1111,1112,5,3,0,0,1112,1113,
3,24,12,0,1113,1118,5,4,0,0,1114,1116,5,33,0,0,1115,1114,1,0,0,0,1115,1116,
1,0,0,0,1116,1117,1,0,0,0,1117,1119,3,120,60,0,1118,1115,1,0,0,0,1118,1119,
1,0,0,0,1119,1121,1,0,0,0,1120,1076,1,0,0,0,1120,1092,1,0,0,0,1120,1111,
1,0,0,0,1121,63,1,0,0,0,1122,1129,3,62,31,0,1123,1124,3,66,33,0,1124,1125,
3,62,31,0,1125,1126,3,68,34,0,1126,1128,1,0,0,0,1127,1123,1,0,0,0,1128,1131,
1,0,0,0,1129,1127,1,0,0,0,1129,1130,1,0,0,0,1130,65,1,0,0,0,1131,1129,1,
0,0,0,1132,1146,5,5,0,0,1133,1135,5,100,0,0,1134,1133,1,0,0,0,1134,1135,
1,0,0,0,1135,1142,1,0,0,0,1136,1138,5,96,0,0,1137,1139,5,110,0,0,1138,1137,
1,0,0,0,1138,1139,1,0,0,0,1139,1143,1,0,0,0,1140,1143,5,87,0,0,1141,1143,
5,51,0,0,1142,1136,1,0,0,0,1142,1140,1,0,0,0,1142,1141,1,0,0,0,1142,1143,
1,0,0,0,1143,1144,1,0,0,0,1144,1146,5,94,0,0,1145,1132,1,0,0,0,1145,1134,
1,0,0,0,1146,67,1,0,0,0,1147,1148,5,107,0,0,1148,1162,3,40,20,0,1149,1150,
5,140,0,0,1150,1151,5,3,0,0,1151,1156,3,102,51,0,1152,1153,5,5,0,0,1153,
1155,3,102,51,0,1154,1152,1,0,0,0,1155,1158,1,0,0,0,1156,1154,1,0,0,0,1156,
1157,1,0,0,0,1157,1159,1,0,0,0,1158,1156,1,0,0,0,1159,1160,5,4,0,0,1160,
1162,1,0,0,0,1161,1147,1,0,0,0,1161,1149,1,0,0,0,1161,1162,1,0,0,0,1162,
69,1,0,0,0,1163,1165,5,128,0,0,1164,1166,7,2,0,0,1165,1164,1,0,0,0,1165,
1166,1,0,0,0,1166,1167,1,0,0,0,1167,1172,3,60,30,0,1168,1169,5,5,0,0,1169,
1171,3,60,30,0,1170,1168,1,0,0,0,1171,1174,1,0,0,0,1172,1170,1,0,0,0,1172,
1173,1,0,0,0,1173,1187,1,0,0,0,1174,1172,1,0,0,0,1175,1185,5,75,0,0,1176,
1181,3,62,31,0,1177,1178,5,5,0,0,1178,1180,3,62,31,0,1179,1177,1,0,0,0,1180,
1183,1,0,0,0,1181,1179,1,0,0,0,1181,1182,1,0,0,0,1182,1186,1,0,0,0,1183,
1181,1,0,0,0,1184,1186,3,64,32,0,1185,1176,1,0,0,0,1185,1184,1,0,0,0,1186,
1188,1,0,0,0,1187,1175,1,0,0,0,1187,1188,1,0,0,0,1188,1191,1,0,0,0,1189,
1190,5,146,0,0,1190,1192,3,40,20,0,1191,1189,1,0,0,0,1191,1192,1,0,0,0,1192,
1207,1,0,0,0,1193,1194,5,78,0,0,1194,1195,5,40,0,0,1195,1200,3,40,20,0,1196,
1197,5,5,0,0,1197,1199,3,40,20,0,1198,1196,1,0,0,0,1199,1202,1,0,0,0,1200,
1198,1,0,0,0,1200,1201,1,0,0,0,1201,1205,1,0,0,0,1202,1200,1,0,0,0,1203,
1204,5,79,0,0,1204,1206,3,40,20,0,1205,1203,1,0,0,0,1205,1206,1,0,0,0,1206,
1208,1,0,0,0,1207,1193,1,0,0,0,1207,1208,1,0,0,0,1208,1238,1,0,0,0,1209,
1210,5,142,0,0,1210,1211,5,3,0,0,1211,1216,3,40,20,0,1212,1213,5,5,0,0,1213,
1215,3,40,20,0,1214,1212,1,0,0,0,1215,1218,1,0,0,0,1216,1214,1,0,0,0,1216,
1217,1,0,0,0,1217,1219,1,0,0,0,1218,1216,1,0,0,0,1219,1234,5,4,0,0,1220,
1221,5,5,0,0,1221,1222,5,3,0,0,1222,1227,3,40,20,0,1223,1224,5,5,0,0,1224,
1226,3,40,20,0,1225,1223,1,0,0,0,1226,1229,1,0,0,0,1227,1225,1,0,0,0,1227,
1228,1,0,0,0,1228,1230,1,0,0,0,1229,1227,1,0,0,0,1230,1231,5,4,0,0,1231,
1233,1,0,0,0,1232,1220,1,0,0,0,1233,1236,1,0,0,0,1234,1232,1,0,0,0,1234,
1235,1,0,0,0,1235,1238,1,0,0,0,1236,1234,1,0,0,0,1237,1163,1,0,0,0,1237,
1209,1,0,0,0,1238,71,1,0,0,0,1239,1245,5,137,0,0,1240,1241,5,137,0,0,1241,
1245,5,29,0,0,1242,1245,5,90,0,0,1243,1245,5,68,0,0,1244,1239,1,0,0,0,1244,
1240,1,0,0,0,1244,1242,1,0,0,0,1244,1243,1,0,0,0,1245,73,1,0,0,0,1246,1258,
3,96,48,0,1247,1248,5,3,0,0,1248,1253,3,102,51,0,1249,1250,5,5,0,0,1250,
1252,3,102,51,0,1251,1249,1,0,0,0,1252,1255,1,0,0,0,1253,1251,1,0,0,0,1253,
1254,1,0,0,0,1254,1256,1,0,0,0,1255,1253,1,0,0,0,1256,1257,5,4,0,0,1257,
1259,1,0,0,0,1258,1247,1,0,0,0,1258,1259,1,0,0,0,1259,75,1,0,0,0,1260,1262,
7,6,0,0,1261,1260,1,0,0,0,1261,1262,1,0,0,0,1262,1263,1,0,0,0,1263,1264,
5,150,0,0,1264,77,1,0,0,0,1265,1266,7,12,0,0,1266,79,1,0,0,0,1267,1268,7,
13,0,0,1268,81,1,0,0,0,1269,1270,5,152,0,0,1270,83,1,0,0,0,1271,1274,3,40,
20,0,1272,1274,3,32,16,0,1273,1271,1,0,0,0,1273,1272,1,0,0,0,1274,85,1,0,
0,0,1275,1276,7,14,0,0,1276,87,1,0,0,0,1277,1278,7,15,0,0,1278,89,1,0,0,
0,1279,1280,3,124,62,0,1280,91,1,0,0,0,1281,1282,3,124,62,0,1282,93,1,0,
0,0,1283,1284,3,124,62,0,1284,95,1,0,0,0,1285,1286,3,124,62,0,1286,97,1,
0,0,0,1287,1288,3,124,62,0,1288,99,1,0,0,0,1289,1290,3,124,62,0,1290,101,
1,0,0,0,1291,1292,3,124,62,0,1292,103,1,0,0,0,1293,1294,3,124,62,0,1294,
105,1,0,0,0,1295,1296,3,124,62,0,1296,107,1,0,0,0,1297,1298,3,124,62,0,1298,
109,1,0,0,0,1299,1300,3,124,62,0,1300,111,1,0,0,0,1301,1302,3,124,62,0,1302,
113,1,0,0,0,1303,1304,3,124,62,0,1304,115,1,0,0,0,1305,1306,3,124,62,0,1306,
117,1,0,0,0,1307,1308,3,124,62,0,1308,119,1,0,0,0,1309,1310,3,124,62,0,1310,
121,1,0,0,0,1311,1312,3,124,62,0,1312,123,1,0,0,0,1313,1321,5,149,0,0,1314,
1321,3,88,44,0,1315,1321,5,152,0,0,1316,1317,5,3,0,0,1317,1318,3,124,62,
0,1318,1319,5,4,0,0,1319,1321,1,0,0,0,1320,1313,1,0,0,0,1320,1314,1,0,0,
0,1320,1315,1,0,0,0,1320,1316,1,0,0,0,1321,125,1,0,0,0,180,128,130,141,148,
153,159,173,177,183,188,199,205,209,215,220,229,236,242,246,249,256,259,
266,275,278,284,286,292,297,305,310,315,334,340,349,354,363,374,381,387,
391,398,401,411,414,420,422,426,433,436,444,454,457,463,465,469,476,485,
489,491,495,504,509,511,520,531,538,541,544,557,571,576,579,592,606,611,
620,623,629,631,635,640,646,658,662,667,671,674,692,697,702,710,715,724,
731,735,751,754,762,771,775,780,810,822,827,839,845,852,856,866,869,875,
878,880,882,893,898,910,914,918,922,929,931,939,946,949,953,958,966,985,
991,995,1011,1017,1025,1030,1033,1038,1047,1052,1066,1069,1071,1076,1080,
1083,1090,1098,1102,1106,1109,1115,1118,1120,1129,1134,1138,1142,1145,1156,
1161,1165,1172,1181,1185,1187,1191,1200,1205,1207,1216,1227,1234,1237,1244,
1253,1258,1261,1273,1320];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class SQLtinyParser extends antlr4.Parser {

    static grammarFileName = "SQLtiny.g4";
    static literalNames = [ null, "';'", "'.'", "'('", "')'", "','", "'='", 
                            "'*'", "'+'", "'-'", "'~'", "'||'", "'/'", "'%'", 
                            "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", 
                            "'>'", "'>='", "'=='", "'!='", "'<>'" ];
    static symbolicNames = [ null, "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", 
                             "COMMA", "ASSIGN", "STAR", "PLUS", "MINUS", 
                             "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", 
                             "AMP", "PIPE", "LT", "LT_EQ", "GT", "GT_EQ", 
                             "EQ", "NOT_EQ1", "NOT_EQ2", "K_ABORT", "K_ACTION", 
                             "K_ADD", "K_AFTER", "K_ALL", "K_ALTER", "K_ANALYZE", 
                             "K_AND", "K_AS", "K_ASC", "K_ATTACH", "K_AUTOINCREMENT", 
                             "K_BEFORE", "K_BEGIN", "K_BETWEEN", "K_BY", 
                             "K_CASCADE", "K_CASE", "K_CAST", "K_CHECK", 
                             "K_COLLATE", "K_COLUMN", "K_COMMIT", "K_CONFLICT", 
                             "K_CONSTRAINT", "K_CREATE", "K_CROSS", "K_CURRENT_DATE", 
                             "K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_DATABASE", 
                             "K_DEFAULT", "K_DEFERRABLE", "K_DEFERRED", 
                             "K_DELETE", "K_DESC", "K_DETACH", "K_DISTINCT", 
                             "K_DROP", "K_EACH", "K_ELSE", "K_END", "K_ESCAPE", 
                             "K_EXCEPT", "K_EXCLUSIVE", "K_EXISTS", "K_EXPLAIN", 
                             "K_FAIL", "K_FOR", "K_FOREIGN", "K_FROM", "K_FULL", 
                             "K_GLOB", "K_GROUP", "K_HAVING", "K_IF", "K_IGNORE", 
                             "K_IMMEDIATE", "K_IN", "K_INDEX", "K_INDEXED", 
                             "K_INITIALLY", "K_INNER", "K_INSERT", "K_INSTEAD", 
                             "K_INTERSECT", "K_INTO", "K_IS", "K_ISNULL", 
                             "K_JOIN", "K_KEY", "K_LEFT", "K_LIKE", "K_LIMIT", 
                             "K_MATCH", "K_NATURAL", "K_NO", "K_NOT", "K_NOTNULL", 
                             "K_NULL", "K_OF", "K_OFFSET", "K_ON", "K_OR", 
                             "K_ORDER", "K_OUTER", "K_PLAN", "K_PRAGMA", 
                             "K_PRIMARY", "K_QUERY", "K_RAISE", "K_RECURSIVE", 
                             "K_REFERENCES", "K_REGEXP", "K_REINDEX", "K_RELEASE", 
                             "K_RENAME", "K_REPLACE", "K_RESTRICT", "K_RIGHT", 
                             "K_ROLLBACK", "K_ROW", "K_SAVEPOINT", "K_SELECT", 
                             "K_SET", "K_TABLE", "K_TEMP", "K_TEMPORARY", 
                             "K_THEN", "K_TO", "K_TRANSACTION", "K_TRIGGER", 
                             "K_UNION", "K_UNIQUE", "K_UPDATE", "K_USING", 
                             "K_VACUUM", "K_VALUES", "K_VIEW", "K_VIRTUAL", 
                             "K_WHEN", "K_WHERE", "K_WITH", "K_WITHOUT", 
                             "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", 
                             "STRING_LITERAL", "BLOB_LITERAL", "SINGLE_LINE_COMMENT", 
                             "MULTILINE_COMMENT", "SPACES", "UNEXPECTED_CHAR" ];
    static ruleNames = [ "parse", "error", "sql_stmt_list", "sql_stmt", 
                         "create_index_stmt", "create_table_stmt", "delete_stmt", 
                         "delete_stmt_limited", "drop_index_stmt", "drop_table_stmt", 
                         "insert_stmt", "simple_select_stmt", "select_stmt", 
                         "select_or_values", "update_stmt", "update_stmt_limited", 
                         "column_def", "type_name", "column_constraint", 
                         "conflict_clause", "expr", "foreign_key_clause", 
                         "raise_function", "indexed_column", "table_constraint", 
                         "with_clause", "qualified_table_name", "ordering_term", 
                         "pragma_value", "common_table_expression", "result_column", 
                         "table_or_subquery", "join_clause", "join_operator", 
                         "join_constraint", "select_core", "compound_operator", 
                         "cte_table_name", "signed_number", "literal_value", 
                         "unary_operator", "error_message", "module_argument", 
                         "column_alias", "keyword", "name", "function_name", 
                         "database_name", "table_name", "table_or_index_name", 
                         "new_table_name", "column_name", "collation_name", 
                         "foreign_table", "index_name", "trigger_name", 
                         "view_name", "module_name", "pragma_name", "savepoint_name", 
                         "table_alias", "transaction_name", "any_name" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = SQLtinyParser.ruleNames;
        this.literalNames = SQLtinyParser.literalNames;
        this.symbolicNames = SQLtinyParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 20:
    	    		return this.expr_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 20);
    		case 1:
    			return this.precpred(this._ctx, 19);
    		case 2:
    			return this.precpred(this._ctx, 18);
    		case 3:
    			return this.precpred(this._ctx, 17);
    		case 4:
    			return this.precpred(this._ctx, 16);
    		case 5:
    			return this.precpred(this._ctx, 15);
    		case 6:
    			return this.precpred(this._ctx, 14);
    		case 7:
    			return this.precpred(this._ctx, 13);
    		case 8:
    			return this.precpred(this._ctx, 6);
    		case 9:
    			return this.precpred(this._ctx, 5);
    		case 10:
    			return this.precpred(this._ctx, 9);
    		case 11:
    			return this.precpred(this._ctx, 8);
    		case 12:
    			return this.precpred(this._ctx, 7);
    		case 13:
    			return this.precpred(this._ctx, 4);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	parse() {
	    let localctx = new ParseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, SQLtinyParser.RULE_parse);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 130;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1 || ((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 8705) !== 0) || _la===88 || ((((_la - 122)) & ~0x1f) === 0 && ((1 << (_la - 122)) & 34734145) !== 0) || _la===157) {
	            this.state = 128;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1:
	            case 50:
	            case 59:
	            case 63:
	            case 88:
	            case 122:
	            case 128:
	            case 139:
	            case 142:
	            case 147:
	                this.state = 126;
	                this.sql_stmt_list();
	                break;
	            case 157:
	                this.state = 127;
	                this.error();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 132;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 133;
	        this.match(SQLtinyParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	error() {
	    let localctx = new ErrorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, SQLtinyParser.RULE_error);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 135;
	        localctx._UNEXPECTED_CHAR = this.match(SQLtinyParser.UNEXPECTED_CHAR);
	         
	             throw new RuntimeException("UNEXPECTED_CHAR=" + (localctx._UNEXPECTED_CHAR == null ? null : localctx._UNEXPECTED_CHAR.text)); 
	           
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sql_stmt_list() {
	    let localctx = new Sql_stmt_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, SQLtinyParser.RULE_sql_stmt_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 141;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1) {
	            this.state = 138;
	            this.match(SQLtinyParser.SCOL);
	            this.state = 143;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 144;
	        this.sql_stmt();
	        this.state = 153;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 146; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 145;
	                    this.match(SQLtinyParser.SCOL);
	                    this.state = 148; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===1);
	                this.state = 150;
	                this.sql_stmt(); 
	            }
	            this.state = 155;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
	        }

	        this.state = 159;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 156;
	                this.match(SQLtinyParser.SCOL); 
	            }
	            this.state = 161;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sql_stmt() {
	    let localctx = new Sql_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, SQLtinyParser.RULE_sql_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 173;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 162;
	            this.create_index_stmt();
	            break;

	        case 2:
	            this.state = 163;
	            this.create_table_stmt();
	            break;

	        case 3:
	            this.state = 164;
	            this.delete_stmt();
	            break;

	        case 4:
	            this.state = 165;
	            this.delete_stmt_limited();
	            break;

	        case 5:
	            this.state = 166;
	            this.drop_index_stmt();
	            break;

	        case 6:
	            this.state = 167;
	            this.drop_table_stmt();
	            break;

	        case 7:
	            this.state = 168;
	            this.insert_stmt();
	            break;

	        case 8:
	            this.state = 169;
	            this.simple_select_stmt();
	            break;

	        case 9:
	            this.state = 170;
	            this.select_stmt();
	            break;

	        case 10:
	            this.state = 171;
	            this.update_stmt();
	            break;

	        case 11:
	            this.state = 172;
	            this.update_stmt_limited();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_index_stmt() {
	    let localctx = new Create_index_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, SQLtinyParser.RULE_create_index_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 175;
	        this.match(SQLtinyParser.K_CREATE);
	        this.state = 177;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===138) {
	            this.state = 176;
	            this.match(SQLtinyParser.K_UNIQUE);
	        }

	        this.state = 179;
	        this.match(SQLtinyParser.K_INDEX);
	        this.state = 183;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        if(la_===1) {
	            this.state = 180;
	            this.match(SQLtinyParser.K_IF);
	            this.state = 181;
	            this.match(SQLtinyParser.K_NOT);
	            this.state = 182;
	            this.match(SQLtinyParser.K_EXISTS);

	        }
	        this.state = 188;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        if(la_===1) {
	            this.state = 185;
	            this.database_name();
	            this.state = 186;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 190;
	        this.index_name();
	        this.state = 191;
	        this.match(SQLtinyParser.K_ON);
	        this.state = 192;
	        this.table_name();
	        this.state = 193;
	        this.match(SQLtinyParser.OPEN_PAR);
	        this.state = 194;
	        this.indexed_column();
	        this.state = 199;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 195;
	            this.match(SQLtinyParser.COMMA);
	            this.state = 196;
	            this.indexed_column();
	            this.state = 201;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 202;
	        this.match(SQLtinyParser.CLOSE_PAR);
	        this.state = 205;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 203;
	            this.match(SQLtinyParser.K_WHERE);
	            this.state = 204;
	            this.expr(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_table_stmt() {
	    let localctx = new Create_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, SQLtinyParser.RULE_create_table_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 207;
	        this.match(SQLtinyParser.K_CREATE);
	        this.state = 209;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131 || _la===132) {
	            this.state = 208;
	            _la = this._input.LA(1);
	            if(!(_la===131 || _la===132)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 211;
	        this.match(SQLtinyParser.K_TABLE);
	        this.state = 215;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        if(la_===1) {
	            this.state = 212;
	            this.match(SQLtinyParser.K_IF);
	            this.state = 213;
	            this.match(SQLtinyParser.K_NOT);
	            this.state = 214;
	            this.match(SQLtinyParser.K_EXISTS);

	        }
	        this.state = 220;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        if(la_===1) {
	            this.state = 217;
	            this.database_name();
	            this.state = 218;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 222;
	        this.table_name();
	        this.state = 246;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	            this.state = 223;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 224;
	            this.column_def();
	            this.state = 229;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 225;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 226;
	                    this.column_def(); 
	                }
	                this.state = 231;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
	            }

	            this.state = 236;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 232;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 233;
	                this.table_constraint();
	                this.state = 238;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 239;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 242;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===148) {
	                this.state = 240;
	                this.match(SQLtinyParser.K_WITHOUT);
	                this.state = 241;
	                this.match(SQLtinyParser.IDENTIFIER);
	            }

	            break;
	        case 33:
	            this.state = 244;
	            this.match(SQLtinyParser.K_AS);
	            this.state = 245;
	            this.select_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delete_stmt() {
	    let localctx = new Delete_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, SQLtinyParser.RULE_delete_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 249;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 248;
	            this.with_clause();
	        }

	        this.state = 251;
	        this.match(SQLtinyParser.K_DELETE);
	        this.state = 252;
	        this.match(SQLtinyParser.K_FROM);
	        this.state = 253;
	        this.qualified_table_name();
	        this.state = 256;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 254;
	            this.match(SQLtinyParser.K_WHERE);
	            this.state = 255;
	            this.expr(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delete_stmt_limited() {
	    let localctx = new Delete_stmt_limitedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, SQLtinyParser.RULE_delete_stmt_limited);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 259;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 258;
	            this.with_clause();
	        }

	        this.state = 261;
	        this.match(SQLtinyParser.K_DELETE);
	        this.state = 262;
	        this.match(SQLtinyParser.K_FROM);
	        this.state = 263;
	        this.qualified_table_name();
	        this.state = 266;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 264;
	            this.match(SQLtinyParser.K_WHERE);
	            this.state = 265;
	            this.expr(0);
	        }

	        this.state = 286;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98 || _la===109) {
	            this.state = 278;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===109) {
	                this.state = 268;
	                this.match(SQLtinyParser.K_ORDER);
	                this.state = 269;
	                this.match(SQLtinyParser.K_BY);
	                this.state = 270;
	                this.ordering_term();
	                this.state = 275;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 271;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 272;
	                    this.ordering_term();
	                    this.state = 277;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 280;
	            this.match(SQLtinyParser.K_LIMIT);
	            this.state = 281;
	            this.expr(0);
	            this.state = 284;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5 || _la===106) {
	                this.state = 282;
	                _la = this._input.LA(1);
	                if(!(_la===5 || _la===106)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 283;
	                this.expr(0);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_index_stmt() {
	    let localctx = new Drop_index_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, SQLtinyParser.RULE_drop_index_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 288;
	        this.match(SQLtinyParser.K_DROP);
	        this.state = 289;
	        this.match(SQLtinyParser.K_INDEX);
	        this.state = 292;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	        if(la_===1) {
	            this.state = 290;
	            this.match(SQLtinyParser.K_IF);
	            this.state = 291;
	            this.match(SQLtinyParser.K_EXISTS);

	        }
	        this.state = 297;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        if(la_===1) {
	            this.state = 294;
	            this.database_name();
	            this.state = 295;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 299;
	        this.index_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_table_stmt() {
	    let localctx = new Drop_table_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, SQLtinyParser.RULE_drop_table_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 301;
	        this.match(SQLtinyParser.K_DROP);
	        this.state = 302;
	        this.match(SQLtinyParser.K_TABLE);
	        this.state = 305;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        if(la_===1) {
	            this.state = 303;
	            this.match(SQLtinyParser.K_IF);
	            this.state = 304;
	            this.match(SQLtinyParser.K_EXISTS);

	        }
	        this.state = 310;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        if(la_===1) {
	            this.state = 307;
	            this.database_name();
	            this.state = 308;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 312;
	        this.table_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insert_stmt() {
	    let localctx = new Insert_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, SQLtinyParser.RULE_insert_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 315;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 314;
	            this.with_clause();
	        }

	        this.state = 334;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 317;
	            this.match(SQLtinyParser.K_INSERT);
	            break;

	        case 2:
	            this.state = 318;
	            this.match(SQLtinyParser.K_REPLACE);
	            break;

	        case 3:
	            this.state = 319;
	            this.match(SQLtinyParser.K_INSERT);
	            this.state = 320;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 321;
	            this.match(SQLtinyParser.K_REPLACE);
	            break;

	        case 4:
	            this.state = 322;
	            this.match(SQLtinyParser.K_INSERT);
	            this.state = 323;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 324;
	            this.match(SQLtinyParser.K_ROLLBACK);
	            break;

	        case 5:
	            this.state = 325;
	            this.match(SQLtinyParser.K_INSERT);
	            this.state = 326;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 327;
	            this.match(SQLtinyParser.K_ABORT);
	            break;

	        case 6:
	            this.state = 328;
	            this.match(SQLtinyParser.K_INSERT);
	            this.state = 329;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 330;
	            this.match(SQLtinyParser.K_FAIL);
	            break;

	        case 7:
	            this.state = 331;
	            this.match(SQLtinyParser.K_INSERT);
	            this.state = 332;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 333;
	            this.match(SQLtinyParser.K_IGNORE);
	            break;

	        }
	        this.state = 336;
	        this.match(SQLtinyParser.K_INTO);
	        this.state = 340;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        if(la_===1) {
	            this.state = 337;
	            this.database_name();
	            this.state = 338;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 342;
	        this.table_name();
	        this.state = 354;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 343;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 344;
	            this.column_name();
	            this.state = 349;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 345;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 346;
	                this.column_name();
	                this.state = 351;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 352;
	            this.match(SQLtinyParser.CLOSE_PAR);
	        }

	        this.state = 387;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 356;
	            this.match(SQLtinyParser.K_VALUES);
	            this.state = 357;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 358;
	            this.expr(0);
	            this.state = 363;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 359;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 360;
	                this.expr(0);
	                this.state = 365;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 366;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 381;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 367;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 368;
	                this.match(SQLtinyParser.OPEN_PAR);
	                this.state = 369;
	                this.expr(0);
	                this.state = 374;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 370;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 371;
	                    this.expr(0);
	                    this.state = 376;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 377;
	                this.match(SQLtinyParser.CLOSE_PAR);
	                this.state = 383;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.state = 384;
	            this.select_stmt();
	            break;

	        case 3:
	            this.state = 385;
	            this.match(SQLtinyParser.K_DEFAULT);
	            this.state = 386;
	            this.match(SQLtinyParser.K_VALUES);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_select_stmt() {
	    let localctx = new Simple_select_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, SQLtinyParser.RULE_simple_select_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 401;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 389;
	            this.match(SQLtinyParser.K_WITH);
	            this.state = 391;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	            if(la_===1) {
	                this.state = 390;
	                this.match(SQLtinyParser.K_RECURSIVE);

	            }
	            this.state = 393;
	            this.common_table_expression();
	            this.state = 398;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 394;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 395;
	                this.common_table_expression();
	                this.state = 400;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 403;
	        this.select_core();
	        this.state = 414;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===109) {
	            this.state = 404;
	            this.match(SQLtinyParser.K_ORDER);
	            this.state = 405;
	            this.match(SQLtinyParser.K_BY);
	            this.state = 406;
	            this.ordering_term();
	            this.state = 411;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 407;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 408;
	                this.ordering_term();
	                this.state = 413;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 422;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98) {
	            this.state = 416;
	            this.match(SQLtinyParser.K_LIMIT);
	            this.state = 417;
	            this.expr(0);
	            this.state = 420;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5 || _la===106) {
	                this.state = 418;
	                _la = this._input.LA(1);
	                if(!(_la===5 || _la===106)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 419;
	                this.expr(0);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_stmt() {
	    let localctx = new Select_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, SQLtinyParser.RULE_select_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 436;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 424;
	            this.match(SQLtinyParser.K_WITH);
	            this.state = 426;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	            if(la_===1) {
	                this.state = 425;
	                this.match(SQLtinyParser.K_RECURSIVE);

	            }
	            this.state = 428;
	            this.common_table_expression();
	            this.state = 433;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 429;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 430;
	                this.common_table_expression();
	                this.state = 435;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 438;
	        this.select_or_values();
	        this.state = 444;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===68 || _la===90 || _la===137) {
	            this.state = 439;
	            this.compound_operator();
	            this.state = 440;
	            this.select_or_values();
	            this.state = 446;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 457;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===109) {
	            this.state = 447;
	            this.match(SQLtinyParser.K_ORDER);
	            this.state = 448;
	            this.match(SQLtinyParser.K_BY);
	            this.state = 449;
	            this.ordering_term();
	            this.state = 454;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 450;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 451;
	                this.ordering_term();
	                this.state = 456;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 465;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98) {
	            this.state = 459;
	            this.match(SQLtinyParser.K_LIMIT);
	            this.state = 460;
	            this.expr(0);
	            this.state = 463;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5 || _la===106) {
	                this.state = 461;
	                _la = this._input.LA(1);
	                if(!(_la===5 || _la===106)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 462;
	                this.expr(0);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_or_values() {
	    let localctx = new Select_or_valuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, SQLtinyParser.RULE_select_or_values);
	    var _la = 0;
	    try {
	        this.state = 541;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 128:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 467;
	            this.match(SQLtinyParser.K_SELECT);
	            this.state = 469;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	            if(la_===1) {
	                this.state = 468;
	                _la = this._input.LA(1);
	                if(!(_la===29 || _la===62)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 471;
	            this.result_column();
	            this.state = 476;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 472;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 473;
	                this.result_column();
	                this.state = 478;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 491;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===75) {
	                this.state = 479;
	                this.match(SQLtinyParser.K_FROM);
	                this.state = 489;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 480;
	                    this.table_or_subquery();
	                    this.state = 485;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===5) {
	                        this.state = 481;
	                        this.match(SQLtinyParser.COMMA);
	                        this.state = 482;
	                        this.table_or_subquery();
	                        this.state = 487;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    break;

	                case 2:
	                    this.state = 488;
	                    this.join_clause();
	                    break;

	                }
	            }

	            this.state = 495;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===146) {
	                this.state = 493;
	                this.match(SQLtinyParser.K_WHERE);
	                this.state = 494;
	                this.expr(0);
	            }

	            this.state = 511;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===78) {
	                this.state = 497;
	                this.match(SQLtinyParser.K_GROUP);
	                this.state = 498;
	                this.match(SQLtinyParser.K_BY);
	                this.state = 499;
	                this.expr(0);
	                this.state = 504;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 500;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 501;
	                    this.expr(0);
	                    this.state = 506;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 509;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===79) {
	                    this.state = 507;
	                    this.match(SQLtinyParser.K_HAVING);
	                    this.state = 508;
	                    this.expr(0);
	                }

	            }

	            break;
	        case 142:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 513;
	            this.match(SQLtinyParser.K_VALUES);
	            this.state = 514;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 515;
	            this.expr(0);
	            this.state = 520;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 516;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 517;
	                this.expr(0);
	                this.state = 522;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 523;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 538;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 524;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 525;
	                this.match(SQLtinyParser.OPEN_PAR);
	                this.state = 526;
	                this.expr(0);
	                this.state = 531;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 527;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 528;
	                    this.expr(0);
	                    this.state = 533;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 534;
	                this.match(SQLtinyParser.CLOSE_PAR);
	                this.state = 540;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update_stmt() {
	    let localctx = new Update_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, SQLtinyParser.RULE_update_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 544;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 543;
	            this.with_clause();
	        }

	        this.state = 546;
	        this.match(SQLtinyParser.K_UPDATE);
	        this.state = 557;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        if(la_===1) {
	            this.state = 547;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 548;
	            this.match(SQLtinyParser.K_ROLLBACK);

	        } else if(la_===2) {
	            this.state = 549;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 550;
	            this.match(SQLtinyParser.K_ABORT);

	        } else if(la_===3) {
	            this.state = 551;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 552;
	            this.match(SQLtinyParser.K_REPLACE);

	        } else if(la_===4) {
	            this.state = 553;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 554;
	            this.match(SQLtinyParser.K_FAIL);

	        } else if(la_===5) {
	            this.state = 555;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 556;
	            this.match(SQLtinyParser.K_IGNORE);

	        }
	        this.state = 559;
	        this.qualified_table_name();
	        this.state = 560;
	        this.match(SQLtinyParser.K_SET);
	        this.state = 561;
	        this.column_name();
	        this.state = 562;
	        this.match(SQLtinyParser.ASSIGN);
	        this.state = 563;
	        this.expr(0);
	        this.state = 571;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 564;
	            this.match(SQLtinyParser.COMMA);
	            this.state = 565;
	            this.column_name();
	            this.state = 566;
	            this.match(SQLtinyParser.ASSIGN);
	            this.state = 567;
	            this.expr(0);
	            this.state = 573;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 576;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 574;
	            this.match(SQLtinyParser.K_WHERE);
	            this.state = 575;
	            this.expr(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update_stmt_limited() {
	    let localctx = new Update_stmt_limitedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, SQLtinyParser.RULE_update_stmt_limited);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 579;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 578;
	            this.with_clause();
	        }

	        this.state = 581;
	        this.match(SQLtinyParser.K_UPDATE);
	        this.state = 592;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        if(la_===1) {
	            this.state = 582;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 583;
	            this.match(SQLtinyParser.K_ROLLBACK);

	        } else if(la_===2) {
	            this.state = 584;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 585;
	            this.match(SQLtinyParser.K_ABORT);

	        } else if(la_===3) {
	            this.state = 586;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 587;
	            this.match(SQLtinyParser.K_REPLACE);

	        } else if(la_===4) {
	            this.state = 588;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 589;
	            this.match(SQLtinyParser.K_FAIL);

	        } else if(la_===5) {
	            this.state = 590;
	            this.match(SQLtinyParser.K_OR);
	            this.state = 591;
	            this.match(SQLtinyParser.K_IGNORE);

	        }
	        this.state = 594;
	        this.qualified_table_name();
	        this.state = 595;
	        this.match(SQLtinyParser.K_SET);
	        this.state = 596;
	        this.column_name();
	        this.state = 597;
	        this.match(SQLtinyParser.ASSIGN);
	        this.state = 598;
	        this.expr(0);
	        this.state = 606;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 599;
	            this.match(SQLtinyParser.COMMA);
	            this.state = 600;
	            this.column_name();
	            this.state = 601;
	            this.match(SQLtinyParser.ASSIGN);
	            this.state = 602;
	            this.expr(0);
	            this.state = 608;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 611;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===146) {
	            this.state = 609;
	            this.match(SQLtinyParser.K_WHERE);
	            this.state = 610;
	            this.expr(0);
	        }

	        this.state = 631;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98 || _la===109) {
	            this.state = 623;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===109) {
	                this.state = 613;
	                this.match(SQLtinyParser.K_ORDER);
	                this.state = 614;
	                this.match(SQLtinyParser.K_BY);
	                this.state = 615;
	                this.ordering_term();
	                this.state = 620;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 616;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 617;
	                    this.ordering_term();
	                    this.state = 622;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 625;
	            this.match(SQLtinyParser.K_LIMIT);
	            this.state = 626;
	            this.expr(0);
	            this.state = 629;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5 || _la===106) {
	                this.state = 627;
	                _la = this._input.LA(1);
	                if(!(_la===5 || _la===106)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 628;
	                this.expr(0);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_def() {
	    let localctx = new Column_defContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, SQLtinyParser.RULE_column_def);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 633;
	        this.column_name();
	        this.state = 635;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	        if(la_===1) {
	            this.state = 634;
	            this.type_name();

	        }
	        this.state = 640;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 4131) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 34821) !== 0) || _la===138) {
	            this.state = 637;
	            this.column_constraint();
	            this.state = 642;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name() {
	    let localctx = new Type_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, SQLtinyParser.RULE_type_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 644; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 643;
	        		this.name();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 646; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,82, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 658;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	        if(la_===1) {
	            this.state = 648;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 649;
	            this.signed_number();
	            this.state = 650;
	            this.match(SQLtinyParser.CLOSE_PAR);

	        } else if(la_===2) {
	            this.state = 652;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 653;
	            this.signed_number();
	            this.state = 654;
	            this.match(SQLtinyParser.COMMA);
	            this.state = 655;
	            this.signed_number();
	            this.state = 656;
	            this.match(SQLtinyParser.CLOSE_PAR);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_constraint() {
	    let localctx = new Column_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, SQLtinyParser.RULE_column_constraint);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 662;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 660;
	            this.match(SQLtinyParser.K_CONSTRAINT);
	            this.state = 661;
	            this.name();
	        }

	        this.state = 697;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 113:
	            this.state = 664;
	            this.match(SQLtinyParser.K_PRIMARY);
	            this.state = 665;
	            this.match(SQLtinyParser.K_KEY);
	            this.state = 667;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===34 || _la===60) {
	                this.state = 666;
	                _la = this._input.LA(1);
	                if(!(_la===34 || _la===60)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 669;
	            this.conflict_clause();
	            this.state = 671;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===36) {
	                this.state = 670;
	                this.match(SQLtinyParser.K_AUTOINCREMENT);
	            }

	            break;
	        case 102:
	        case 104:
	            this.state = 674;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===102) {
	                this.state = 673;
	                this.match(SQLtinyParser.K_NOT);
	            }

	            this.state = 676;
	            this.match(SQLtinyParser.K_NULL);
	            this.state = 677;
	            this.conflict_clause();
	            break;
	        case 138:
	            this.state = 678;
	            this.match(SQLtinyParser.K_UNIQUE);
	            this.state = 679;
	            this.conflict_clause();
	            break;
	        case 44:
	            this.state = 680;
	            this.match(SQLtinyParser.K_CHECK);
	            this.state = 681;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 682;
	            this.expr(0);
	            this.state = 683;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            break;
	        case 56:
	            this.state = 685;
	            this.match(SQLtinyParser.K_DEFAULT);
	            this.state = 692;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 686;
	                this.signed_number();
	                break;

	            case 2:
	                this.state = 687;
	                this.literal_value();
	                break;

	            case 3:
	                this.state = 688;
	                this.match(SQLtinyParser.OPEN_PAR);
	                this.state = 689;
	                this.expr(0);
	                this.state = 690;
	                this.match(SQLtinyParser.CLOSE_PAR);
	                break;

	            }
	            break;
	        case 45:
	            this.state = 694;
	            this.match(SQLtinyParser.K_COLLATE);
	            this.state = 695;
	            this.collation_name();
	            break;
	        case 117:
	            this.state = 696;
	            this.foreign_key_clause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conflict_clause() {
	    let localctx = new Conflict_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, SQLtinyParser.RULE_conflict_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 702;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===107) {
	            this.state = 699;
	            this.match(SQLtinyParser.K_ON);
	            this.state = 700;
	            this.match(SQLtinyParser.K_CONFLICT);
	            this.state = 701;
	            _la = this._input.LA(1);
	            if(!(_la===25 || _la===72 || _la===81 || _la===122 || _la===125)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 40;
	    this.enterRecursionRule(localctx, 40, SQLtinyParser.RULE_expr, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 780;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 705;
	            this.literal_value();
	            break;

	        case 2:
	            this.state = 706;
	            this.match(SQLtinyParser.BIND_PARAMETER);
	            break;

	        case 3:
	            this.state = 715;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	            if(la_===1) {
	                this.state = 710;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	                if(la_===1) {
	                    this.state = 707;
	                    this.database_name();
	                    this.state = 708;
	                    this.match(SQLtinyParser.DOT);

	                }
	                this.state = 712;
	                this.table_name();
	                this.state = 713;
	                this.match(SQLtinyParser.DOT);

	            }
	            this.state = 717;
	            this.column_name();
	            break;

	        case 4:
	            this.state = 718;
	            this.unary_operator();
	            this.state = 719;
	            this.expr(21);
	            break;

	        case 5:
	            this.state = 721;
	            this.function_name();
	            this.state = 722;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 735;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 3:
	            case 8:
	            case 9:
	            case 10:
	            case 25:
	            case 26:
	            case 27:
	            case 28:
	            case 29:
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 34:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 39:
	            case 40:
	            case 41:
	            case 42:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 47:
	            case 48:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 58:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 128:
	            case 129:
	            case 130:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 143:
	            case 144:
	            case 145:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 152:
	            case 153:
	            	this.state = 724;
	            	this._errHandler.sync(this);
	            	var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	            	if(la_===1) {
	            	    this.state = 723;
	            	    this.match(SQLtinyParser.K_DISTINCT);

	            	}
	            	this.state = 726;
	            	this.expr(0);
	            	this.state = 731;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	while(_la===5) {
	            	    this.state = 727;
	            	    this.match(SQLtinyParser.COMMA);
	            	    this.state = 728;
	            	    this.expr(0);
	            	    this.state = 733;
	            	    this._errHandler.sync(this);
	            	    _la = this._input.LA(1);
	            	}
	            	break;
	            case 7:
	            	this.state = 734;
	            	this.match(SQLtinyParser.STAR);
	            	break;
	            case 4:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 737;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            break;

	        case 6:
	            this.state = 739;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 740;
	            this.expr(0);
	            this.state = 741;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            break;

	        case 7:
	            this.state = 743;
	            this.match(SQLtinyParser.K_CAST);
	            this.state = 744;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 745;
	            this.expr(0);
	            this.state = 746;
	            this.match(SQLtinyParser.K_AS);
	            this.state = 747;
	            this.type_name();
	            this.state = 748;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            break;

	        case 8:
	            this.state = 754;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===70 || _la===102) {
	                this.state = 751;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===102) {
	                    this.state = 750;
	                    this.match(SQLtinyParser.K_NOT);
	                }

	                this.state = 753;
	                this.match(SQLtinyParser.K_EXISTS);
	            }

	            this.state = 756;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 757;
	            this.select_stmt();
	            this.state = 758;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            break;

	        case 9:
	            this.state = 760;
	            this.match(SQLtinyParser.K_CASE);
	            this.state = 762;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	            if(la_===1) {
	                this.state = 761;
	                this.expr(0);

	            }
	            this.state = 769; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 764;
	                this.match(SQLtinyParser.K_WHEN);
	                this.state = 765;
	                this.expr(0);
	                this.state = 766;
	                this.match(SQLtinyParser.K_THEN);
	                this.state = 767;
	                this.expr(0);
	                this.state = 771; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===145);
	            this.state = 775;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===65) {
	                this.state = 773;
	                this.match(SQLtinyParser.K_ELSE);
	                this.state = 774;
	                this.expr(0);
	            }

	            this.state = 777;
	            this.match(SQLtinyParser.K_END);
	            break;

	        case 10:
	            this.state = 779;
	            this.raise_function();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 882;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,114,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 880;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 782;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 783;
	                    this.match(SQLtinyParser.PIPE2);
	                    this.state = 784;
	                    this.expr(21);
	                    break;

	                case 2:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 785;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 786;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 12416) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 787;
	                    this.expr(20);
	                    break;

	                case 3:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 788;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 789;
	                    _la = this._input.LA(1);
	                    if(!(_la===8 || _la===9)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 790;
	                    this.expr(19);
	                    break;

	                case 4:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 791;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 792;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 245760) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 793;
	                    this.expr(18);
	                    break;

	                case 5:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 794;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 795;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 3932160) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 796;
	                    this.expr(17);
	                    break;

	                case 6:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 797;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 810;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 798;
	                        this.match(SQLtinyParser.ASSIGN);
	                        break;

	                    case 2:
	                        this.state = 799;
	                        this.match(SQLtinyParser.EQ);
	                        break;

	                    case 3:
	                        this.state = 800;
	                        this.match(SQLtinyParser.NOT_EQ1);
	                        break;

	                    case 4:
	                        this.state = 801;
	                        this.match(SQLtinyParser.NOT_EQ2);
	                        break;

	                    case 5:
	                        this.state = 802;
	                        this.match(SQLtinyParser.K_IS);
	                        break;

	                    case 6:
	                        this.state = 803;
	                        this.match(SQLtinyParser.K_IS);
	                        this.state = 804;
	                        this.match(SQLtinyParser.K_NOT);
	                        break;

	                    case 7:
	                        this.state = 805;
	                        this.match(SQLtinyParser.K_IN);
	                        break;

	                    case 8:
	                        this.state = 806;
	                        this.match(SQLtinyParser.K_LIKE);
	                        break;

	                    case 9:
	                        this.state = 807;
	                        this.match(SQLtinyParser.K_GLOB);
	                        break;

	                    case 10:
	                        this.state = 808;
	                        this.match(SQLtinyParser.K_MATCH);
	                        break;

	                    case 11:
	                        this.state = 809;
	                        this.match(SQLtinyParser.K_REGEXP);
	                        break;

	                    }
	                    this.state = 812;
	                    this.expr(16);
	                    break;

	                case 7:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 813;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 814;
	                    this.match(SQLtinyParser.K_AND);
	                    this.state = 815;
	                    this.expr(15);
	                    break;

	                case 8:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 816;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 817;
	                    this.match(SQLtinyParser.K_OR);
	                    this.state = 818;
	                    this.expr(14);
	                    break;

	                case 9:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 819;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 820;
	                    this.match(SQLtinyParser.K_IS);
	                    this.state = 822;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	                    if(la_===1) {
	                        this.state = 821;
	                        this.match(SQLtinyParser.K_NOT);

	                    }
	                    this.state = 824;
	                    this.expr(7);
	                    break;

	                case 10:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 825;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 827;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===102) {
	                        this.state = 826;
	                        this.match(SQLtinyParser.K_NOT);
	                    }

	                    this.state = 829;
	                    this.match(SQLtinyParser.K_BETWEEN);
	                    this.state = 830;
	                    this.expr(0);
	                    this.state = 831;
	                    this.match(SQLtinyParser.K_AND);
	                    this.state = 832;
	                    this.expr(6);
	                    break;

	                case 11:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 834;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 835;
	                    this.match(SQLtinyParser.K_COLLATE);
	                    this.state = 836;
	                    this.collation_name();
	                    break;

	                case 12:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 837;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 839;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===102) {
	                        this.state = 838;
	                        this.match(SQLtinyParser.K_NOT);
	                    }

	                    this.state = 841;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 5242881) !== 0) || _la===118)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 842;
	                    this.expr(0);
	                    this.state = 845;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	                    if(la_===1) {
	                        this.state = 843;
	                        this.match(SQLtinyParser.K_ESCAPE);
	                        this.state = 844;
	                        this.expr(0);

	                    }
	                    break;

	                case 13:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 847;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 852;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case 93:
	                        this.state = 848;
	                        this.match(SQLtinyParser.K_ISNULL);
	                        break;
	                    case 103:
	                        this.state = 849;
	                        this.match(SQLtinyParser.K_NOTNULL);
	                        break;
	                    case 102:
	                        this.state = 850;
	                        this.match(SQLtinyParser.K_NOT);
	                        this.state = 851;
	                        this.match(SQLtinyParser.K_NULL);
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    }
	                    break;

	                case 14:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SQLtinyParser.RULE_expr);
	                    this.state = 854;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 856;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===102) {
	                        this.state = 855;
	                        this.match(SQLtinyParser.K_NOT);
	                    }

	                    this.state = 858;
	                    this.match(SQLtinyParser.K_IN);
	                    this.state = 878;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 859;
	                        this.match(SQLtinyParser.OPEN_PAR);
	                        this.state = 869;
	                        this._errHandler.sync(this);
	                        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
	                        if(la_===1) {
	                            this.state = 860;
	                            this.select_stmt();

	                        } else if(la_===2) {
	                            this.state = 861;
	                            this.expr(0);
	                            this.state = 866;
	                            this._errHandler.sync(this);
	                            _la = this._input.LA(1);
	                            while(_la===5) {
	                                this.state = 862;
	                                this.match(SQLtinyParser.COMMA);
	                                this.state = 863;
	                                this.expr(0);
	                                this.state = 868;
	                                this._errHandler.sync(this);
	                                _la = this._input.LA(1);
	                            }

	                        }
	                        this.state = 871;
	                        this.match(SQLtinyParser.CLOSE_PAR);
	                        break;

	                    case 2:
	                        this.state = 875;
	                        this._errHandler.sync(this);
	                        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	                        if(la_===1) {
	                            this.state = 872;
	                            this.database_name();
	                            this.state = 873;
	                            this.match(SQLtinyParser.DOT);

	                        }
	                        this.state = 877;
	                        this.table_name();
	                        break;

	                    }
	                    break;

	                } 
	            }
	            this.state = 884;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,114,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	foreign_key_clause() {
	    let localctx = new Foreign_key_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, SQLtinyParser.RULE_foreign_key_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 885;
	        this.match(SQLtinyParser.K_REFERENCES);
	        this.state = 886;
	        this.foreign_table();
	        this.state = 898;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 887;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 888;
	            this.column_name();
	            this.state = 893;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 889;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 890;
	                this.column_name();
	                this.state = 895;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 896;
	            this.match(SQLtinyParser.CLOSE_PAR);
	        }

	        this.state = 918;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===99 || _la===107) {
	            this.state = 914;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 107:
	                this.state = 900;
	                this.match(SQLtinyParser.K_ON);
	                this.state = 901;
	                _la = this._input.LA(1);
	                if(!(_la===59 || _la===139)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 910;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 902;
	                    this.match(SQLtinyParser.K_SET);
	                    this.state = 903;
	                    this.match(SQLtinyParser.K_NULL);
	                    break;

	                case 2:
	                    this.state = 904;
	                    this.match(SQLtinyParser.K_SET);
	                    this.state = 905;
	                    this.match(SQLtinyParser.K_DEFAULT);
	                    break;

	                case 3:
	                    this.state = 906;
	                    this.match(SQLtinyParser.K_CASCADE);
	                    break;

	                case 4:
	                    this.state = 907;
	                    this.match(SQLtinyParser.K_RESTRICT);
	                    break;

	                case 5:
	                    this.state = 908;
	                    this.match(SQLtinyParser.K_NO);
	                    this.state = 909;
	                    this.match(SQLtinyParser.K_ACTION);
	                    break;

	                }
	                break;
	            case 99:
	                this.state = 912;
	                this.match(SQLtinyParser.K_MATCH);
	                this.state = 913;
	                this.name();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 920;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 931;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	        if(la_===1) {
	            this.state = 922;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===102) {
	                this.state = 921;
	                this.match(SQLtinyParser.K_NOT);
	            }

	            this.state = 924;
	            this.match(SQLtinyParser.K_DEFERRABLE);
	            this.state = 929;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	            if(la_===1) {
	                this.state = 925;
	                this.match(SQLtinyParser.K_INITIALLY);
	                this.state = 926;
	                this.match(SQLtinyParser.K_DEFERRED);

	            } else if(la_===2) {
	                this.state = 927;
	                this.match(SQLtinyParser.K_INITIALLY);
	                this.state = 928;
	                this.match(SQLtinyParser.K_IMMEDIATE);

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	raise_function() {
	    let localctx = new Raise_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, SQLtinyParser.RULE_raise_function);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 933;
	        this.match(SQLtinyParser.K_RAISE);
	        this.state = 934;
	        this.match(SQLtinyParser.OPEN_PAR);
	        this.state = 939;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 81:
	            this.state = 935;
	            this.match(SQLtinyParser.K_IGNORE);
	            break;
	        case 25:
	        case 72:
	        case 125:
	            this.state = 936;
	            _la = this._input.LA(1);
	            if(!(_la===25 || _la===72 || _la===125)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 937;
	            this.match(SQLtinyParser.COMMA);
	            this.state = 938;
	            this.error_message();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 941;
	        this.match(SQLtinyParser.CLOSE_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexed_column() {
	    let localctx = new Indexed_columnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, SQLtinyParser.RULE_indexed_column);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 943;
	        this.column_name();
	        this.state = 946;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===45) {
	            this.state = 944;
	            this.match(SQLtinyParser.K_COLLATE);
	            this.state = 945;
	            this.collation_name();
	        }

	        this.state = 949;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34 || _la===60) {
	            this.state = 948;
	            _la = this._input.LA(1);
	            if(!(_la===34 || _la===60)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_constraint() {
	    let localctx = new Table_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, SQLtinyParser.RULE_table_constraint);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 953;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 951;
	            this.match(SQLtinyParser.K_CONSTRAINT);
	            this.state = 952;
	            this.name();
	        }

	        this.state = 991;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 113:
	        case 138:
	            this.state = 958;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 113:
	                this.state = 955;
	                this.match(SQLtinyParser.K_PRIMARY);
	                this.state = 956;
	                this.match(SQLtinyParser.K_KEY);
	                break;
	            case 138:
	                this.state = 957;
	                this.match(SQLtinyParser.K_UNIQUE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 960;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 961;
	            this.indexed_column();
	            this.state = 966;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 962;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 963;
	                this.indexed_column();
	                this.state = 968;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 969;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 970;
	            this.conflict_clause();
	            break;
	        case 44:
	            this.state = 972;
	            this.match(SQLtinyParser.K_CHECK);
	            this.state = 973;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 974;
	            this.expr(0);
	            this.state = 975;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            break;
	        case 74:
	            this.state = 977;
	            this.match(SQLtinyParser.K_FOREIGN);
	            this.state = 978;
	            this.match(SQLtinyParser.K_KEY);
	            this.state = 979;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 980;
	            this.column_name();
	            this.state = 985;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 981;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 982;
	                this.column_name();
	                this.state = 987;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 988;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 989;
	            this.foreign_key_clause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_clause() {
	    let localctx = new With_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, SQLtinyParser.RULE_with_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 993;
	        this.match(SQLtinyParser.K_WITH);
	        this.state = 995;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
	        if(la_===1) {
	            this.state = 994;
	            this.match(SQLtinyParser.K_RECURSIVE);

	        }
	        this.state = 997;
	        this.cte_table_name();
	        this.state = 998;
	        this.match(SQLtinyParser.K_AS);
	        this.state = 999;
	        this.match(SQLtinyParser.OPEN_PAR);
	        this.state = 1000;
	        this.select_stmt();
	        this.state = 1001;
	        this.match(SQLtinyParser.CLOSE_PAR);
	        this.state = 1011;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 1002;
	            this.match(SQLtinyParser.COMMA);
	            this.state = 1003;
	            this.cte_table_name();
	            this.state = 1004;
	            this.match(SQLtinyParser.K_AS);
	            this.state = 1005;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1006;
	            this.select_stmt();
	            this.state = 1007;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 1013;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualified_table_name() {
	    let localctx = new Qualified_table_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, SQLtinyParser.RULE_qualified_table_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1017;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
	        if(la_===1) {
	            this.state = 1014;
	            this.database_name();
	            this.state = 1015;
	            this.match(SQLtinyParser.DOT);

	        }
	        this.state = 1019;
	        this.table_name();
	        this.state = 1025;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 85:
	        	this.state = 1020;
	        	this.match(SQLtinyParser.K_INDEXED);
	        	this.state = 1021;
	        	this.match(SQLtinyParser.K_BY);
	        	this.state = 1022;
	        	this.index_name();
	        	break;
	        case 102:
	        	this.state = 1023;
	        	this.match(SQLtinyParser.K_NOT);
	        	this.state = 1024;
	        	this.match(SQLtinyParser.K_INDEXED);
	        	break;
	        case -1:
	        case 1:
	        case 50:
	        case 59:
	        case 63:
	        case 88:
	        case 98:
	        case 109:
	        case 122:
	        case 128:
	        case 129:
	        case 139:
	        case 142:
	        case 146:
	        case 147:
	        case 157:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ordering_term() {
	    let localctx = new Ordering_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, SQLtinyParser.RULE_ordering_term);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1027;
	        this.expr(0);
	        this.state = 1030;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===45) {
	            this.state = 1028;
	            this.match(SQLtinyParser.K_COLLATE);
	            this.state = 1029;
	            this.collation_name();
	        }

	        this.state = 1033;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34 || _la===60) {
	            this.state = 1032;
	            _la = this._input.LA(1);
	            if(!(_la===34 || _la===60)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragma_value() {
	    let localctx = new Pragma_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, SQLtinyParser.RULE_pragma_value);
	    try {
	        this.state = 1038;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1035;
	            this.signed_number();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1036;
	            this.name();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1037;
	            this.match(SQLtinyParser.STRING_LITERAL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	common_table_expression() {
	    let localctx = new Common_table_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, SQLtinyParser.RULE_common_table_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1040;
	        this.table_name();
	        this.state = 1052;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 1041;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1042;
	            this.column_name();
	            this.state = 1047;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 1043;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 1044;
	                this.column_name();
	                this.state = 1049;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1050;
	            this.match(SQLtinyParser.CLOSE_PAR);
	        }

	        this.state = 1054;
	        this.match(SQLtinyParser.K_AS);
	        this.state = 1055;
	        this.match(SQLtinyParser.OPEN_PAR);
	        this.state = 1056;
	        this.select_stmt();
	        this.state = 1057;
	        this.match(SQLtinyParser.CLOSE_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	result_column() {
	    let localctx = new Result_columnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, SQLtinyParser.RULE_result_column);
	    var _la = 0;
	    try {
	        this.state = 1071;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1059;
	            this.match(SQLtinyParser.STAR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1060;
	            this.table_name();
	            this.state = 1061;
	            this.match(SQLtinyParser.DOT);
	            this.state = 1062;
	            this.match(SQLtinyParser.STAR);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1064;
	            this.expr(0);
	            this.state = 1069;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===33 || _la===149 || _la===152) {
	                this.state = 1066;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===33) {
	                    this.state = 1065;
	                    this.match(SQLtinyParser.K_AS);
	                }

	                this.state = 1068;
	                this.column_alias();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_or_subquery() {
	    let localctx = new Table_or_subqueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, SQLtinyParser.RULE_table_or_subquery);
	    var _la = 0;
	    try {
	        this.state = 1120;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1076;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
	            if(la_===1) {
	                this.state = 1073;
	                this.database_name();
	                this.state = 1074;
	                this.match(SQLtinyParser.DOT);

	            }
	            this.state = 1078;
	            this.table_name();
	            this.state = 1083;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
	            if(la_===1) {
	                this.state = 1080;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
	                if(la_===1) {
	                    this.state = 1079;
	                    this.match(SQLtinyParser.K_AS);

	                }
	                this.state = 1082;
	                this.table_alias();

	            }
	            this.state = 1090;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 85:
	            	this.state = 1085;
	            	this.match(SQLtinyParser.K_INDEXED);
	            	this.state = 1086;
	            	this.match(SQLtinyParser.K_BY);
	            	this.state = 1087;
	            	this.index_name();
	            	break;
	            case 102:
	            	this.state = 1088;
	            	this.match(SQLtinyParser.K_NOT);
	            	this.state = 1089;
	            	this.match(SQLtinyParser.K_INDEXED);
	            	break;
	            case -1:
	            case 1:
	            case 4:
	            case 5:
	            case 50:
	            case 51:
	            case 59:
	            case 63:
	            case 68:
	            case 78:
	            case 87:
	            case 88:
	            case 90:
	            case 94:
	            case 96:
	            case 98:
	            case 100:
	            case 107:
	            case 109:
	            case 122:
	            case 128:
	            case 137:
	            case 139:
	            case 140:
	            case 142:
	            case 146:
	            case 147:
	            case 157:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1092;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1102;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1093;
	                this.table_or_subquery();
	                this.state = 1098;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 1094;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 1095;
	                    this.table_or_subquery();
	                    this.state = 1100;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;

	            case 2:
	                this.state = 1101;
	                this.join_clause();
	                break;

	            }
	            this.state = 1104;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 1109;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
	            if(la_===1) {
	                this.state = 1106;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
	                if(la_===1) {
	                    this.state = 1105;
	                    this.match(SQLtinyParser.K_AS);

	                }
	                this.state = 1108;
	                this.table_alias();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1111;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1112;
	            this.select_stmt();
	            this.state = 1113;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 1118;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
	            if(la_===1) {
	                this.state = 1115;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
	                if(la_===1) {
	                    this.state = 1114;
	                    this.match(SQLtinyParser.K_AS);

	                }
	                this.state = 1117;
	                this.table_alias();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_clause() {
	    let localctx = new Join_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, SQLtinyParser.RULE_join_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1122;
	        this.table_or_subquery();
	        this.state = 1129;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5 || _la===51 || ((((_la - 87)) & ~0x1f) === 0 && ((1 << (_la - 87)) & 8833) !== 0)) {
	            this.state = 1123;
	            this.join_operator();
	            this.state = 1124;
	            this.table_or_subquery();
	            this.state = 1125;
	            this.join_constraint();
	            this.state = 1131;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_operator() {
	    let localctx = new Join_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, SQLtinyParser.RULE_join_operator);
	    var _la = 0;
	    try {
	        this.state = 1145;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1132;
	            this.match(SQLtinyParser.COMMA);
	            break;
	        case 51:
	        case 87:
	        case 94:
	        case 96:
	        case 100:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1134;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===100) {
	                this.state = 1133;
	                this.match(SQLtinyParser.K_NATURAL);
	            }

	            this.state = 1142;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 96:
	            	this.state = 1136;
	            	this.match(SQLtinyParser.K_LEFT);
	            	this.state = 1138;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===110) {
	            	    this.state = 1137;
	            	    this.match(SQLtinyParser.K_OUTER);
	            	}

	            	break;
	            case 87:
	            	this.state = 1140;
	            	this.match(SQLtinyParser.K_INNER);
	            	break;
	            case 51:
	            	this.state = 1141;
	            	this.match(SQLtinyParser.K_CROSS);
	            	break;
	            case 94:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 1144;
	            this.match(SQLtinyParser.K_JOIN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_constraint() {
	    let localctx = new Join_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, SQLtinyParser.RULE_join_constraint);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1161;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 107:
	        	this.state = 1147;
	        	this.match(SQLtinyParser.K_ON);
	        	this.state = 1148;
	        	this.expr(0);
	        	break;
	        case 140:
	        	this.state = 1149;
	        	this.match(SQLtinyParser.K_USING);
	        	this.state = 1150;
	        	this.match(SQLtinyParser.OPEN_PAR);
	        	this.state = 1151;
	        	this.column_name();
	        	this.state = 1156;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	while(_la===5) {
	        	    this.state = 1152;
	        	    this.match(SQLtinyParser.COMMA);
	        	    this.state = 1153;
	        	    this.column_name();
	        	    this.state = 1158;
	        	    this._errHandler.sync(this);
	        	    _la = this._input.LA(1);
	        	}
	        	this.state = 1159;
	        	this.match(SQLtinyParser.CLOSE_PAR);
	        	break;
	        case -1:
	        case 1:
	        case 4:
	        case 5:
	        case 50:
	        case 51:
	        case 59:
	        case 63:
	        case 68:
	        case 78:
	        case 87:
	        case 88:
	        case 90:
	        case 94:
	        case 96:
	        case 98:
	        case 100:
	        case 109:
	        case 122:
	        case 128:
	        case 137:
	        case 139:
	        case 142:
	        case 146:
	        case 147:
	        case 157:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_core() {
	    let localctx = new Select_coreContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, SQLtinyParser.RULE_select_core);
	    var _la = 0;
	    try {
	        this.state = 1237;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 128:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1163;
	            this.match(SQLtinyParser.K_SELECT);
	            this.state = 1165;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	            if(la_===1) {
	                this.state = 1164;
	                _la = this._input.LA(1);
	                if(!(_la===29 || _la===62)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 1167;
	            this.result_column();
	            this.state = 1172;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 1168;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 1169;
	                this.result_column();
	                this.state = 1174;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1187;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===75) {
	                this.state = 1175;
	                this.match(SQLtinyParser.K_FROM);
	                this.state = 1185;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1176;
	                    this.table_or_subquery();
	                    this.state = 1181;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===5) {
	                        this.state = 1177;
	                        this.match(SQLtinyParser.COMMA);
	                        this.state = 1178;
	                        this.table_or_subquery();
	                        this.state = 1183;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    break;

	                case 2:
	                    this.state = 1184;
	                    this.join_clause();
	                    break;

	                }
	            }

	            this.state = 1191;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===146) {
	                this.state = 1189;
	                this.match(SQLtinyParser.K_WHERE);
	                this.state = 1190;
	                this.expr(0);
	            }

	            this.state = 1207;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===78) {
	                this.state = 1193;
	                this.match(SQLtinyParser.K_GROUP);
	                this.state = 1194;
	                this.match(SQLtinyParser.K_BY);
	                this.state = 1195;
	                this.expr(0);
	                this.state = 1200;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 1196;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 1197;
	                    this.expr(0);
	                    this.state = 1202;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1205;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===79) {
	                    this.state = 1203;
	                    this.match(SQLtinyParser.K_HAVING);
	                    this.state = 1204;
	                    this.expr(0);
	                }

	            }

	            break;
	        case 142:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1209;
	            this.match(SQLtinyParser.K_VALUES);
	            this.state = 1210;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1211;
	            this.expr(0);
	            this.state = 1216;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 1212;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 1213;
	                this.expr(0);
	                this.state = 1218;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1219;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            this.state = 1234;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 1220;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 1221;
	                this.match(SQLtinyParser.OPEN_PAR);
	                this.state = 1222;
	                this.expr(0);
	                this.state = 1227;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===5) {
	                    this.state = 1223;
	                    this.match(SQLtinyParser.COMMA);
	                    this.state = 1224;
	                    this.expr(0);
	                    this.state = 1229;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1230;
	                this.match(SQLtinyParser.CLOSE_PAR);
	                this.state = 1236;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compound_operator() {
	    let localctx = new Compound_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, SQLtinyParser.RULE_compound_operator);
	    try {
	        this.state = 1244;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1239;
	            this.match(SQLtinyParser.K_UNION);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1240;
	            this.match(SQLtinyParser.K_UNION);
	            this.state = 1241;
	            this.match(SQLtinyParser.K_ALL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1242;
	            this.match(SQLtinyParser.K_INTERSECT);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1243;
	            this.match(SQLtinyParser.K_EXCEPT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cte_table_name() {
	    let localctx = new Cte_table_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, SQLtinyParser.RULE_cte_table_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1246;
	        this.table_name();
	        this.state = 1258;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 1247;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1248;
	            this.column_name();
	            this.state = 1253;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 1249;
	                this.match(SQLtinyParser.COMMA);
	                this.state = 1250;
	                this.column_name();
	                this.state = 1255;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1256;
	            this.match(SQLtinyParser.CLOSE_PAR);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signed_number() {
	    let localctx = new Signed_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, SQLtinyParser.RULE_signed_number);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1261;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===8 || _la===9) {
	            this.state = 1260;
	            _la = this._input.LA(1);
	            if(!(_la===8 || _la===9)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1263;
	        this.match(SQLtinyParser.NUMERIC_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal_value() {
	    let localctx = new Literal_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, SQLtinyParser.RULE_literal_value);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1265;
	        _la = this._input.LA(1);
	        if(!(((((_la - 52)) & ~0x1f) === 0 && ((1 << (_la - 52)) & 7) !== 0) || _la===104 || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 13) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unary_operator() {
	    let localctx = new Unary_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, SQLtinyParser.RULE_unary_operator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1267;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 1792) !== 0) || _la===102)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	error_message() {
	    let localctx = new Error_messageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, SQLtinyParser.RULE_error_message);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1269;
	        this.match(SQLtinyParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module_argument() {
	    let localctx = new Module_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, SQLtinyParser.RULE_module_argument);
	    try {
	        this.state = 1273;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1271;
	            this.expr(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1272;
	            this.column_def();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_alias() {
	    let localctx = new Column_aliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, SQLtinyParser.RULE_column_alias);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1275;
	        _la = this._input.LA(1);
	        if(!(_la===149 || _la===152)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, SQLtinyParser.RULE_keyword);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1277;
	        _la = this._input.LA(1);
	        if(!(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 4294967295) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 4294967295) !== 0) || ((((_la - 121)) & ~0x1f) === 0 && ((1 << (_la - 121)) & 268435455) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name() {
	    let localctx = new NameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, SQLtinyParser.RULE_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1279;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_name() {
	    let localctx = new Function_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, SQLtinyParser.RULE_function_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1281;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	database_name() {
	    let localctx = new Database_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, SQLtinyParser.RULE_database_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1283;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_name() {
	    let localctx = new Table_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, SQLtinyParser.RULE_table_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1285;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_or_index_name() {
	    let localctx = new Table_or_index_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, SQLtinyParser.RULE_table_or_index_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1287;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	new_table_name() {
	    let localctx = new New_table_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, SQLtinyParser.RULE_new_table_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1289;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	column_name() {
	    let localctx = new Column_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, SQLtinyParser.RULE_column_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1291;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collation_name() {
	    let localctx = new Collation_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, SQLtinyParser.RULE_collation_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1293;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foreign_table() {
	    let localctx = new Foreign_tableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, SQLtinyParser.RULE_foreign_table);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1295;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_name() {
	    let localctx = new Index_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, SQLtinyParser.RULE_index_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1297;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trigger_name() {
	    let localctx = new Trigger_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, SQLtinyParser.RULE_trigger_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1299;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	view_name() {
	    let localctx = new View_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, SQLtinyParser.RULE_view_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1301;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module_name() {
	    let localctx = new Module_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, SQLtinyParser.RULE_module_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1303;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragma_name() {
	    let localctx = new Pragma_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, SQLtinyParser.RULE_pragma_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1305;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	savepoint_name() {
	    let localctx = new Savepoint_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, SQLtinyParser.RULE_savepoint_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1307;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table_alias() {
	    let localctx = new Table_aliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, SQLtinyParser.RULE_table_alias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1309;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transaction_name() {
	    let localctx = new Transaction_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, SQLtinyParser.RULE_transaction_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1311;
	        this.any_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	any_name() {
	    let localctx = new Any_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, SQLtinyParser.RULE_any_name);
	    try {
	        this.state = 1320;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 149:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1313;
	            this.match(SQLtinyParser.IDENTIFIER);
	            break;
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1314;
	            this.keyword();
	            break;
	        case 152:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1315;
	            this.match(SQLtinyParser.STRING_LITERAL);
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1316;
	            this.match(SQLtinyParser.OPEN_PAR);
	            this.state = 1317;
	            this.any_name();
	            this.state = 1318;
	            this.match(SQLtinyParser.CLOSE_PAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

SQLtinyParser.EOF = antlr4.Token.EOF;
SQLtinyParser.SCOL = 1;
SQLtinyParser.DOT = 2;
SQLtinyParser.OPEN_PAR = 3;
SQLtinyParser.CLOSE_PAR = 4;
SQLtinyParser.COMMA = 5;
SQLtinyParser.ASSIGN = 6;
SQLtinyParser.STAR = 7;
SQLtinyParser.PLUS = 8;
SQLtinyParser.MINUS = 9;
SQLtinyParser.TILDE = 10;
SQLtinyParser.PIPE2 = 11;
SQLtinyParser.DIV = 12;
SQLtinyParser.MOD = 13;
SQLtinyParser.LT2 = 14;
SQLtinyParser.GT2 = 15;
SQLtinyParser.AMP = 16;
SQLtinyParser.PIPE = 17;
SQLtinyParser.LT = 18;
SQLtinyParser.LT_EQ = 19;
SQLtinyParser.GT = 20;
SQLtinyParser.GT_EQ = 21;
SQLtinyParser.EQ = 22;
SQLtinyParser.NOT_EQ1 = 23;
SQLtinyParser.NOT_EQ2 = 24;
SQLtinyParser.K_ABORT = 25;
SQLtinyParser.K_ACTION = 26;
SQLtinyParser.K_ADD = 27;
SQLtinyParser.K_AFTER = 28;
SQLtinyParser.K_ALL = 29;
SQLtinyParser.K_ALTER = 30;
SQLtinyParser.K_ANALYZE = 31;
SQLtinyParser.K_AND = 32;
SQLtinyParser.K_AS = 33;
SQLtinyParser.K_ASC = 34;
SQLtinyParser.K_ATTACH = 35;
SQLtinyParser.K_AUTOINCREMENT = 36;
SQLtinyParser.K_BEFORE = 37;
SQLtinyParser.K_BEGIN = 38;
SQLtinyParser.K_BETWEEN = 39;
SQLtinyParser.K_BY = 40;
SQLtinyParser.K_CASCADE = 41;
SQLtinyParser.K_CASE = 42;
SQLtinyParser.K_CAST = 43;
SQLtinyParser.K_CHECK = 44;
SQLtinyParser.K_COLLATE = 45;
SQLtinyParser.K_COLUMN = 46;
SQLtinyParser.K_COMMIT = 47;
SQLtinyParser.K_CONFLICT = 48;
SQLtinyParser.K_CONSTRAINT = 49;
SQLtinyParser.K_CREATE = 50;
SQLtinyParser.K_CROSS = 51;
SQLtinyParser.K_CURRENT_DATE = 52;
SQLtinyParser.K_CURRENT_TIME = 53;
SQLtinyParser.K_CURRENT_TIMESTAMP = 54;
SQLtinyParser.K_DATABASE = 55;
SQLtinyParser.K_DEFAULT = 56;
SQLtinyParser.K_DEFERRABLE = 57;
SQLtinyParser.K_DEFERRED = 58;
SQLtinyParser.K_DELETE = 59;
SQLtinyParser.K_DESC = 60;
SQLtinyParser.K_DETACH = 61;
SQLtinyParser.K_DISTINCT = 62;
SQLtinyParser.K_DROP = 63;
SQLtinyParser.K_EACH = 64;
SQLtinyParser.K_ELSE = 65;
SQLtinyParser.K_END = 66;
SQLtinyParser.K_ESCAPE = 67;
SQLtinyParser.K_EXCEPT = 68;
SQLtinyParser.K_EXCLUSIVE = 69;
SQLtinyParser.K_EXISTS = 70;
SQLtinyParser.K_EXPLAIN = 71;
SQLtinyParser.K_FAIL = 72;
SQLtinyParser.K_FOR = 73;
SQLtinyParser.K_FOREIGN = 74;
SQLtinyParser.K_FROM = 75;
SQLtinyParser.K_FULL = 76;
SQLtinyParser.K_GLOB = 77;
SQLtinyParser.K_GROUP = 78;
SQLtinyParser.K_HAVING = 79;
SQLtinyParser.K_IF = 80;
SQLtinyParser.K_IGNORE = 81;
SQLtinyParser.K_IMMEDIATE = 82;
SQLtinyParser.K_IN = 83;
SQLtinyParser.K_INDEX = 84;
SQLtinyParser.K_INDEXED = 85;
SQLtinyParser.K_INITIALLY = 86;
SQLtinyParser.K_INNER = 87;
SQLtinyParser.K_INSERT = 88;
SQLtinyParser.K_INSTEAD = 89;
SQLtinyParser.K_INTERSECT = 90;
SQLtinyParser.K_INTO = 91;
SQLtinyParser.K_IS = 92;
SQLtinyParser.K_ISNULL = 93;
SQLtinyParser.K_JOIN = 94;
SQLtinyParser.K_KEY = 95;
SQLtinyParser.K_LEFT = 96;
SQLtinyParser.K_LIKE = 97;
SQLtinyParser.K_LIMIT = 98;
SQLtinyParser.K_MATCH = 99;
SQLtinyParser.K_NATURAL = 100;
SQLtinyParser.K_NO = 101;
SQLtinyParser.K_NOT = 102;
SQLtinyParser.K_NOTNULL = 103;
SQLtinyParser.K_NULL = 104;
SQLtinyParser.K_OF = 105;
SQLtinyParser.K_OFFSET = 106;
SQLtinyParser.K_ON = 107;
SQLtinyParser.K_OR = 108;
SQLtinyParser.K_ORDER = 109;
SQLtinyParser.K_OUTER = 110;
SQLtinyParser.K_PLAN = 111;
SQLtinyParser.K_PRAGMA = 112;
SQLtinyParser.K_PRIMARY = 113;
SQLtinyParser.K_QUERY = 114;
SQLtinyParser.K_RAISE = 115;
SQLtinyParser.K_RECURSIVE = 116;
SQLtinyParser.K_REFERENCES = 117;
SQLtinyParser.K_REGEXP = 118;
SQLtinyParser.K_REINDEX = 119;
SQLtinyParser.K_RELEASE = 120;
SQLtinyParser.K_RENAME = 121;
SQLtinyParser.K_REPLACE = 122;
SQLtinyParser.K_RESTRICT = 123;
SQLtinyParser.K_RIGHT = 124;
SQLtinyParser.K_ROLLBACK = 125;
SQLtinyParser.K_ROW = 126;
SQLtinyParser.K_SAVEPOINT = 127;
SQLtinyParser.K_SELECT = 128;
SQLtinyParser.K_SET = 129;
SQLtinyParser.K_TABLE = 130;
SQLtinyParser.K_TEMP = 131;
SQLtinyParser.K_TEMPORARY = 132;
SQLtinyParser.K_THEN = 133;
SQLtinyParser.K_TO = 134;
SQLtinyParser.K_TRANSACTION = 135;
SQLtinyParser.K_TRIGGER = 136;
SQLtinyParser.K_UNION = 137;
SQLtinyParser.K_UNIQUE = 138;
SQLtinyParser.K_UPDATE = 139;
SQLtinyParser.K_USING = 140;
SQLtinyParser.K_VACUUM = 141;
SQLtinyParser.K_VALUES = 142;
SQLtinyParser.K_VIEW = 143;
SQLtinyParser.K_VIRTUAL = 144;
SQLtinyParser.K_WHEN = 145;
SQLtinyParser.K_WHERE = 146;
SQLtinyParser.K_WITH = 147;
SQLtinyParser.K_WITHOUT = 148;
SQLtinyParser.IDENTIFIER = 149;
SQLtinyParser.NUMERIC_LITERAL = 150;
SQLtinyParser.BIND_PARAMETER = 151;
SQLtinyParser.STRING_LITERAL = 152;
SQLtinyParser.BLOB_LITERAL = 153;
SQLtinyParser.SINGLE_LINE_COMMENT = 154;
SQLtinyParser.MULTILINE_COMMENT = 155;
SQLtinyParser.SPACES = 156;
SQLtinyParser.UNEXPECTED_CHAR = 157;

SQLtinyParser.RULE_parse = 0;
SQLtinyParser.RULE_error = 1;
SQLtinyParser.RULE_sql_stmt_list = 2;
SQLtinyParser.RULE_sql_stmt = 3;
SQLtinyParser.RULE_create_index_stmt = 4;
SQLtinyParser.RULE_create_table_stmt = 5;
SQLtinyParser.RULE_delete_stmt = 6;
SQLtinyParser.RULE_delete_stmt_limited = 7;
SQLtinyParser.RULE_drop_index_stmt = 8;
SQLtinyParser.RULE_drop_table_stmt = 9;
SQLtinyParser.RULE_insert_stmt = 10;
SQLtinyParser.RULE_simple_select_stmt = 11;
SQLtinyParser.RULE_select_stmt = 12;
SQLtinyParser.RULE_select_or_values = 13;
SQLtinyParser.RULE_update_stmt = 14;
SQLtinyParser.RULE_update_stmt_limited = 15;
SQLtinyParser.RULE_column_def = 16;
SQLtinyParser.RULE_type_name = 17;
SQLtinyParser.RULE_column_constraint = 18;
SQLtinyParser.RULE_conflict_clause = 19;
SQLtinyParser.RULE_expr = 20;
SQLtinyParser.RULE_foreign_key_clause = 21;
SQLtinyParser.RULE_raise_function = 22;
SQLtinyParser.RULE_indexed_column = 23;
SQLtinyParser.RULE_table_constraint = 24;
SQLtinyParser.RULE_with_clause = 25;
SQLtinyParser.RULE_qualified_table_name = 26;
SQLtinyParser.RULE_ordering_term = 27;
SQLtinyParser.RULE_pragma_value = 28;
SQLtinyParser.RULE_common_table_expression = 29;
SQLtinyParser.RULE_result_column = 30;
SQLtinyParser.RULE_table_or_subquery = 31;
SQLtinyParser.RULE_join_clause = 32;
SQLtinyParser.RULE_join_operator = 33;
SQLtinyParser.RULE_join_constraint = 34;
SQLtinyParser.RULE_select_core = 35;
SQLtinyParser.RULE_compound_operator = 36;
SQLtinyParser.RULE_cte_table_name = 37;
SQLtinyParser.RULE_signed_number = 38;
SQLtinyParser.RULE_literal_value = 39;
SQLtinyParser.RULE_unary_operator = 40;
SQLtinyParser.RULE_error_message = 41;
SQLtinyParser.RULE_module_argument = 42;
SQLtinyParser.RULE_column_alias = 43;
SQLtinyParser.RULE_keyword = 44;
SQLtinyParser.RULE_name = 45;
SQLtinyParser.RULE_function_name = 46;
SQLtinyParser.RULE_database_name = 47;
SQLtinyParser.RULE_table_name = 48;
SQLtinyParser.RULE_table_or_index_name = 49;
SQLtinyParser.RULE_new_table_name = 50;
SQLtinyParser.RULE_column_name = 51;
SQLtinyParser.RULE_collation_name = 52;
SQLtinyParser.RULE_foreign_table = 53;
SQLtinyParser.RULE_index_name = 54;
SQLtinyParser.RULE_trigger_name = 55;
SQLtinyParser.RULE_view_name = 56;
SQLtinyParser.RULE_module_name = 57;
SQLtinyParser.RULE_pragma_name = 58;
SQLtinyParser.RULE_savepoint_name = 59;
SQLtinyParser.RULE_table_alias = 60;
SQLtinyParser.RULE_transaction_name = 61;
SQLtinyParser.RULE_any_name = 62;

class ParseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_parse;
    }

	EOF() {
	    return this.getToken(SQLtinyParser.EOF, 0);
	};

	sql_stmt_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sql_stmt_listContext);
	    } else {
	        return this.getTypedRuleContext(Sql_stmt_listContext,i);
	    }
	};

	error = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ErrorContext);
	    } else {
	        return this.getTypedRuleContext(ErrorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterParse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitParse(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitParse(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ErrorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_error;
        this._UNEXPECTED_CHAR = null;
    }

	UNEXPECTED_CHAR() {
	    return this.getToken(SQLtinyParser.UNEXPECTED_CHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterError(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitError(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitError(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Sql_stmt_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_sql_stmt_list;
    }

	sql_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Sql_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Sql_stmtContext,i);
	    }
	};

	SCOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.SCOL);
	    } else {
	        return this.getToken(SQLtinyParser.SCOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSql_stmt_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSql_stmt_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitSql_stmt_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Sql_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_sql_stmt;
    }

	create_index_stmt() {
	    return this.getTypedRuleContext(Create_index_stmtContext,0);
	};

	create_table_stmt() {
	    return this.getTypedRuleContext(Create_table_stmtContext,0);
	};

	delete_stmt() {
	    return this.getTypedRuleContext(Delete_stmtContext,0);
	};

	delete_stmt_limited() {
	    return this.getTypedRuleContext(Delete_stmt_limitedContext,0);
	};

	drop_index_stmt() {
	    return this.getTypedRuleContext(Drop_index_stmtContext,0);
	};

	drop_table_stmt() {
	    return this.getTypedRuleContext(Drop_table_stmtContext,0);
	};

	insert_stmt() {
	    return this.getTypedRuleContext(Insert_stmtContext,0);
	};

	simple_select_stmt() {
	    return this.getTypedRuleContext(Simple_select_stmtContext,0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	update_stmt() {
	    return this.getTypedRuleContext(Update_stmtContext,0);
	};

	update_stmt_limited() {
	    return this.getTypedRuleContext(Update_stmt_limitedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSql_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSql_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitSql_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_index_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_create_index_stmt;
    }

	K_CREATE() {
	    return this.getToken(SQLtinyParser.K_CREATE, 0);
	};

	K_INDEX() {
	    return this.getToken(SQLtinyParser.K_INDEX, 0);
	};

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	K_ON() {
	    return this.getToken(SQLtinyParser.K_ON, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	indexed_column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Indexed_columnContext);
	    } else {
	        return this.getTypedRuleContext(Indexed_columnContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	K_UNIQUE() {
	    return this.getToken(SQLtinyParser.K_UNIQUE, 0);
	};

	K_IF() {
	    return this.getToken(SQLtinyParser.K_IF, 0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCreate_index_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCreate_index_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitCreate_index_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Create_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_create_table_stmt;
    }

	K_CREATE() {
	    return this.getToken(SQLtinyParser.K_CREATE, 0);
	};

	K_TABLE() {
	    return this.getToken(SQLtinyParser.K_TABLE, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	column_def = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_defContext);
	    } else {
	        return this.getTypedRuleContext(Column_defContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	K_AS() {
	    return this.getToken(SQLtinyParser.K_AS, 0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	K_IF() {
	    return this.getToken(SQLtinyParser.K_IF, 0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	K_TEMP() {
	    return this.getToken(SQLtinyParser.K_TEMP, 0);
	};

	K_TEMPORARY() {
	    return this.getToken(SQLtinyParser.K_TEMPORARY, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	table_constraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_constraintContext);
	    } else {
	        return this.getTypedRuleContext(Table_constraintContext,i);
	    }
	};

	K_WITHOUT() {
	    return this.getToken(SQLtinyParser.K_WITHOUT, 0);
	};

	IDENTIFIER() {
	    return this.getToken(SQLtinyParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCreate_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCreate_table_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitCreate_table_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Delete_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_delete_stmt;
    }

	K_DELETE() {
	    return this.getToken(SQLtinyParser.K_DELETE, 0);
	};

	K_FROM() {
	    return this.getToken(SQLtinyParser.K_FROM, 0);
	};

	qualified_table_name() {
	    return this.getTypedRuleContext(Qualified_table_nameContext,0);
	};

	with_clause() {
	    return this.getTypedRuleContext(With_clauseContext,0);
	};

	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterDelete_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitDelete_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitDelete_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Delete_stmt_limitedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_delete_stmt_limited;
    }

	K_DELETE() {
	    return this.getToken(SQLtinyParser.K_DELETE, 0);
	};

	K_FROM() {
	    return this.getToken(SQLtinyParser.K_FROM, 0);
	};

	qualified_table_name() {
	    return this.getTypedRuleContext(Qualified_table_nameContext,0);
	};

	with_clause() {
	    return this.getTypedRuleContext(With_clauseContext,0);
	};

	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	K_LIMIT() {
	    return this.getToken(SQLtinyParser.K_LIMIT, 0);
	};

	K_ORDER() {
	    return this.getToken(SQLtinyParser.K_ORDER, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	ordering_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ordering_termContext);
	    } else {
	        return this.getTypedRuleContext(Ordering_termContext,i);
	    }
	};

	K_OFFSET() {
	    return this.getToken(SQLtinyParser.K_OFFSET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterDelete_stmt_limited(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitDelete_stmt_limited(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitDelete_stmt_limited(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_index_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_drop_index_stmt;
    }

	K_DROP() {
	    return this.getToken(SQLtinyParser.K_DROP, 0);
	};

	K_INDEX() {
	    return this.getToken(SQLtinyParser.K_INDEX, 0);
	};

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	K_IF() {
	    return this.getToken(SQLtinyParser.K_IF, 0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterDrop_index_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitDrop_index_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitDrop_index_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Drop_table_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_drop_table_stmt;
    }

	K_DROP() {
	    return this.getToken(SQLtinyParser.K_DROP, 0);
	};

	K_TABLE() {
	    return this.getToken(SQLtinyParser.K_TABLE, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	K_IF() {
	    return this.getToken(SQLtinyParser.K_IF, 0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterDrop_table_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitDrop_table_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitDrop_table_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Insert_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_insert_stmt;
    }

	K_INTO() {
	    return this.getToken(SQLtinyParser.K_INTO, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	K_INSERT() {
	    return this.getToken(SQLtinyParser.K_INSERT, 0);
	};

	K_REPLACE() {
	    return this.getToken(SQLtinyParser.K_REPLACE, 0);
	};

	K_OR() {
	    return this.getToken(SQLtinyParser.K_OR, 0);
	};

	K_ROLLBACK() {
	    return this.getToken(SQLtinyParser.K_ROLLBACK, 0);
	};

	K_ABORT() {
	    return this.getToken(SQLtinyParser.K_ABORT, 0);
	};

	K_FAIL() {
	    return this.getToken(SQLtinyParser.K_FAIL, 0);
	};

	K_IGNORE() {
	    return this.getToken(SQLtinyParser.K_IGNORE, 0);
	};

	K_VALUES() {
	    return this.getToken(SQLtinyParser.K_VALUES, 0);
	};

	OPEN_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.OPEN_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.OPEN_PAR, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	CLOSE_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.CLOSE_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.CLOSE_PAR, i);
	    }
	};


	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	K_DEFAULT() {
	    return this.getToken(SQLtinyParser.K_DEFAULT, 0);
	};

	with_clause() {
	    return this.getTypedRuleContext(With_clauseContext,0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterInsert_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitInsert_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitInsert_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Simple_select_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_simple_select_stmt;
    }

	select_core() {
	    return this.getTypedRuleContext(Select_coreContext,0);
	};

	K_WITH() {
	    return this.getToken(SQLtinyParser.K_WITH, 0);
	};

	common_table_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Common_table_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Common_table_expressionContext,i);
	    }
	};

	K_ORDER() {
	    return this.getToken(SQLtinyParser.K_ORDER, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	ordering_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ordering_termContext);
	    } else {
	        return this.getTypedRuleContext(Ordering_termContext,i);
	    }
	};

	K_LIMIT() {
	    return this.getToken(SQLtinyParser.K_LIMIT, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	K_RECURSIVE() {
	    return this.getToken(SQLtinyParser.K_RECURSIVE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_OFFSET() {
	    return this.getToken(SQLtinyParser.K_OFFSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSimple_select_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSimple_select_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitSimple_select_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Select_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_select_stmt;
    }

	select_or_values = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Select_or_valuesContext);
	    } else {
	        return this.getTypedRuleContext(Select_or_valuesContext,i);
	    }
	};

	K_WITH() {
	    return this.getToken(SQLtinyParser.K_WITH, 0);
	};

	common_table_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Common_table_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Common_table_expressionContext,i);
	    }
	};

	compound_operator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Compound_operatorContext);
	    } else {
	        return this.getTypedRuleContext(Compound_operatorContext,i);
	    }
	};

	K_ORDER() {
	    return this.getToken(SQLtinyParser.K_ORDER, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	ordering_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ordering_termContext);
	    } else {
	        return this.getTypedRuleContext(Ordering_termContext,i);
	    }
	};

	K_LIMIT() {
	    return this.getToken(SQLtinyParser.K_LIMIT, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	K_RECURSIVE() {
	    return this.getToken(SQLtinyParser.K_RECURSIVE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_OFFSET() {
	    return this.getToken(SQLtinyParser.K_OFFSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSelect_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSelect_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitSelect_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Select_or_valuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_select_or_values;
    }

	K_SELECT() {
	    return this.getToken(SQLtinyParser.K_SELECT, 0);
	};

	result_column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Result_columnContext);
	    } else {
	        return this.getTypedRuleContext(Result_columnContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_FROM() {
	    return this.getToken(SQLtinyParser.K_FROM, 0);
	};

	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	K_GROUP() {
	    return this.getToken(SQLtinyParser.K_GROUP, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	K_DISTINCT() {
	    return this.getToken(SQLtinyParser.K_DISTINCT, 0);
	};

	K_ALL() {
	    return this.getToken(SQLtinyParser.K_ALL, 0);
	};

	table_or_subquery = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_or_subqueryContext);
	    } else {
	        return this.getTypedRuleContext(Table_or_subqueryContext,i);
	    }
	};

	join_clause() {
	    return this.getTypedRuleContext(Join_clauseContext,0);
	};

	K_HAVING() {
	    return this.getToken(SQLtinyParser.K_HAVING, 0);
	};

	K_VALUES() {
	    return this.getToken(SQLtinyParser.K_VALUES, 0);
	};

	OPEN_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.OPEN_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.OPEN_PAR, i);
	    }
	};


	CLOSE_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.CLOSE_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.CLOSE_PAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSelect_or_values(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSelect_or_values(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitSelect_or_values(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Update_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_update_stmt;
    }

	K_UPDATE() {
	    return this.getToken(SQLtinyParser.K_UPDATE, 0);
	};

	qualified_table_name() {
	    return this.getTypedRuleContext(Qualified_table_nameContext,0);
	};

	K_SET() {
	    return this.getToken(SQLtinyParser.K_SET, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	ASSIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.ASSIGN);
	    } else {
	        return this.getToken(SQLtinyParser.ASSIGN, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	with_clause() {
	    return this.getTypedRuleContext(With_clauseContext,0);
	};

	K_OR() {
	    return this.getToken(SQLtinyParser.K_OR, 0);
	};

	K_ROLLBACK() {
	    return this.getToken(SQLtinyParser.K_ROLLBACK, 0);
	};

	K_ABORT() {
	    return this.getToken(SQLtinyParser.K_ABORT, 0);
	};

	K_REPLACE() {
	    return this.getToken(SQLtinyParser.K_REPLACE, 0);
	};

	K_FAIL() {
	    return this.getToken(SQLtinyParser.K_FAIL, 0);
	};

	K_IGNORE() {
	    return this.getToken(SQLtinyParser.K_IGNORE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterUpdate_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitUpdate_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitUpdate_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Update_stmt_limitedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_update_stmt_limited;
    }

	K_UPDATE() {
	    return this.getToken(SQLtinyParser.K_UPDATE, 0);
	};

	qualified_table_name() {
	    return this.getTypedRuleContext(Qualified_table_nameContext,0);
	};

	K_SET() {
	    return this.getToken(SQLtinyParser.K_SET, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	ASSIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.ASSIGN);
	    } else {
	        return this.getToken(SQLtinyParser.ASSIGN, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	with_clause() {
	    return this.getTypedRuleContext(With_clauseContext,0);
	};

	K_OR() {
	    return this.getToken(SQLtinyParser.K_OR, 0);
	};

	K_ROLLBACK() {
	    return this.getToken(SQLtinyParser.K_ROLLBACK, 0);
	};

	K_ABORT() {
	    return this.getToken(SQLtinyParser.K_ABORT, 0);
	};

	K_REPLACE() {
	    return this.getToken(SQLtinyParser.K_REPLACE, 0);
	};

	K_FAIL() {
	    return this.getToken(SQLtinyParser.K_FAIL, 0);
	};

	K_IGNORE() {
	    return this.getToken(SQLtinyParser.K_IGNORE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	K_LIMIT() {
	    return this.getToken(SQLtinyParser.K_LIMIT, 0);
	};

	K_ORDER() {
	    return this.getToken(SQLtinyParser.K_ORDER, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	ordering_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ordering_termContext);
	    } else {
	        return this.getTypedRuleContext(Ordering_termContext,i);
	    }
	};

	K_OFFSET() {
	    return this.getToken(SQLtinyParser.K_OFFSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterUpdate_stmt_limited(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitUpdate_stmt_limited(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitUpdate_stmt_limited(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Column_defContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_column_def;
    }

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	type_name() {
	    return this.getTypedRuleContext(Type_nameContext,0);
	};

	column_constraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_constraintContext);
	    } else {
	        return this.getTypedRuleContext(Column_constraintContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterColumn_def(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitColumn_def(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitColumn_def(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_type_name;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	signed_number = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Signed_numberContext);
	    } else {
	        return this.getTypedRuleContext(Signed_numberContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	COMMA() {
	    return this.getToken(SQLtinyParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterType_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitType_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitType_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Column_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_column_constraint;
    }

	K_PRIMARY() {
	    return this.getToken(SQLtinyParser.K_PRIMARY, 0);
	};

	K_KEY() {
	    return this.getToken(SQLtinyParser.K_KEY, 0);
	};

	conflict_clause() {
	    return this.getTypedRuleContext(Conflict_clauseContext,0);
	};

	K_NULL() {
	    return this.getToken(SQLtinyParser.K_NULL, 0);
	};

	K_UNIQUE() {
	    return this.getToken(SQLtinyParser.K_UNIQUE, 0);
	};

	K_CHECK() {
	    return this.getToken(SQLtinyParser.K_CHECK, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	K_DEFAULT() {
	    return this.getToken(SQLtinyParser.K_DEFAULT, 0);
	};

	K_COLLATE() {
	    return this.getToken(SQLtinyParser.K_COLLATE, 0);
	};

	collation_name() {
	    return this.getTypedRuleContext(Collation_nameContext,0);
	};

	foreign_key_clause() {
	    return this.getTypedRuleContext(Foreign_key_clauseContext,0);
	};

	K_CONSTRAINT() {
	    return this.getToken(SQLtinyParser.K_CONSTRAINT, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	signed_number() {
	    return this.getTypedRuleContext(Signed_numberContext,0);
	};

	literal_value() {
	    return this.getTypedRuleContext(Literal_valueContext,0);
	};

	K_AUTOINCREMENT() {
	    return this.getToken(SQLtinyParser.K_AUTOINCREMENT, 0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_ASC() {
	    return this.getToken(SQLtinyParser.K_ASC, 0);
	};

	K_DESC() {
	    return this.getToken(SQLtinyParser.K_DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterColumn_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitColumn_constraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitColumn_constraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Conflict_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_conflict_clause;
    }

	K_ON() {
	    return this.getToken(SQLtinyParser.K_ON, 0);
	};

	K_CONFLICT() {
	    return this.getToken(SQLtinyParser.K_CONFLICT, 0);
	};

	K_ROLLBACK() {
	    return this.getToken(SQLtinyParser.K_ROLLBACK, 0);
	};

	K_ABORT() {
	    return this.getToken(SQLtinyParser.K_ABORT, 0);
	};

	K_FAIL() {
	    return this.getToken(SQLtinyParser.K_FAIL, 0);
	};

	K_IGNORE() {
	    return this.getToken(SQLtinyParser.K_IGNORE, 0);
	};

	K_REPLACE() {
	    return this.getToken(SQLtinyParser.K_REPLACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterConflict_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitConflict_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitConflict_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_expr;
    }

	literal_value() {
	    return this.getTypedRuleContext(Literal_valueContext,0);
	};

	BIND_PARAMETER() {
	    return this.getToken(SQLtinyParser.BIND_PARAMETER, 0);
	};

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.DOT);
	    } else {
	        return this.getToken(SQLtinyParser.DOT, i);
	    }
	};


	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	unary_operator() {
	    return this.getTypedRuleContext(Unary_operatorContext,0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	function_name() {
	    return this.getTypedRuleContext(Function_nameContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	STAR() {
	    return this.getToken(SQLtinyParser.STAR, 0);
	};

	K_DISTINCT() {
	    return this.getToken(SQLtinyParser.K_DISTINCT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_CAST() {
	    return this.getToken(SQLtinyParser.K_CAST, 0);
	};

	K_AS() {
	    return this.getToken(SQLtinyParser.K_AS, 0);
	};

	type_name() {
	    return this.getTypedRuleContext(Type_nameContext,0);
	};

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_CASE() {
	    return this.getToken(SQLtinyParser.K_CASE, 0);
	};

	K_END() {
	    return this.getToken(SQLtinyParser.K_END, 0);
	};

	K_WHEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_WHEN);
	    } else {
	        return this.getToken(SQLtinyParser.K_WHEN, i);
	    }
	};


	K_THEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_THEN);
	    } else {
	        return this.getToken(SQLtinyParser.K_THEN, i);
	    }
	};


	K_ELSE() {
	    return this.getToken(SQLtinyParser.K_ELSE, 0);
	};

	raise_function() {
	    return this.getTypedRuleContext(Raise_functionContext,0);
	};

	PIPE2() {
	    return this.getToken(SQLtinyParser.PIPE2, 0);
	};

	DIV() {
	    return this.getToken(SQLtinyParser.DIV, 0);
	};

	MOD() {
	    return this.getToken(SQLtinyParser.MOD, 0);
	};

	PLUS() {
	    return this.getToken(SQLtinyParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(SQLtinyParser.MINUS, 0);
	};

	LT2() {
	    return this.getToken(SQLtinyParser.LT2, 0);
	};

	GT2() {
	    return this.getToken(SQLtinyParser.GT2, 0);
	};

	AMP() {
	    return this.getToken(SQLtinyParser.AMP, 0);
	};

	PIPE() {
	    return this.getToken(SQLtinyParser.PIPE, 0);
	};

	LT() {
	    return this.getToken(SQLtinyParser.LT, 0);
	};

	LT_EQ() {
	    return this.getToken(SQLtinyParser.LT_EQ, 0);
	};

	GT() {
	    return this.getToken(SQLtinyParser.GT, 0);
	};

	GT_EQ() {
	    return this.getToken(SQLtinyParser.GT_EQ, 0);
	};

	ASSIGN() {
	    return this.getToken(SQLtinyParser.ASSIGN, 0);
	};

	EQ() {
	    return this.getToken(SQLtinyParser.EQ, 0);
	};

	NOT_EQ1() {
	    return this.getToken(SQLtinyParser.NOT_EQ1, 0);
	};

	NOT_EQ2() {
	    return this.getToken(SQLtinyParser.NOT_EQ2, 0);
	};

	K_IS() {
	    return this.getToken(SQLtinyParser.K_IS, 0);
	};

	K_IN() {
	    return this.getToken(SQLtinyParser.K_IN, 0);
	};

	K_LIKE() {
	    return this.getToken(SQLtinyParser.K_LIKE, 0);
	};

	K_GLOB() {
	    return this.getToken(SQLtinyParser.K_GLOB, 0);
	};

	K_MATCH() {
	    return this.getToken(SQLtinyParser.K_MATCH, 0);
	};

	K_REGEXP() {
	    return this.getToken(SQLtinyParser.K_REGEXP, 0);
	};

	K_AND() {
	    return this.getToken(SQLtinyParser.K_AND, 0);
	};

	K_OR() {
	    return this.getToken(SQLtinyParser.K_OR, 0);
	};

	K_BETWEEN() {
	    return this.getToken(SQLtinyParser.K_BETWEEN, 0);
	};

	K_COLLATE() {
	    return this.getToken(SQLtinyParser.K_COLLATE, 0);
	};

	collation_name() {
	    return this.getTypedRuleContext(Collation_nameContext,0);
	};

	K_ESCAPE() {
	    return this.getToken(SQLtinyParser.K_ESCAPE, 0);
	};

	K_ISNULL() {
	    return this.getToken(SQLtinyParser.K_ISNULL, 0);
	};

	K_NOTNULL() {
	    return this.getToken(SQLtinyParser.K_NOTNULL, 0);
	};

	K_NULL() {
	    return this.getToken(SQLtinyParser.K_NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Foreign_key_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_foreign_key_clause;
    }

	K_REFERENCES() {
	    return this.getToken(SQLtinyParser.K_REFERENCES, 0);
	};

	foreign_table() {
	    return this.getTypedRuleContext(Foreign_tableContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	K_DEFERRABLE() {
	    return this.getToken(SQLtinyParser.K_DEFERRABLE, 0);
	};

	K_ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_ON);
	    } else {
	        return this.getToken(SQLtinyParser.K_ON, i);
	    }
	};


	K_MATCH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_MATCH);
	    } else {
	        return this.getToken(SQLtinyParser.K_MATCH, i);
	    }
	};


	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_DELETE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_DELETE);
	    } else {
	        return this.getToken(SQLtinyParser.K_DELETE, i);
	    }
	};


	K_UPDATE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_UPDATE);
	    } else {
	        return this.getToken(SQLtinyParser.K_UPDATE, i);
	    }
	};


	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_INITIALLY() {
	    return this.getToken(SQLtinyParser.K_INITIALLY, 0);
	};

	K_DEFERRED() {
	    return this.getToken(SQLtinyParser.K_DEFERRED, 0);
	};

	K_IMMEDIATE() {
	    return this.getToken(SQLtinyParser.K_IMMEDIATE, 0);
	};

	K_SET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_SET);
	    } else {
	        return this.getToken(SQLtinyParser.K_SET, i);
	    }
	};


	K_NULL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_NULL);
	    } else {
	        return this.getToken(SQLtinyParser.K_NULL, i);
	    }
	};


	K_DEFAULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_DEFAULT);
	    } else {
	        return this.getToken(SQLtinyParser.K_DEFAULT, i);
	    }
	};


	K_CASCADE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_CASCADE);
	    } else {
	        return this.getToken(SQLtinyParser.K_CASCADE, i);
	    }
	};


	K_RESTRICT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_RESTRICT);
	    } else {
	        return this.getToken(SQLtinyParser.K_RESTRICT, i);
	    }
	};


	K_NO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_NO);
	    } else {
	        return this.getToken(SQLtinyParser.K_NO, i);
	    }
	};


	K_ACTION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_ACTION);
	    } else {
	        return this.getToken(SQLtinyParser.K_ACTION, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterForeign_key_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitForeign_key_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitForeign_key_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Raise_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_raise_function;
    }

	K_RAISE() {
	    return this.getToken(SQLtinyParser.K_RAISE, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	K_IGNORE() {
	    return this.getToken(SQLtinyParser.K_IGNORE, 0);
	};

	COMMA() {
	    return this.getToken(SQLtinyParser.COMMA, 0);
	};

	error_message() {
	    return this.getTypedRuleContext(Error_messageContext,0);
	};

	K_ROLLBACK() {
	    return this.getToken(SQLtinyParser.K_ROLLBACK, 0);
	};

	K_ABORT() {
	    return this.getToken(SQLtinyParser.K_ABORT, 0);
	};

	K_FAIL() {
	    return this.getToken(SQLtinyParser.K_FAIL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterRaise_function(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitRaise_function(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitRaise_function(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Indexed_columnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_indexed_column;
    }

	column_name() {
	    return this.getTypedRuleContext(Column_nameContext,0);
	};

	K_COLLATE() {
	    return this.getToken(SQLtinyParser.K_COLLATE, 0);
	};

	collation_name() {
	    return this.getTypedRuleContext(Collation_nameContext,0);
	};

	K_ASC() {
	    return this.getToken(SQLtinyParser.K_ASC, 0);
	};

	K_DESC() {
	    return this.getToken(SQLtinyParser.K_DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterIndexed_column(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitIndexed_column(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitIndexed_column(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_table_constraint;
    }

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	indexed_column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Indexed_columnContext);
	    } else {
	        return this.getTypedRuleContext(Indexed_columnContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	conflict_clause() {
	    return this.getTypedRuleContext(Conflict_clauseContext,0);
	};

	K_CHECK() {
	    return this.getToken(SQLtinyParser.K_CHECK, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	K_FOREIGN() {
	    return this.getToken(SQLtinyParser.K_FOREIGN, 0);
	};

	K_KEY() {
	    return this.getToken(SQLtinyParser.K_KEY, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	foreign_key_clause() {
	    return this.getTypedRuleContext(Foreign_key_clauseContext,0);
	};

	K_CONSTRAINT() {
	    return this.getToken(SQLtinyParser.K_CONSTRAINT, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	K_PRIMARY() {
	    return this.getToken(SQLtinyParser.K_PRIMARY, 0);
	};

	K_UNIQUE() {
	    return this.getToken(SQLtinyParser.K_UNIQUE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterTable_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitTable_constraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitTable_constraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class With_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_with_clause;
    }

	K_WITH() {
	    return this.getToken(SQLtinyParser.K_WITH, 0);
	};

	cte_table_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Cte_table_nameContext);
	    } else {
	        return this.getTypedRuleContext(Cte_table_nameContext,i);
	    }
	};

	K_AS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.K_AS);
	    } else {
	        return this.getToken(SQLtinyParser.K_AS, i);
	    }
	};


	OPEN_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.OPEN_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.OPEN_PAR, i);
	    }
	};


	select_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Select_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Select_stmtContext,i);
	    }
	};

	CLOSE_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.CLOSE_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.CLOSE_PAR, i);
	    }
	};


	K_RECURSIVE() {
	    return this.getToken(SQLtinyParser.K_RECURSIVE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterWith_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitWith_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitWith_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Qualified_table_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_qualified_table_name;
    }

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	K_INDEXED() {
	    return this.getToken(SQLtinyParser.K_INDEXED, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterQualified_table_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitQualified_table_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitQualified_table_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Ordering_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_ordering_term;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	K_COLLATE() {
	    return this.getToken(SQLtinyParser.K_COLLATE, 0);
	};

	collation_name() {
	    return this.getTypedRuleContext(Collation_nameContext,0);
	};

	K_ASC() {
	    return this.getToken(SQLtinyParser.K_ASC, 0);
	};

	K_DESC() {
	    return this.getToken(SQLtinyParser.K_DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterOrdering_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitOrdering_term(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitOrdering_term(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Pragma_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_pragma_value;
    }

	signed_number() {
	    return this.getTypedRuleContext(Signed_numberContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(SQLtinyParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterPragma_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitPragma_value(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitPragma_value(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Common_table_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_common_table_expression;
    }

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	K_AS() {
	    return this.getToken(SQLtinyParser.K_AS, 0);
	};

	OPEN_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.OPEN_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.OPEN_PAR, i);
	    }
	};


	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	CLOSE_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.CLOSE_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.CLOSE_PAR, i);
	    }
	};


	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCommon_table_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCommon_table_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitCommon_table_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Result_columnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_result_column;
    }

	STAR() {
	    return this.getToken(SQLtinyParser.STAR, 0);
	};

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	column_alias() {
	    return this.getTypedRuleContext(Column_aliasContext,0);
	};

	K_AS() {
	    return this.getToken(SQLtinyParser.K_AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterResult_column(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitResult_column(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitResult_column(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_or_subqueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_table_or_subquery;
    }

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	database_name() {
	    return this.getTypedRuleContext(Database_nameContext,0);
	};

	DOT() {
	    return this.getToken(SQLtinyParser.DOT, 0);
	};

	table_alias() {
	    return this.getTypedRuleContext(Table_aliasContext,0);
	};

	K_INDEXED() {
	    return this.getToken(SQLtinyParser.K_INDEXED, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_AS() {
	    return this.getToken(SQLtinyParser.K_AS, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	table_or_subquery = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_or_subqueryContext);
	    } else {
	        return this.getTypedRuleContext(Table_or_subqueryContext,i);
	    }
	};

	join_clause() {
	    return this.getTypedRuleContext(Join_clauseContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterTable_or_subquery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitTable_or_subquery(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitTable_or_subquery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Join_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_join_clause;
    }

	table_or_subquery = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_or_subqueryContext);
	    } else {
	        return this.getTypedRuleContext(Table_or_subqueryContext,i);
	    }
	};

	join_operator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Join_operatorContext);
	    } else {
	        return this.getTypedRuleContext(Join_operatorContext,i);
	    }
	};

	join_constraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Join_constraintContext);
	    } else {
	        return this.getTypedRuleContext(Join_constraintContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterJoin_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitJoin_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitJoin_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Join_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_join_operator;
    }

	COMMA() {
	    return this.getToken(SQLtinyParser.COMMA, 0);
	};

	K_JOIN() {
	    return this.getToken(SQLtinyParser.K_JOIN, 0);
	};

	K_NATURAL() {
	    return this.getToken(SQLtinyParser.K_NATURAL, 0);
	};

	K_LEFT() {
	    return this.getToken(SQLtinyParser.K_LEFT, 0);
	};

	K_INNER() {
	    return this.getToken(SQLtinyParser.K_INNER, 0);
	};

	K_CROSS() {
	    return this.getToken(SQLtinyParser.K_CROSS, 0);
	};

	K_OUTER() {
	    return this.getToken(SQLtinyParser.K_OUTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterJoin_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitJoin_operator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitJoin_operator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Join_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_join_constraint;
    }

	K_ON() {
	    return this.getToken(SQLtinyParser.K_ON, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	K_USING() {
	    return this.getToken(SQLtinyParser.K_USING, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterJoin_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitJoin_constraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitJoin_constraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Select_coreContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_select_core;
    }

	K_SELECT() {
	    return this.getToken(SQLtinyParser.K_SELECT, 0);
	};

	result_column = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Result_columnContext);
	    } else {
	        return this.getTypedRuleContext(Result_columnContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	K_FROM() {
	    return this.getToken(SQLtinyParser.K_FROM, 0);
	};

	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	K_GROUP() {
	    return this.getToken(SQLtinyParser.K_GROUP, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	K_DISTINCT() {
	    return this.getToken(SQLtinyParser.K_DISTINCT, 0);
	};

	K_ALL() {
	    return this.getToken(SQLtinyParser.K_ALL, 0);
	};

	table_or_subquery = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Table_or_subqueryContext);
	    } else {
	        return this.getTypedRuleContext(Table_or_subqueryContext,i);
	    }
	};

	join_clause() {
	    return this.getTypedRuleContext(Join_clauseContext,0);
	};

	K_HAVING() {
	    return this.getToken(SQLtinyParser.K_HAVING, 0);
	};

	K_VALUES() {
	    return this.getToken(SQLtinyParser.K_VALUES, 0);
	};

	OPEN_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.OPEN_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.OPEN_PAR, i);
	    }
	};


	CLOSE_PAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.CLOSE_PAR);
	    } else {
	        return this.getToken(SQLtinyParser.CLOSE_PAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSelect_core(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSelect_core(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitSelect_core(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Compound_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_compound_operator;
    }

	K_UNION() {
	    return this.getToken(SQLtinyParser.K_UNION, 0);
	};

	K_ALL() {
	    return this.getToken(SQLtinyParser.K_ALL, 0);
	};

	K_INTERSECT() {
	    return this.getToken(SQLtinyParser.K_INTERSECT, 0);
	};

	K_EXCEPT() {
	    return this.getToken(SQLtinyParser.K_EXCEPT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCompound_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCompound_operator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitCompound_operator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Cte_table_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_cte_table_name;
    }

	table_name() {
	    return this.getTypedRuleContext(Table_nameContext,0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	column_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Column_nameContext);
	    } else {
	        return this.getTypedRuleContext(Column_nameContext,i);
	    }
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SQLtinyParser.COMMA);
	    } else {
	        return this.getToken(SQLtinyParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCte_table_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCte_table_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitCte_table_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Signed_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_signed_number;
    }

	NUMERIC_LITERAL() {
	    return this.getToken(SQLtinyParser.NUMERIC_LITERAL, 0);
	};

	PLUS() {
	    return this.getToken(SQLtinyParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(SQLtinyParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSigned_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSigned_number(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitSigned_number(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Literal_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_literal_value;
    }

	NUMERIC_LITERAL() {
	    return this.getToken(SQLtinyParser.NUMERIC_LITERAL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(SQLtinyParser.STRING_LITERAL, 0);
	};

	BLOB_LITERAL() {
	    return this.getToken(SQLtinyParser.BLOB_LITERAL, 0);
	};

	K_NULL() {
	    return this.getToken(SQLtinyParser.K_NULL, 0);
	};

	K_CURRENT_TIME() {
	    return this.getToken(SQLtinyParser.K_CURRENT_TIME, 0);
	};

	K_CURRENT_DATE() {
	    return this.getToken(SQLtinyParser.K_CURRENT_DATE, 0);
	};

	K_CURRENT_TIMESTAMP() {
	    return this.getToken(SQLtinyParser.K_CURRENT_TIMESTAMP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterLiteral_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitLiteral_value(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitLiteral_value(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Unary_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_unary_operator;
    }

	MINUS() {
	    return this.getToken(SQLtinyParser.MINUS, 0);
	};

	PLUS() {
	    return this.getToken(SQLtinyParser.PLUS, 0);
	};

	TILDE() {
	    return this.getToken(SQLtinyParser.TILDE, 0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterUnary_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitUnary_operator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitUnary_operator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Error_messageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_error_message;
    }

	STRING_LITERAL() {
	    return this.getToken(SQLtinyParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterError_message(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitError_message(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitError_message(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Module_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_module_argument;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	column_def() {
	    return this.getTypedRuleContext(Column_defContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterModule_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitModule_argument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitModule_argument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Column_aliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_column_alias;
    }

	IDENTIFIER() {
	    return this.getToken(SQLtinyParser.IDENTIFIER, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(SQLtinyParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterColumn_alias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitColumn_alias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitColumn_alias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_keyword;
    }

	K_ABORT() {
	    return this.getToken(SQLtinyParser.K_ABORT, 0);
	};

	K_ACTION() {
	    return this.getToken(SQLtinyParser.K_ACTION, 0);
	};

	K_ADD() {
	    return this.getToken(SQLtinyParser.K_ADD, 0);
	};

	K_AFTER() {
	    return this.getToken(SQLtinyParser.K_AFTER, 0);
	};

	K_ALL() {
	    return this.getToken(SQLtinyParser.K_ALL, 0);
	};

	K_ALTER() {
	    return this.getToken(SQLtinyParser.K_ALTER, 0);
	};

	K_ANALYZE() {
	    return this.getToken(SQLtinyParser.K_ANALYZE, 0);
	};

	K_AND() {
	    return this.getToken(SQLtinyParser.K_AND, 0);
	};

	K_AS() {
	    return this.getToken(SQLtinyParser.K_AS, 0);
	};

	K_ASC() {
	    return this.getToken(SQLtinyParser.K_ASC, 0);
	};

	K_ATTACH() {
	    return this.getToken(SQLtinyParser.K_ATTACH, 0);
	};

	K_AUTOINCREMENT() {
	    return this.getToken(SQLtinyParser.K_AUTOINCREMENT, 0);
	};

	K_BEFORE() {
	    return this.getToken(SQLtinyParser.K_BEFORE, 0);
	};

	K_BEGIN() {
	    return this.getToken(SQLtinyParser.K_BEGIN, 0);
	};

	K_BETWEEN() {
	    return this.getToken(SQLtinyParser.K_BETWEEN, 0);
	};

	K_BY() {
	    return this.getToken(SQLtinyParser.K_BY, 0);
	};

	K_CASCADE() {
	    return this.getToken(SQLtinyParser.K_CASCADE, 0);
	};

	K_CASE() {
	    return this.getToken(SQLtinyParser.K_CASE, 0);
	};

	K_CAST() {
	    return this.getToken(SQLtinyParser.K_CAST, 0);
	};

	K_CHECK() {
	    return this.getToken(SQLtinyParser.K_CHECK, 0);
	};

	K_COLLATE() {
	    return this.getToken(SQLtinyParser.K_COLLATE, 0);
	};

	K_COLUMN() {
	    return this.getToken(SQLtinyParser.K_COLUMN, 0);
	};

	K_COMMIT() {
	    return this.getToken(SQLtinyParser.K_COMMIT, 0);
	};

	K_CONFLICT() {
	    return this.getToken(SQLtinyParser.K_CONFLICT, 0);
	};

	K_CONSTRAINT() {
	    return this.getToken(SQLtinyParser.K_CONSTRAINT, 0);
	};

	K_CREATE() {
	    return this.getToken(SQLtinyParser.K_CREATE, 0);
	};

	K_CROSS() {
	    return this.getToken(SQLtinyParser.K_CROSS, 0);
	};

	K_CURRENT_DATE() {
	    return this.getToken(SQLtinyParser.K_CURRENT_DATE, 0);
	};

	K_CURRENT_TIME() {
	    return this.getToken(SQLtinyParser.K_CURRENT_TIME, 0);
	};

	K_CURRENT_TIMESTAMP() {
	    return this.getToken(SQLtinyParser.K_CURRENT_TIMESTAMP, 0);
	};

	K_DATABASE() {
	    return this.getToken(SQLtinyParser.K_DATABASE, 0);
	};

	K_DEFAULT() {
	    return this.getToken(SQLtinyParser.K_DEFAULT, 0);
	};

	K_DEFERRABLE() {
	    return this.getToken(SQLtinyParser.K_DEFERRABLE, 0);
	};

	K_DEFERRED() {
	    return this.getToken(SQLtinyParser.K_DEFERRED, 0);
	};

	K_DELETE() {
	    return this.getToken(SQLtinyParser.K_DELETE, 0);
	};

	K_DESC() {
	    return this.getToken(SQLtinyParser.K_DESC, 0);
	};

	K_DETACH() {
	    return this.getToken(SQLtinyParser.K_DETACH, 0);
	};

	K_DISTINCT() {
	    return this.getToken(SQLtinyParser.K_DISTINCT, 0);
	};

	K_DROP() {
	    return this.getToken(SQLtinyParser.K_DROP, 0);
	};

	K_EACH() {
	    return this.getToken(SQLtinyParser.K_EACH, 0);
	};

	K_ELSE() {
	    return this.getToken(SQLtinyParser.K_ELSE, 0);
	};

	K_END() {
	    return this.getToken(SQLtinyParser.K_END, 0);
	};

	K_ESCAPE() {
	    return this.getToken(SQLtinyParser.K_ESCAPE, 0);
	};

	K_EXCEPT() {
	    return this.getToken(SQLtinyParser.K_EXCEPT, 0);
	};

	K_EXCLUSIVE() {
	    return this.getToken(SQLtinyParser.K_EXCLUSIVE, 0);
	};

	K_EXISTS() {
	    return this.getToken(SQLtinyParser.K_EXISTS, 0);
	};

	K_EXPLAIN() {
	    return this.getToken(SQLtinyParser.K_EXPLAIN, 0);
	};

	K_FAIL() {
	    return this.getToken(SQLtinyParser.K_FAIL, 0);
	};

	K_FOR() {
	    return this.getToken(SQLtinyParser.K_FOR, 0);
	};

	K_FOREIGN() {
	    return this.getToken(SQLtinyParser.K_FOREIGN, 0);
	};

	K_FROM() {
	    return this.getToken(SQLtinyParser.K_FROM, 0);
	};

	K_FULL() {
	    return this.getToken(SQLtinyParser.K_FULL, 0);
	};

	K_GLOB() {
	    return this.getToken(SQLtinyParser.K_GLOB, 0);
	};

	K_GROUP() {
	    return this.getToken(SQLtinyParser.K_GROUP, 0);
	};

	K_HAVING() {
	    return this.getToken(SQLtinyParser.K_HAVING, 0);
	};

	K_IF() {
	    return this.getToken(SQLtinyParser.K_IF, 0);
	};

	K_IGNORE() {
	    return this.getToken(SQLtinyParser.K_IGNORE, 0);
	};

	K_IMMEDIATE() {
	    return this.getToken(SQLtinyParser.K_IMMEDIATE, 0);
	};

	K_IN() {
	    return this.getToken(SQLtinyParser.K_IN, 0);
	};

	K_INDEX() {
	    return this.getToken(SQLtinyParser.K_INDEX, 0);
	};

	K_INDEXED() {
	    return this.getToken(SQLtinyParser.K_INDEXED, 0);
	};

	K_INITIALLY() {
	    return this.getToken(SQLtinyParser.K_INITIALLY, 0);
	};

	K_INNER() {
	    return this.getToken(SQLtinyParser.K_INNER, 0);
	};

	K_INSERT() {
	    return this.getToken(SQLtinyParser.K_INSERT, 0);
	};

	K_INSTEAD() {
	    return this.getToken(SQLtinyParser.K_INSTEAD, 0);
	};

	K_INTERSECT() {
	    return this.getToken(SQLtinyParser.K_INTERSECT, 0);
	};

	K_INTO() {
	    return this.getToken(SQLtinyParser.K_INTO, 0);
	};

	K_IS() {
	    return this.getToken(SQLtinyParser.K_IS, 0);
	};

	K_ISNULL() {
	    return this.getToken(SQLtinyParser.K_ISNULL, 0);
	};

	K_JOIN() {
	    return this.getToken(SQLtinyParser.K_JOIN, 0);
	};

	K_KEY() {
	    return this.getToken(SQLtinyParser.K_KEY, 0);
	};

	K_LEFT() {
	    return this.getToken(SQLtinyParser.K_LEFT, 0);
	};

	K_LIKE() {
	    return this.getToken(SQLtinyParser.K_LIKE, 0);
	};

	K_LIMIT() {
	    return this.getToken(SQLtinyParser.K_LIMIT, 0);
	};

	K_MATCH() {
	    return this.getToken(SQLtinyParser.K_MATCH, 0);
	};

	K_NATURAL() {
	    return this.getToken(SQLtinyParser.K_NATURAL, 0);
	};

	K_NO() {
	    return this.getToken(SQLtinyParser.K_NO, 0);
	};

	K_NOT() {
	    return this.getToken(SQLtinyParser.K_NOT, 0);
	};

	K_NOTNULL() {
	    return this.getToken(SQLtinyParser.K_NOTNULL, 0);
	};

	K_NULL() {
	    return this.getToken(SQLtinyParser.K_NULL, 0);
	};

	K_OF() {
	    return this.getToken(SQLtinyParser.K_OF, 0);
	};

	K_OFFSET() {
	    return this.getToken(SQLtinyParser.K_OFFSET, 0);
	};

	K_ON() {
	    return this.getToken(SQLtinyParser.K_ON, 0);
	};

	K_OR() {
	    return this.getToken(SQLtinyParser.K_OR, 0);
	};

	K_ORDER() {
	    return this.getToken(SQLtinyParser.K_ORDER, 0);
	};

	K_OUTER() {
	    return this.getToken(SQLtinyParser.K_OUTER, 0);
	};

	K_PLAN() {
	    return this.getToken(SQLtinyParser.K_PLAN, 0);
	};

	K_PRAGMA() {
	    return this.getToken(SQLtinyParser.K_PRAGMA, 0);
	};

	K_PRIMARY() {
	    return this.getToken(SQLtinyParser.K_PRIMARY, 0);
	};

	K_QUERY() {
	    return this.getToken(SQLtinyParser.K_QUERY, 0);
	};

	K_RAISE() {
	    return this.getToken(SQLtinyParser.K_RAISE, 0);
	};

	K_RECURSIVE() {
	    return this.getToken(SQLtinyParser.K_RECURSIVE, 0);
	};

	K_REFERENCES() {
	    return this.getToken(SQLtinyParser.K_REFERENCES, 0);
	};

	K_REGEXP() {
	    return this.getToken(SQLtinyParser.K_REGEXP, 0);
	};

	K_REINDEX() {
	    return this.getToken(SQLtinyParser.K_REINDEX, 0);
	};

	K_RELEASE() {
	    return this.getToken(SQLtinyParser.K_RELEASE, 0);
	};

	K_RENAME() {
	    return this.getToken(SQLtinyParser.K_RENAME, 0);
	};

	K_REPLACE() {
	    return this.getToken(SQLtinyParser.K_REPLACE, 0);
	};

	K_RESTRICT() {
	    return this.getToken(SQLtinyParser.K_RESTRICT, 0);
	};

	K_RIGHT() {
	    return this.getToken(SQLtinyParser.K_RIGHT, 0);
	};

	K_ROLLBACK() {
	    return this.getToken(SQLtinyParser.K_ROLLBACK, 0);
	};

	K_ROW() {
	    return this.getToken(SQLtinyParser.K_ROW, 0);
	};

	K_SAVEPOINT() {
	    return this.getToken(SQLtinyParser.K_SAVEPOINT, 0);
	};

	K_SELECT() {
	    return this.getToken(SQLtinyParser.K_SELECT, 0);
	};

	K_SET() {
	    return this.getToken(SQLtinyParser.K_SET, 0);
	};

	K_TABLE() {
	    return this.getToken(SQLtinyParser.K_TABLE, 0);
	};

	K_TEMP() {
	    return this.getToken(SQLtinyParser.K_TEMP, 0);
	};

	K_TEMPORARY() {
	    return this.getToken(SQLtinyParser.K_TEMPORARY, 0);
	};

	K_THEN() {
	    return this.getToken(SQLtinyParser.K_THEN, 0);
	};

	K_TO() {
	    return this.getToken(SQLtinyParser.K_TO, 0);
	};

	K_TRANSACTION() {
	    return this.getToken(SQLtinyParser.K_TRANSACTION, 0);
	};

	K_TRIGGER() {
	    return this.getToken(SQLtinyParser.K_TRIGGER, 0);
	};

	K_UNION() {
	    return this.getToken(SQLtinyParser.K_UNION, 0);
	};

	K_UNIQUE() {
	    return this.getToken(SQLtinyParser.K_UNIQUE, 0);
	};

	K_UPDATE() {
	    return this.getToken(SQLtinyParser.K_UPDATE, 0);
	};

	K_USING() {
	    return this.getToken(SQLtinyParser.K_USING, 0);
	};

	K_VACUUM() {
	    return this.getToken(SQLtinyParser.K_VACUUM, 0);
	};

	K_VALUES() {
	    return this.getToken(SQLtinyParser.K_VALUES, 0);
	};

	K_VIEW() {
	    return this.getToken(SQLtinyParser.K_VIEW, 0);
	};

	K_VIRTUAL() {
	    return this.getToken(SQLtinyParser.K_VIRTUAL, 0);
	};

	K_WHEN() {
	    return this.getToken(SQLtinyParser.K_WHEN, 0);
	};

	K_WHERE() {
	    return this.getToken(SQLtinyParser.K_WHERE, 0);
	};

	K_WITH() {
	    return this.getToken(SQLtinyParser.K_WITH, 0);
	};

	K_WITHOUT() {
	    return this.getToken(SQLtinyParser.K_WITHOUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitKeyword(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Function_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_function_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterFunction_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitFunction_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitFunction_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Database_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_database_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterDatabase_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitDatabase_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitDatabase_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_table_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterTable_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitTable_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitTable_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_or_index_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_table_or_index_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterTable_or_index_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitTable_or_index_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitTable_or_index_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class New_table_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_new_table_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterNew_table_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitNew_table_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitNew_table_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Column_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_column_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterColumn_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitColumn_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitColumn_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Collation_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_collation_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterCollation_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitCollation_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitCollation_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Foreign_tableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_foreign_table;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterForeign_table(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitForeign_table(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitForeign_table(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Index_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_index_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterIndex_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitIndex_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitIndex_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Trigger_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_trigger_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterTrigger_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitTrigger_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitTrigger_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class View_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_view_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterView_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitView_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitView_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Module_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_module_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterModule_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitModule_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitModule_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Pragma_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_pragma_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterPragma_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitPragma_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitPragma_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Savepoint_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_savepoint_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterSavepoint_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitSavepoint_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitSavepoint_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Table_aliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_table_alias;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterTable_alias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitTable_alias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitTable_alias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Transaction_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_transaction_name;
    }

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterTransaction_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitTransaction_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitTransaction_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Any_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLtinyParser.RULE_any_name;
    }

	IDENTIFIER() {
	    return this.getToken(SQLtinyParser.IDENTIFIER, 0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(SQLtinyParser.STRING_LITERAL, 0);
	};

	OPEN_PAR() {
	    return this.getToken(SQLtinyParser.OPEN_PAR, 0);
	};

	any_name() {
	    return this.getTypedRuleContext(Any_nameContext,0);
	};

	CLOSE_PAR() {
	    return this.getToken(SQLtinyParser.CLOSE_PAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.enterAny_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SQLtinyListener ) {
	        listener.exitAny_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof SQLtinyVisitor ) {
	        return visitor.visitAny_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




SQLtinyParser.ParseContext = ParseContext; 
SQLtinyParser.ErrorContext = ErrorContext; 
SQLtinyParser.Sql_stmt_listContext = Sql_stmt_listContext; 
SQLtinyParser.Sql_stmtContext = Sql_stmtContext; 
SQLtinyParser.Create_index_stmtContext = Create_index_stmtContext; 
SQLtinyParser.Create_table_stmtContext = Create_table_stmtContext; 
SQLtinyParser.Delete_stmtContext = Delete_stmtContext; 
SQLtinyParser.Delete_stmt_limitedContext = Delete_stmt_limitedContext; 
SQLtinyParser.Drop_index_stmtContext = Drop_index_stmtContext; 
SQLtinyParser.Drop_table_stmtContext = Drop_table_stmtContext; 
SQLtinyParser.Insert_stmtContext = Insert_stmtContext; 
SQLtinyParser.Simple_select_stmtContext = Simple_select_stmtContext; 
SQLtinyParser.Select_stmtContext = Select_stmtContext; 
SQLtinyParser.Select_or_valuesContext = Select_or_valuesContext; 
SQLtinyParser.Update_stmtContext = Update_stmtContext; 
SQLtinyParser.Update_stmt_limitedContext = Update_stmt_limitedContext; 
SQLtinyParser.Column_defContext = Column_defContext; 
SQLtinyParser.Type_nameContext = Type_nameContext; 
SQLtinyParser.Column_constraintContext = Column_constraintContext; 
SQLtinyParser.Conflict_clauseContext = Conflict_clauseContext; 
SQLtinyParser.ExprContext = ExprContext; 
SQLtinyParser.Foreign_key_clauseContext = Foreign_key_clauseContext; 
SQLtinyParser.Raise_functionContext = Raise_functionContext; 
SQLtinyParser.Indexed_columnContext = Indexed_columnContext; 
SQLtinyParser.Table_constraintContext = Table_constraintContext; 
SQLtinyParser.With_clauseContext = With_clauseContext; 
SQLtinyParser.Qualified_table_nameContext = Qualified_table_nameContext; 
SQLtinyParser.Ordering_termContext = Ordering_termContext; 
SQLtinyParser.Pragma_valueContext = Pragma_valueContext; 
SQLtinyParser.Common_table_expressionContext = Common_table_expressionContext; 
SQLtinyParser.Result_columnContext = Result_columnContext; 
SQLtinyParser.Table_or_subqueryContext = Table_or_subqueryContext; 
SQLtinyParser.Join_clauseContext = Join_clauseContext; 
SQLtinyParser.Join_operatorContext = Join_operatorContext; 
SQLtinyParser.Join_constraintContext = Join_constraintContext; 
SQLtinyParser.Select_coreContext = Select_coreContext; 
SQLtinyParser.Compound_operatorContext = Compound_operatorContext; 
SQLtinyParser.Cte_table_nameContext = Cte_table_nameContext; 
SQLtinyParser.Signed_numberContext = Signed_numberContext; 
SQLtinyParser.Literal_valueContext = Literal_valueContext; 
SQLtinyParser.Unary_operatorContext = Unary_operatorContext; 
SQLtinyParser.Error_messageContext = Error_messageContext; 
SQLtinyParser.Module_argumentContext = Module_argumentContext; 
SQLtinyParser.Column_aliasContext = Column_aliasContext; 
SQLtinyParser.KeywordContext = KeywordContext; 
SQLtinyParser.NameContext = NameContext; 
SQLtinyParser.Function_nameContext = Function_nameContext; 
SQLtinyParser.Database_nameContext = Database_nameContext; 
SQLtinyParser.Table_nameContext = Table_nameContext; 
SQLtinyParser.Table_or_index_nameContext = Table_or_index_nameContext; 
SQLtinyParser.New_table_nameContext = New_table_nameContext; 
SQLtinyParser.Column_nameContext = Column_nameContext; 
SQLtinyParser.Collation_nameContext = Collation_nameContext; 
SQLtinyParser.Foreign_tableContext = Foreign_tableContext; 
SQLtinyParser.Index_nameContext = Index_nameContext; 
SQLtinyParser.Trigger_nameContext = Trigger_nameContext; 
SQLtinyParser.View_nameContext = View_nameContext; 
SQLtinyParser.Module_nameContext = Module_nameContext; 
SQLtinyParser.Pragma_nameContext = Pragma_nameContext; 
SQLtinyParser.Savepoint_nameContext = Savepoint_nameContext; 
SQLtinyParser.Table_aliasContext = Table_aliasContext; 
SQLtinyParser.Transaction_nameContext = Transaction_nameContext; 
SQLtinyParser.Any_nameContext = Any_nameContext; 
